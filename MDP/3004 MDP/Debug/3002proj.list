
3002proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b870  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d58  0800ba00  0800ba00  0001ba00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c758  0800c758  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800c758  0800c758  0001c758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c760  0800c760  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c760  0800c760  0001c760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c764  0800c764  0001c764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800c768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          0000506c  20000080  20000080  00020080  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200050ec  200050ec  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dea5  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039ec  00000000  00000000  0003df55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001970  00000000  00000000  00041948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001830  00000000  00000000  000432b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004e25  00000000  00000000  00044ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c2ab  00000000  00000000  0004990d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9ff9  00000000  00000000  00065bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013fbb1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000077c8  00000000  00000000  0013fc04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b9e8 	.word	0x0800b9e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800b9e8 	.word	0x0800b9e8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b974 	b.w	8000e8c <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	468e      	mov	lr, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d14d      	bne.n	8000c66 <__udivmoddi4+0xaa>
 8000bca:	428a      	cmp	r2, r1
 8000bcc:	4694      	mov	ip, r2
 8000bce:	d969      	bls.n	8000ca4 <__udivmoddi4+0xe8>
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	b152      	cbz	r2, 8000bec <__udivmoddi4+0x30>
 8000bd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bda:	f1c2 0120 	rsb	r1, r2, #32
 8000bde:	fa20 f101 	lsr.w	r1, r0, r1
 8000be2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bea:	4094      	lsls	r4, r2
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	0c21      	lsrs	r1, r4, #16
 8000bf2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bf6:	fa1f f78c 	uxth.w	r7, ip
 8000bfa:	fb08 e316 	mls	r3, r8, r6, lr
 8000bfe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c02:	fb06 f107 	mul.w	r1, r6, r7
 8000c06:	4299      	cmp	r1, r3
 8000c08:	d90a      	bls.n	8000c20 <__udivmoddi4+0x64>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c12:	f080 811f 	bcs.w	8000e54 <__udivmoddi4+0x298>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 811c 	bls.w	8000e54 <__udivmoddi4+0x298>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	4463      	add	r3, ip
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 f707 	mul.w	r7, r0, r7
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x92>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c40:	f080 810a 	bcs.w	8000e58 <__udivmoddi4+0x29c>
 8000c44:	42a7      	cmp	r7, r4
 8000c46:	f240 8107 	bls.w	8000e58 <__udivmoddi4+0x29c>
 8000c4a:	4464      	add	r4, ip
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c52:	1be4      	subs	r4, r4, r7
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa4>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d909      	bls.n	8000c7e <__udivmoddi4+0xc2>
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	f000 80ef 	beq.w	8000e4e <__udivmoddi4+0x292>
 8000c70:	2600      	movs	r6, #0
 8000c72:	e9c5 0100 	strd	r0, r1, [r5]
 8000c76:	4630      	mov	r0, r6
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	fab3 f683 	clz	r6, r3
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d14a      	bne.n	8000d1c <__udivmoddi4+0x160>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xd4>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 80f9 	bhi.w	8000e82 <__udivmoddi4+0x2c6>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb61 0303 	sbc.w	r3, r1, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	469e      	mov	lr, r3
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d0e0      	beq.n	8000c60 <__udivmoddi4+0xa4>
 8000c9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca2:	e7dd      	b.n	8000c60 <__udivmoddi4+0xa4>
 8000ca4:	b902      	cbnz	r2, 8000ca8 <__udivmoddi4+0xec>
 8000ca6:	deff      	udf	#255	; 0xff
 8000ca8:	fab2 f282 	clz	r2, r2
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	f040 8092 	bne.w	8000dd6 <__udivmoddi4+0x21a>
 8000cb2:	eba1 010c 	sub.w	r1, r1, ip
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f fe8c 	uxth.w	lr, ip
 8000cbe:	2601      	movs	r6, #1
 8000cc0:	0c20      	lsrs	r0, r4, #16
 8000cc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cce:	fb0e f003 	mul.w	r0, lr, r3
 8000cd2:	4288      	cmp	r0, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x12c>
 8000cd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x12a>
 8000ce0:	4288      	cmp	r0, r1
 8000ce2:	f200 80cb 	bhi.w	8000e7c <__udivmoddi4+0x2c0>
 8000ce6:	4643      	mov	r3, r8
 8000ce8:	1a09      	subs	r1, r1, r0
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x156>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d08:	d202      	bcs.n	8000d10 <__udivmoddi4+0x154>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f200 80bb 	bhi.w	8000e86 <__udivmoddi4+0x2ca>
 8000d10:	4608      	mov	r0, r1
 8000d12:	eba4 040e 	sub.w	r4, r4, lr
 8000d16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1a:	e79c      	b.n	8000c56 <__udivmoddi4+0x9a>
 8000d1c:	f1c6 0720 	rsb	r7, r6, #32
 8000d20:	40b3      	lsls	r3, r6
 8000d22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d32:	431c      	orrs	r4, r3
 8000d34:	40f9      	lsrs	r1, r7
 8000d36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d42:	0c20      	lsrs	r0, r4, #16
 8000d44:	fa1f fe8c 	uxth.w	lr, ip
 8000d48:	fb09 1118 	mls	r1, r9, r8, r1
 8000d4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d50:	fb08 f00e 	mul.w	r0, r8, lr
 8000d54:	4288      	cmp	r0, r1
 8000d56:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5a:	d90b      	bls.n	8000d74 <__udivmoddi4+0x1b8>
 8000d5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d64:	f080 8088 	bcs.w	8000e78 <__udivmoddi4+0x2bc>
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	f240 8085 	bls.w	8000e78 <__udivmoddi4+0x2bc>
 8000d6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d72:	4461      	add	r1, ip
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d88:	458e      	cmp	lr, r1
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x1e2>
 8000d8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d94:	d26c      	bcs.n	8000e70 <__udivmoddi4+0x2b4>
 8000d96:	458e      	cmp	lr, r1
 8000d98:	d96a      	bls.n	8000e70 <__udivmoddi4+0x2b4>
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	4461      	add	r1, ip
 8000d9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da2:	fba0 9402 	umull	r9, r4, r0, r2
 8000da6:	eba1 010e 	sub.w	r1, r1, lr
 8000daa:	42a1      	cmp	r1, r4
 8000dac:	46c8      	mov	r8, r9
 8000dae:	46a6      	mov	lr, r4
 8000db0:	d356      	bcc.n	8000e60 <__udivmoddi4+0x2a4>
 8000db2:	d053      	beq.n	8000e5c <__udivmoddi4+0x2a0>
 8000db4:	b15d      	cbz	r5, 8000dce <__udivmoddi4+0x212>
 8000db6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dba:	eb61 010e 	sbc.w	r1, r1, lr
 8000dbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000dc6:	40f1      	lsrs	r1, r6
 8000dc8:	431f      	orrs	r7, r3
 8000dca:	e9c5 7100 	strd	r7, r1, [r5]
 8000dce:	2600      	movs	r6, #0
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	f1c2 0320 	rsb	r3, r2, #32
 8000dda:	40d8      	lsrs	r0, r3
 8000ddc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de0:	fa21 f303 	lsr.w	r3, r1, r3
 8000de4:	4091      	lsls	r1, r2
 8000de6:	4301      	orrs	r1, r0
 8000de8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dec:	fa1f fe8c 	uxth.w	lr, ip
 8000df0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df4:	fb07 3610 	mls	r6, r7, r0, r3
 8000df8:	0c0b      	lsrs	r3, r1, #16
 8000dfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000e02:	429e      	cmp	r6, r3
 8000e04:	fa04 f402 	lsl.w	r4, r4, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x260>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e12:	d22f      	bcs.n	8000e74 <__udivmoddi4+0x2b8>
 8000e14:	429e      	cmp	r6, r3
 8000e16:	d92d      	bls.n	8000e74 <__udivmoddi4+0x2b8>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	1b9b      	subs	r3, r3, r6
 8000e1e:	b289      	uxth	r1, r1
 8000e20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e24:	fb07 3316 	mls	r3, r7, r6, r3
 8000e28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e30:	428b      	cmp	r3, r1
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x28a>
 8000e34:	eb1c 0101 	adds.w	r1, ip, r1
 8000e38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e3c:	d216      	bcs.n	8000e6c <__udivmoddi4+0x2b0>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d914      	bls.n	8000e6c <__udivmoddi4+0x2b0>
 8000e42:	3e02      	subs	r6, #2
 8000e44:	4461      	add	r1, ip
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e4c:	e738      	b.n	8000cc0 <__udivmoddi4+0x104>
 8000e4e:	462e      	mov	r6, r5
 8000e50:	4628      	mov	r0, r5
 8000e52:	e705      	b.n	8000c60 <__udivmoddi4+0xa4>
 8000e54:	4606      	mov	r6, r0
 8000e56:	e6e3      	b.n	8000c20 <__udivmoddi4+0x64>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6f8      	b.n	8000c4e <__udivmoddi4+0x92>
 8000e5c:	454b      	cmp	r3, r9
 8000e5e:	d2a9      	bcs.n	8000db4 <__udivmoddi4+0x1f8>
 8000e60:	ebb9 0802 	subs.w	r8, r9, r2
 8000e64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e68:	3801      	subs	r0, #1
 8000e6a:	e7a3      	b.n	8000db4 <__udivmoddi4+0x1f8>
 8000e6c:	4646      	mov	r6, r8
 8000e6e:	e7ea      	b.n	8000e46 <__udivmoddi4+0x28a>
 8000e70:	4620      	mov	r0, r4
 8000e72:	e794      	b.n	8000d9e <__udivmoddi4+0x1e2>
 8000e74:	4640      	mov	r0, r8
 8000e76:	e7d1      	b.n	8000e1c <__udivmoddi4+0x260>
 8000e78:	46d0      	mov	r8, sl
 8000e7a:	e77b      	b.n	8000d74 <__udivmoddi4+0x1b8>
 8000e7c:	3b02      	subs	r3, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	e732      	b.n	8000ce8 <__udivmoddi4+0x12c>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e709      	b.n	8000c9a <__udivmoddi4+0xde>
 8000e86:	4464      	add	r4, ip
 8000e88:	3802      	subs	r0, #2
 8000e8a:	e742      	b.n	8000d12 <__udivmoddi4+0x156>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <readByte>:
uint8_t disA[20];
uint8_t disB[20];
uint8_t speed[20];
int wheelDist;

void readByte(uint8_t addr, uint8_t* data){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af02      	add	r7, sp, #8
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
	buff[0] = addr;
 8000e9c:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <readByte+0x4c>)
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr<<1, buff, 1, 10);
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <readByte+0x50>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	b299      	uxth	r1, r3
 8000eac:	230a      	movs	r3, #10
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <readByte+0x4c>)
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <readByte+0x54>)
 8000eb6:	f002 ff97 	bl	8003de8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddr<<1, data, 2, 20);
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <readByte+0x50>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	b299      	uxth	r1, r3
 8000ec4:	2314      	movs	r3, #20
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2302      	movs	r3, #2
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <readByte+0x54>)
 8000ece:	f003 f889 	bl	8003fe4 <HAL_I2C_Master_Receive>

}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000274 	.word	0x20000274
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	2000009c 	.word	0x2000009c

08000ee8 <writeByte>:

void writeByte(uint8_t addr, uint8_t data){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71bb      	strb	r3, [r7, #6]
	buff[0] = addr;
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <writeByte+0x3c>)
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	7013      	strb	r3, [r2, #0]
	buff[1] = data;
 8000efe:	4a09      	ldr	r2, [pc, #36]	; (8000f24 <writeByte+0x3c>)
 8000f00:	79bb      	ldrb	r3, [r7, #6]
 8000f02:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, buff, 2, 20);
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <writeByte+0x40>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	b299      	uxth	r1, r3
 8000f0e:	2314      	movs	r3, #20
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2302      	movs	r3, #2
 8000f14:	4a03      	ldr	r2, [pc, #12]	; (8000f24 <writeByte+0x3c>)
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <writeByte+0x44>)
 8000f18:	f002 ff66 	bl	8003de8 <HAL_I2C_Master_Transmit>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000274 	.word	0x20000274
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	2000009c 	.word	0x2000009c

08000f30 <gyroInit>:
	osDelayUntil(10);
	writeByte(0x07, 0x00);
	osDelayUntil(10);

}
void gyroInit(){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0

	writeByte(0x06, 0x00);
 8000f34:	2100      	movs	r1, #0
 8000f36:	2006      	movs	r0, #6
 8000f38:	f7ff ffd6 	bl	8000ee8 <writeByte>
	osDelayUntil(10);
 8000f3c:	200a      	movs	r0, #10
 8000f3e:	f006 fbd4 	bl	80076ea <osDelayUntil>
	writeByte(0x03, 0x80);
 8000f42:	2180      	movs	r1, #128	; 0x80
 8000f44:	2003      	movs	r0, #3
 8000f46:	f7ff ffcf 	bl	8000ee8 <writeByte>
	osDelayUntil(10);
 8000f4a:	200a      	movs	r0, #10
 8000f4c:	f006 fbcd 	bl	80076ea <osDelayUntil>
	writeByte(0x07, 0x07);
 8000f50:	2107      	movs	r1, #7
 8000f52:	2007      	movs	r0, #7
 8000f54:	f7ff ffc8 	bl	8000ee8 <writeByte>
	osDelayUntil(10);
 8000f58:	200a      	movs	r0, #10
 8000f5a:	f006 fbc6 	bl	80076ea <osDelayUntil>
	writeByte(0x06, 0x01);
 8000f5e:	2101      	movs	r1, #1
 8000f60:	2006      	movs	r0, #6
 8000f62:	f7ff ffc1 	bl	8000ee8 <writeByte>
	osDelayUntil(10);
 8000f66:	200a      	movs	r0, #10
 8000f68:	f006 fbbf 	bl	80076ea <osDelayUntil>
	writeByte(0x7F, 0x20);
 8000f6c:	2120      	movs	r1, #32
 8000f6e:	207f      	movs	r0, #127	; 0x7f
 8000f70:	f7ff ffba 	bl	8000ee8 <writeByte>
	osDelayUntil(10);
 8000f74:	200a      	movs	r0, #10
 8000f76:	f006 fbb8 	bl	80076ea <osDelayUntil>
	writeByte(0x01, 0x2F);
 8000f7a:	212f      	movs	r1, #47	; 0x2f
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f7ff ffb3 	bl	8000ee8 <writeByte>
	osDelayUntil(10);
 8000f82:	200a      	movs	r0, #10
 8000f84:	f006 fbb1 	bl	80076ea <osDelayUntil>
	writeByte(0x0, 0x00);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f7ff ffac 	bl	8000ee8 <writeByte>
	osDelayUntil(10);
 8000f90:	200a      	movs	r0, #10
 8000f92:	f006 fbaa 	bl	80076ea <osDelayUntil>
	writeByte(0x7F, 0x00);
 8000f96:	2100      	movs	r1, #0
 8000f98:	207f      	movs	r0, #127	; 0x7f
 8000f9a:	f7ff ffa5 	bl	8000ee8 <writeByte>
	osDelayUntil(10);
 8000f9e:	200a      	movs	r0, #10
 8000fa0:	f006 fba3 	bl	80076ea <osDelayUntil>
	writeByte(0x07, 0x00);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2007      	movs	r0, #7
 8000fa8:	f7ff ff9e 	bl	8000ee8 <writeByte>
	osDelayUntil(10);
 8000fac:	200a      	movs	r0, #10
 8000fae:	f006 fb9c 	bl	80076ea <osDelayUntil>

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbe:	f002 f9ad 	bl	800331c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc2:	f000 f8ab 	bl	800111c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc6:	f000 fb5b 	bl	8001680 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000fca:	f000 fa79 	bl	80014c0 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000fce:	f000 f9cf 	bl	8001370 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000fd2:	f000 f92f 	bl	8001234 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000fd6:	f000 fb29 	bl	800162c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000fda:	f000 fa1d 	bl	8001418 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000fde:	f000 f8fb 	bl	80011d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000fe2:	f009 fa59 	bl	800a498 <OLED_Init>
  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer,sizeof(aRxBuffer));
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	4939      	ldr	r1, [pc, #228]	; (80010d0 <main+0x118>)
 8000fea:	483a      	ldr	r0, [pc, #232]	; (80010d4 <main+0x11c>)
 8000fec:	f005 fab9 	bl	8006562 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ff0:	f006 fa84 	bl	80074fc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ff4:	4a38      	ldr	r2, [pc, #224]	; (80010d8 <main+0x120>)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4838      	ldr	r0, [pc, #224]	; (80010dc <main+0x124>)
 8000ffa:	f006 fac9 	bl	8007590 <osThreadNew>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a37      	ldr	r2, [pc, #220]	; (80010e0 <main+0x128>)
 8001002:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 8001004:	4a37      	ldr	r2, [pc, #220]	; (80010e4 <main+0x12c>)
 8001006:	2100      	movs	r1, #0
 8001008:	4837      	ldr	r0, [pc, #220]	; (80010e8 <main+0x130>)
 800100a:	f006 fac1 	bl	8007590 <osThreadNew>
 800100e:	4603      	mov	r3, r0
 8001010:	4a36      	ldr	r2, [pc, #216]	; (80010ec <main+0x134>)
 8001012:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder_task, NULL, &EncoderTask_attributes);
 8001014:	4a36      	ldr	r2, [pc, #216]	; (80010f0 <main+0x138>)
 8001016:	2100      	movs	r1, #0
 8001018:	4836      	ldr	r0, [pc, #216]	; (80010f4 <main+0x13c>)
 800101a:	f006 fab9 	bl	8007590 <osThreadNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a35      	ldr	r2, [pc, #212]	; (80010f8 <main+0x140>)
 8001022:	6013      	str	r3, [r2, #0]

  /* creation of show_OLED */
  show_OLEDHandle = osThreadNew(show, NULL, &show_OLED_attributes);
 8001024:	4a35      	ldr	r2, [pc, #212]	; (80010fc <main+0x144>)
 8001026:	2100      	movs	r1, #0
 8001028:	4835      	ldr	r0, [pc, #212]	; (8001100 <main+0x148>)
 800102a:	f006 fab1 	bl	8007590 <osThreadNew>
 800102e:	4603      	mov	r3, r0
 8001030:	4a34      	ldr	r2, [pc, #208]	; (8001104 <main+0x14c>)
 8001032:	6013      	str	r3, [r2, #0]

  /* creation of Gyrotask */
  GyrotaskHandle = osThreadNew(GyroTask, NULL, &Gyrotask_attributes);
 8001034:	4a34      	ldr	r2, [pc, #208]	; (8001108 <main+0x150>)
 8001036:	2100      	movs	r1, #0
 8001038:	4834      	ldr	r0, [pc, #208]	; (800110c <main+0x154>)
 800103a:	f006 faa9 	bl	8007590 <osThreadNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a33      	ldr	r2, [pc, #204]	; (8001110 <main+0x158>)
 8001042:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001044:	f006 fa7e 	bl	8007544 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  osDelay(10);
 8001048:	200a      	movs	r0, #10
 800104a:	f006 fb33 	bl	80076b4 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001054:	482f      	ldr	r0, [pc, #188]	; (8001114 <main+0x15c>)
 8001056:	f002 fd4f 	bl	8003af8 <HAL_GPIO_WritePin>
	  osDelay(100);
 800105a:	2064      	movs	r0, #100	; 0x64
 800105c:	f006 fb2a 	bl	80076b4 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001066:	482b      	ldr	r0, [pc, #172]	; (8001114 <main+0x15c>)
 8001068:	f002 fd46 	bl	8003af8 <HAL_GPIO_WritePin>
	  osDelay(0.001);
 800106c:	2000      	movs	r0, #0
 800106e:	f006 fb21 	bl	80076b4 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001078:	4826      	ldr	r0, [pc, #152]	; (8001114 <main+0x15c>)
 800107a:	f002 fd3d 	bl	8003af8 <HAL_GPIO_WritePin>
	 //currtick
	  int start_tick = HAL_GetTick();
 800107e:	f002 f9b3 	bl	80033e8 <HAL_GetTick>
 8001082:	4603      	mov	r3, r0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
	  while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == 0 );
 8001086:	bf00      	nop
 8001088:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800108c:	4821      	ldr	r0, [pc, #132]	; (8001114 <main+0x15c>)
 800108e:	f002 fd1b 	bl	8003ac8 <HAL_GPIO_ReadPin>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f7      	beq.n	8001088 <main+0xd0>
	  int current_tick = HAL_GetTick();
 8001098:	f002 f9a6 	bl	80033e8 <HAL_GetTick>
 800109c:	4603      	mov	r3, r0
 800109e:	623b      	str	r3, [r7, #32]
	  int duration = current_tick - start_tick;
 80010a0:	6a3a      	ldr	r2, [r7, #32]
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	61fb      	str	r3, [r7, #28]
	  int distance = duration *17000;
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f244 2268 	movw	r2, #17000	; 0x4268
 80010ae:	fb02 f303 	mul.w	r3, r2, r3
 80010b2:	61bb      	str	r3, [r7, #24]
	  uint8_t UltraS[20];
	  sprintf(UltraS,"%d",distance);
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4917      	ldr	r1, [pc, #92]	; (8001118 <main+0x160>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f009 fcd8 	bl	800aa70 <siprintf>
	  OLED_ShowString(10, 20, UltraS);
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	461a      	mov	r2, r3
 80010c4:	2114      	movs	r1, #20
 80010c6:	200a      	movs	r0, #10
 80010c8:	f009 f9b4 	bl	800a434 <OLED_ShowString>
  {
 80010cc:	e7bc      	b.n	8001048 <main+0x90>
 80010ce:	bf00      	nop
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000210 	.word	0x20000210
 80010d8:	0800bb90 	.word	0x0800bb90
 80010dc:	0800183d 	.word	0x0800183d
 80010e0:	20000254 	.word	0x20000254
 80010e4:	0800bbb4 	.word	0x0800bbb4
 80010e8:	08001861 	.word	0x08001861
 80010ec:	20000258 	.word	0x20000258
 80010f0:	0800bbd8 	.word	0x0800bbd8
 80010f4:	08001e89 	.word	0x08001e89
 80010f8:	2000025c 	.word	0x2000025c
 80010fc:	0800bbfc 	.word	0x0800bbfc
 8001100:	08002b75 	.word	0x08002b75
 8001104:	20000260 	.word	0x20000260
 8001108:	0800bc20 	.word	0x0800bc20
 800110c:	08002b99 	.word	0x08002b99
 8001110:	20000264 	.word	0x20000264
 8001114:	40020c00 	.word	0x40020c00
 8001118:	0800ba3c 	.word	0x0800ba3c

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b094      	sub	sp, #80	; 0x50
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 0320 	add.w	r3, r7, #32
 8001126:	2230      	movs	r2, #48	; 0x30
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f009 fb71 	bl	800a812 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <SystemClock_Config+0xb4>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <SystemClock_Config+0xb4>)
 800114a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114e:	6413      	str	r3, [r2, #64]	; 0x40
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <SystemClock_Config+0xb4>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <SystemClock_Config+0xb8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <SystemClock_Config+0xb8>)
 8001166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <SystemClock_Config+0xb8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001178:	2302      	movs	r3, #2
 800117a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117c:	2301      	movs	r3, #1
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001180:	2310      	movs	r3, #16
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001184:	2300      	movs	r3, #0
 8001186:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	f107 0320 	add.w	r3, r7, #32
 800118c:	4618      	mov	r0, r3
 800118e:	f003 fca5 	bl	8004adc <HAL_RCC_OscConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001198:	f001 fdb6 	bl	8002d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119c:	230f      	movs	r3, #15
 800119e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f003 ff08 	bl	8004fcc <HAL_RCC_ClockConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80011c2:	f001 fda1 	bl	8002d08 <Error_Handler>
  }
}
 80011c6:	bf00      	nop
 80011c8:	3750      	adds	r7, #80	; 0x50
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40007000 	.word	0x40007000

080011d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <MX_I2C1_Init+0x50>)
 80011de:	4a13      	ldr	r2, [pc, #76]	; (800122c <MX_I2C1_Init+0x54>)
 80011e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_I2C1_Init+0x50>)
 80011e4:	4a12      	ldr	r2, [pc, #72]	; (8001230 <MX_I2C1_Init+0x58>)
 80011e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_I2C1_Init+0x50>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_I2C1_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_I2C1_Init+0x50>)
 80011f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <MX_I2C1_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_I2C1_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <MX_I2C1_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_I2C1_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <MX_I2C1_Init+0x50>)
 8001216:	f002 fca3 	bl	8003b60 <HAL_I2C_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001220:	f001 fd72 	bl	8002d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	2000009c 	.word	0x2000009c
 800122c:	40005400 	.word	0x40005400
 8001230:	000186a0 	.word	0x000186a0

08001234 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b096      	sub	sp, #88	; 0x58
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001248:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]
 8001262:	615a      	str	r2, [r3, #20]
 8001264:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2220      	movs	r2, #32
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f009 fad0 	bl	800a812 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001272:	4b3d      	ldr	r3, [pc, #244]	; (8001368 <MX_TIM1_Init+0x134>)
 8001274:	4a3d      	ldr	r2, [pc, #244]	; (800136c <MX_TIM1_Init+0x138>)
 8001276:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001278:	4b3b      	ldr	r3, [pc, #236]	; (8001368 <MX_TIM1_Init+0x134>)
 800127a:	22a0      	movs	r2, #160	; 0xa0
 800127c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b3a      	ldr	r3, [pc, #232]	; (8001368 <MX_TIM1_Init+0x134>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001284:	4b38      	ldr	r3, [pc, #224]	; (8001368 <MX_TIM1_Init+0x134>)
 8001286:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800128a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128c:	4b36      	ldr	r3, [pc, #216]	; (8001368 <MX_TIM1_Init+0x134>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001292:	4b35      	ldr	r3, [pc, #212]	; (8001368 <MX_TIM1_Init+0x134>)
 8001294:	2200      	movs	r2, #0
 8001296:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001298:	4b33      	ldr	r3, [pc, #204]	; (8001368 <MX_TIM1_Init+0x134>)
 800129a:	2280      	movs	r2, #128	; 0x80
 800129c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800129e:	4832      	ldr	r0, [pc, #200]	; (8001368 <MX_TIM1_Init+0x134>)
 80012a0:	f004 f874 	bl	800538c <HAL_TIM_Base_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012aa:	f001 fd2d 	bl	8002d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012b8:	4619      	mov	r1, r3
 80012ba:	482b      	ldr	r0, [pc, #172]	; (8001368 <MX_TIM1_Init+0x134>)
 80012bc:	f004 fbcc 	bl	8005a58 <HAL_TIM_ConfigClockSource>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012c6:	f001 fd1f 	bl	8002d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012ca:	4827      	ldr	r0, [pc, #156]	; (8001368 <MX_TIM1_Init+0x134>)
 80012cc:	f004 f8ad 	bl	800542a <HAL_TIM_PWM_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012d6:	f001 fd17 	bl	8002d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012e6:	4619      	mov	r1, r3
 80012e8:	481f      	ldr	r0, [pc, #124]	; (8001368 <MX_TIM1_Init+0x134>)
 80012ea:	f004 ff8d 	bl	8006208 <HAL_TIMEx_MasterConfigSynchronization>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012f4:	f001 fd08 	bl	8002d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f8:	2360      	movs	r3, #96	; 0x60
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001314:	220c      	movs	r2, #12
 8001316:	4619      	mov	r1, r3
 8001318:	4813      	ldr	r0, [pc, #76]	; (8001368 <MX_TIM1_Init+0x134>)
 800131a:	f004 fadb 	bl	80058d4 <HAL_TIM_PWM_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001324:	f001 fcf0 	bl	8002d08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800133c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001340:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	4619      	mov	r1, r3
 800134a:	4807      	ldr	r0, [pc, #28]	; (8001368 <MX_TIM1_Init+0x134>)
 800134c:	f004 ffd8 	bl	8006300 <HAL_TIMEx_ConfigBreakDeadTime>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001356:	f001 fcd7 	bl	8002d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800135a:	4803      	ldr	r0, [pc, #12]	; (8001368 <MX_TIM1_Init+0x134>)
 800135c:	f001 fe46 	bl	8002fec <HAL_TIM_MspPostInit>

}
 8001360:	bf00      	nop
 8001362:	3758      	adds	r7, #88	; 0x58
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200000f0 	.word	0x200000f0
 800136c:	40010000 	.word	0x40010000

08001370 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08c      	sub	sp, #48	; 0x30
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	2224      	movs	r2, #36	; 0x24
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f009 fa47 	bl	800a812 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800138c:	4b21      	ldr	r3, [pc, #132]	; (8001414 <MX_TIM2_Init+0xa4>)
 800138e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001392:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001394:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <MX_TIM2_Init+0xa4>)
 8001396:	2200      	movs	r2, #0
 8001398:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <MX_TIM2_Init+0xa4>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <MX_TIM2_Init+0xa4>)
 80013a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_TIM2_Init+0xa4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <MX_TIM2_Init+0xa4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013b4:	2303      	movs	r3, #3
 80013b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013bc:	2301      	movs	r3, #1
 80013be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80013c4:	230a      	movs	r3, #10
 80013c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013cc:	2301      	movs	r3, #1
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	4619      	mov	r1, r3
 80013de:	480d      	ldr	r0, [pc, #52]	; (8001414 <MX_TIM2_Init+0xa4>)
 80013e0:	f004 f944 	bl	800566c <HAL_TIM_Encoder_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013ea:	f001 fc8d 	bl	8002d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	4619      	mov	r1, r3
 80013fa:	4806      	ldr	r0, [pc, #24]	; (8001414 <MX_TIM2_Init+0xa4>)
 80013fc:	f004 ff04 	bl	8006208 <HAL_TIMEx_MasterConfigSynchronization>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001406:	f001 fc7f 	bl	8002d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	3730      	adds	r7, #48	; 0x30
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000138 	.word	0x20000138

08001418 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08c      	sub	sp, #48	; 0x30
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	2224      	movs	r2, #36	; 0x24
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f009 f9f3 	bl	800a812 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001434:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <MX_TIM3_Init+0xa0>)
 8001436:	4a21      	ldr	r2, [pc, #132]	; (80014bc <MX_TIM3_Init+0xa4>)
 8001438:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800143a:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <MX_TIM3_Init+0xa0>)
 800143c:	2200      	movs	r2, #0
 800143e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001440:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <MX_TIM3_Init+0xa0>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001446:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <MX_TIM3_Init+0xa0>)
 8001448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800144c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <MX_TIM3_Init+0xa0>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <MX_TIM3_Init+0xa0>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800145a:	2303      	movs	r3, #3
 800145c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001462:	2301      	movs	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800146a:	230a      	movs	r3, #10
 800146c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001472:	2301      	movs	r3, #1
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	4619      	mov	r1, r3
 8001484:	480c      	ldr	r0, [pc, #48]	; (80014b8 <MX_TIM3_Init+0xa0>)
 8001486:	f004 f8f1 	bl	800566c <HAL_TIM_Encoder_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001490:	f001 fc3a 	bl	8002d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	4619      	mov	r1, r3
 80014a0:	4805      	ldr	r0, [pc, #20]	; (80014b8 <MX_TIM3_Init+0xa0>)
 80014a2:	f004 feb1 	bl	8006208 <HAL_TIMEx_MasterConfigSynchronization>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80014ac:	f001 fc2c 	bl	8002d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	3730      	adds	r7, #48	; 0x30
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000180 	.word	0x20000180
 80014bc:	40000400 	.word	0x40000400

080014c0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b096      	sub	sp, #88	; 0x58
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]
 80014ee:	615a      	str	r2, [r3, #20]
 80014f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2220      	movs	r2, #32
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f009 f98a 	bl	800a812 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014fe:	4b49      	ldr	r3, [pc, #292]	; (8001624 <MX_TIM8_Init+0x164>)
 8001500:	4a49      	ldr	r2, [pc, #292]	; (8001628 <MX_TIM8_Init+0x168>)
 8001502:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001504:	4b47      	ldr	r3, [pc, #284]	; (8001624 <MX_TIM8_Init+0x164>)
 8001506:	2200      	movs	r2, #0
 8001508:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150a:	4b46      	ldr	r3, [pc, #280]	; (8001624 <MX_TIM8_Init+0x164>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001510:	4b44      	ldr	r3, [pc, #272]	; (8001624 <MX_TIM8_Init+0x164>)
 8001512:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001516:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001518:	4b42      	ldr	r3, [pc, #264]	; (8001624 <MX_TIM8_Init+0x164>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800151e:	4b41      	ldr	r3, [pc, #260]	; (8001624 <MX_TIM8_Init+0x164>)
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001524:	4b3f      	ldr	r3, [pc, #252]	; (8001624 <MX_TIM8_Init+0x164>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800152a:	483e      	ldr	r0, [pc, #248]	; (8001624 <MX_TIM8_Init+0x164>)
 800152c:	f003 ff2e 	bl	800538c <HAL_TIM_Base_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001536:	f001 fbe7 	bl	8002d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800153a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001540:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001544:	4619      	mov	r1, r3
 8001546:	4837      	ldr	r0, [pc, #220]	; (8001624 <MX_TIM8_Init+0x164>)
 8001548:	f004 fa86 	bl	8005a58 <HAL_TIM_ConfigClockSource>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001552:	f001 fbd9 	bl	8002d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001556:	4833      	ldr	r0, [pc, #204]	; (8001624 <MX_TIM8_Init+0x164>)
 8001558:	f003 ff67 	bl	800542a <HAL_TIM_PWM_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001562:	f001 fbd1 	bl	8002d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800156e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001572:	4619      	mov	r1, r3
 8001574:	482b      	ldr	r0, [pc, #172]	; (8001624 <MX_TIM8_Init+0x164>)
 8001576:	f004 fe47 	bl	8006208 <HAL_TIMEx_MasterConfigSynchronization>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001580:	f001 fbc2 	bl	8002d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001584:	2360      	movs	r3, #96	; 0x60
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001590:	2300      	movs	r3, #0
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a4:	2200      	movs	r2, #0
 80015a6:	4619      	mov	r1, r3
 80015a8:	481e      	ldr	r0, [pc, #120]	; (8001624 <MX_TIM8_Init+0x164>)
 80015aa:	f004 f993 	bl	80058d4 <HAL_TIM_PWM_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80015b4:	f001 fba8 	bl	8002d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015bc:	2204      	movs	r2, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	4818      	ldr	r0, [pc, #96]	; (8001624 <MX_TIM8_Init+0x164>)
 80015c2:	f004 f987 	bl	80058d4 <HAL_TIM_PWM_ConfigChannel>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80015cc:	f001 fb9c 	bl	8002d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d4:	2208      	movs	r2, #8
 80015d6:	4619      	mov	r1, r3
 80015d8:	4812      	ldr	r0, [pc, #72]	; (8001624 <MX_TIM8_Init+0x164>)
 80015da:	f004 f97b 	bl	80058d4 <HAL_TIM_PWM_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80015e4:	f001 fb90 	bl	8002d08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001600:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	4619      	mov	r1, r3
 800160a:	4806      	ldr	r0, [pc, #24]	; (8001624 <MX_TIM8_Init+0x164>)
 800160c:	f004 fe78 	bl	8006300 <HAL_TIMEx_ConfigBreakDeadTime>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 8001616:	f001 fb77 	bl	8002d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	3758      	adds	r7, #88	; 0x58
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200001c8 	.word	0x200001c8
 8001628:	40010400 	.word	0x40010400

0800162c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_USART3_UART_Init+0x4c>)
 8001632:	4a12      	ldr	r2, [pc, #72]	; (800167c <MX_USART3_UART_Init+0x50>)
 8001634:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <MX_USART3_UART_Init+0x4c>)
 8001638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800163c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <MX_USART3_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <MX_USART3_UART_Init+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <MX_USART3_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_USART3_UART_Init+0x4c>)
 8001652:	220c      	movs	r2, #12
 8001654:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <MX_USART3_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <MX_USART3_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_USART3_UART_Init+0x4c>)
 8001664:	f004 fe9e 	bl	80063a4 <HAL_UART_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800166e:	f001 fb4b 	bl	8002d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000210 	.word	0x20000210
 800167c:	40004800 	.word	0x40004800

08001680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	4b5a      	ldr	r3, [pc, #360]	; (8001804 <MX_GPIO_Init+0x184>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a59      	ldr	r2, [pc, #356]	; (8001804 <MX_GPIO_Init+0x184>)
 80016a0:	f043 0310 	orr.w	r3, r3, #16
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b57      	ldr	r3, [pc, #348]	; (8001804 <MX_GPIO_Init+0x184>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b53      	ldr	r3, [pc, #332]	; (8001804 <MX_GPIO_Init+0x184>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a52      	ldr	r2, [pc, #328]	; (8001804 <MX_GPIO_Init+0x184>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b50      	ldr	r3, [pc, #320]	; (8001804 <MX_GPIO_Init+0x184>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	4b4c      	ldr	r3, [pc, #304]	; (8001804 <MX_GPIO_Init+0x184>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a4b      	ldr	r2, [pc, #300]	; (8001804 <MX_GPIO_Init+0x184>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b49      	ldr	r3, [pc, #292]	; (8001804 <MX_GPIO_Init+0x184>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	4b45      	ldr	r3, [pc, #276]	; (8001804 <MX_GPIO_Init+0x184>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a44      	ldr	r2, [pc, #272]	; (8001804 <MX_GPIO_Init+0x184>)
 80016f4:	f043 0308 	orr.w	r3, r3, #8
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b42      	ldr	r3, [pc, #264]	; (8001804 <MX_GPIO_Init+0x184>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	4b3e      	ldr	r3, [pc, #248]	; (8001804 <MX_GPIO_Init+0x184>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a3d      	ldr	r2, [pc, #244]	; (8001804 <MX_GPIO_Init+0x184>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <MX_GPIO_Init+0x184>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|LED_DC_Pin
 8001722:	2200      	movs	r2, #0
 8001724:	f241 51e2 	movw	r1, #5602	; 0x15e2
 8001728:	4837      	ldr	r0, [pc, #220]	; (8001808 <MX_GPIO_Init+0x188>)
 800172a:	f002 f9e5 	bl	8003af8 <HAL_GPIO_WritePin>
                          |LED3_Pin|CIN1_Pin|Gyro_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	213c      	movs	r1, #60	; 0x3c
 8001732:	4836      	ldr	r0, [pc, #216]	; (800180c <MX_GPIO_Init+0x18c>)
 8001734:	f002 f9e0 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CIN2_GPIO_Port, CIN2_Pin, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	2120      	movs	r1, #32
 800173c:	4834      	ldr	r0, [pc, #208]	; (8001810 <MX_GPIO_Init+0x190>)
 800173e:	f002 f9db 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001748:	4832      	ldr	r0, [pc, #200]	; (8001814 <MX_GPIO_Init+0x194>)
 800174a:	f002 f9d5 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin LED_DC_Pin
                           LED3_Pin Gyro_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|LED_DC_Pin
 800174e:	f240 53e2 	movw	r3, #1506	; 0x5e2
 8001752:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|Gyro_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001754:	2301      	movs	r3, #1
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4619      	mov	r1, r3
 8001766:	4828      	ldr	r0, [pc, #160]	; (8001808 <MX_GPIO_Init+0x188>)
 8001768:	f002 f812 	bl	8003790 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 800176c:	233c      	movs	r3, #60	; 0x3c
 800176e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001778:	2302      	movs	r3, #2
 800177a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	4822      	ldr	r0, [pc, #136]	; (800180c <MX_GPIO_Init+0x18c>)
 8001784:	f002 f804 	bl	8003790 <HAL_GPIO_Init>

  /*Configure GPIO pin : CIN2_Pin */
  GPIO_InitStruct.Pin = CIN2_Pin;
 8001788:	2320      	movs	r3, #32
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001794:	2302      	movs	r3, #2
 8001796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CIN2_GPIO_Port, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	481c      	ldr	r0, [pc, #112]	; (8001810 <MX_GPIO_Init+0x190>)
 80017a0:	f001 fff6 	bl	8003790 <HAL_GPIO_Init>

  /*Configure GPIO pin : CIN1_Pin */
  GPIO_InitStruct.Pin = CIN1_Pin;
 80017a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017aa:	2301      	movs	r3, #1
 80017ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b2:	2302      	movs	r3, #2
 80017b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CIN1_GPIO_Port, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	4812      	ldr	r0, [pc, #72]	; (8001808 <MX_GPIO_Init+0x188>)
 80017be:	f001 ffe7 	bl	8003790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	480e      	ldr	r0, [pc, #56]	; (8001814 <MX_GPIO_Init+0x194>)
 80017dc:	f001 ffd8 	bl	8003790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	4807      	ldr	r0, [pc, #28]	; (8001814 <MX_GPIO_Init+0x194>)
 80017f6:	f001 ffcb 	bl	8003790 <HAL_GPIO_Init>

}
 80017fa:	bf00      	nop
 80017fc:	3728      	adds	r7, #40	; 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	40021000 	.word	0x40021000
 800180c:	40020000 	.word	0x40020000
 8001810:	40020800 	.word	0x40020800
 8001814:	40020c00 	.word	0x40020c00

08001818 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */
char direction;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	//HAL_UART_Transmit(&huart3,(uint8_t *) aTxBuffer,5,0xFFFFF);



	HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer,sizeof(aRxBuffer));
 8001820:	2204      	movs	r2, #4
 8001822:	4904      	ldr	r1, [pc, #16]	; (8001834 <HAL_UART_RxCpltCallback+0x1c>)
 8001824:	4804      	ldr	r0, [pc, #16]	; (8001838 <HAL_UART_RxCpltCallback+0x20>)
 8001826:	f004 fe9c 	bl	8006562 <HAL_UART_Receive_IT>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000000 	.word	0x20000000
 8001838:	20000210 	.word	0x20000210

0800183c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
//	if(ch < 'Z'){
//		ch++;
//	}else{
//		ch = 'A';
//	}
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001844:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001848:	4803      	ldr	r0, [pc, #12]	; (8001858 <StartDefaultTask+0x1c>)
 800184a:	f002 f96e 	bl	8003b2a <HAL_GPIO_TogglePin>

	osDelay(1000);
 800184e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001852:	f005 ff2f 	bl	80076b4 <osDelay>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001856:	e7f5      	b.n	8001844 <StartDefaultTask+0x8>
 8001858:	40021000 	.word	0x40021000
 800185c:	00000000 	.word	0x00000000

08001860 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	uint16_t pwnVal = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	82fb      	strh	r3, [r7, #22]
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 800186c:	2100      	movs	r1, #0
 800186e:	48b8      	ldr	r0, [pc, #736]	; (8001b50 <motor+0x2f0>)
 8001870:	f003 fe34 	bl	80054dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8001874:	2104      	movs	r1, #4
 8001876:	48b6      	ldr	r0, [pc, #728]	; (8001b50 <motor+0x2f0>)
 8001878:	f003 fe30 	bl	80054dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800187c:	210c      	movs	r1, #12
 800187e:	48b5      	ldr	r0, [pc, #724]	; (8001b54 <motor+0x2f4>)
 8001880:	f003 fe2c 	bl	80054dc <HAL_TIM_PWM_Start>

	/* Infinite loop */
  for(;;)
  {
	  //emcpy(temp,aRxBuffer[0],sizeof(aRxBuffer[0]));
	  direction = aRxBuffer[0];
 8001884:	4bb4      	ldr	r3, [pc, #720]	; (8001b58 <motor+0x2f8>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	757b      	strb	r3, [r7, #21]
//	  if(strcmp(aRxBuffer,"    ") == 0){
//		  osDelay(5000);
//		  stop();
//	  }

	  if (strncmp(aRxBuffer, "R",1) == 0){
 800188a:	2201      	movs	r2, #1
 800188c:	49b3      	ldr	r1, [pc, #716]	; (8001b5c <motor+0x2fc>)
 800188e:	48b2      	ldr	r0, [pc, #712]	; (8001b58 <motor+0x2f8>)
 8001890:	f009 f951 	bl	800ab36 <strncmp>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d145      	bne.n	8001926 <motor+0xc6>

		  //HAL_UART_Transmit(&huart3,opop,sizeof(opop),0xFF);
		  OLED_ShowString(10,50,"R\0");
 800189a:	4ab1      	ldr	r2, [pc, #708]	; (8001b60 <motor+0x300>)
 800189c:	2132      	movs	r1, #50	; 0x32
 800189e:	200a      	movs	r0, #10
 80018a0:	f008 fdc8 	bl	800a434 <OLED_ShowString>
		  magnitude = (int)(aRxBuffer[1] - '0')*100 + (int)(aRxBuffer[2] - '0')*10 + (int)(aRxBuffer[3] - '0');
 80018a4:	4bac      	ldr	r3, [pc, #688]	; (8001b58 <motor+0x2f8>)
 80018a6:	785b      	ldrb	r3, [r3, #1]
 80018a8:	3b30      	subs	r3, #48	; 0x30
 80018aa:	2264      	movs	r2, #100	; 0x64
 80018ac:	fb02 f103 	mul.w	r1, r2, r3
 80018b0:	4ba9      	ldr	r3, [pc, #676]	; (8001b58 <motor+0x2f8>)
 80018b2:	789b      	ldrb	r3, [r3, #2]
 80018b4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	18ca      	adds	r2, r1, r3
 80018c2:	4ba5      	ldr	r3, [pc, #660]	; (8001b58 <motor+0x2f8>)
 80018c4:	78db      	ldrb	r3, [r3, #3]
 80018c6:	3b30      	subs	r3, #48	; 0x30
 80018c8:	4413      	add	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
		  sprintf(opop,"%d\0", magnitude);
 80018cc:	f107 0308 	add.w	r3, r7, #8
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	49a4      	ldr	r1, [pc, #656]	; (8001b64 <motor+0x304>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f009 f8cb 	bl	800aa70 <siprintf>
		  OLED_ShowString(10,50,opop);
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	461a      	mov	r2, r3
 80018e0:	2132      	movs	r1, #50	; 0x32
 80018e2:	200a      	movs	r0, #10
 80018e4:	f008 fda6 	bl	800a434 <OLED_ShowString>
		  Right(magnitude*-1,defaultPower);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	425b      	negs	r3, r3
 80018ec:	4a9e      	ldr	r2, [pc, #632]	; (8001b68 <motor+0x308>)
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 f82e 	bl	8002954 <Right>
		  osDelay(500);
 80018f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018fc:	f005 feda 	bl	80076b4 <osDelay>
		  reverse1(70.00,defaultPower);
 8001900:	4b99      	ldr	r3, [pc, #612]	; (8001b68 <motor+0x308>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	ed9f 0b88 	vldr	d0, [pc, #544]	; 8001b28 <motor+0x2c8>
 800190a:	f000 fe1d 	bl	8002548 <reverse1>
		  osDelay(10);
 800190e:	200a      	movs	r0, #10
 8001910:	f005 fed0 	bl	80076b4 <osDelay>
		  magnitude = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
		  HAL_UART_Transmit(&huart3,"S11",3,0xFF);
 8001918:	23ff      	movs	r3, #255	; 0xff
 800191a:	2203      	movs	r2, #3
 800191c:	4993      	ldr	r1, [pc, #588]	; (8001b6c <motor+0x30c>)
 800191e:	4894      	ldr	r0, [pc, #592]	; (8001b70 <motor+0x310>)
 8001920:	f004 fd8d 	bl	800643e <HAL_UART_Transmit>
 8001924:	e274      	b.n	8001e10 <motor+0x5b0>
	  }
	  else if (strncmp(aRxBuffer, "E",1) == 0){
 8001926:	2201      	movs	r2, #1
 8001928:	4992      	ldr	r1, [pc, #584]	; (8001b74 <motor+0x314>)
 800192a:	488b      	ldr	r0, [pc, #556]	; (8001b58 <motor+0x2f8>)
 800192c:	f009 f903 	bl	800ab36 <strncmp>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d151      	bne.n	80019da <motor+0x17a>

	 		  //HAL_UART_Transmit(&huart3,opop,sizeof(opop),0xFF);
	 		  OLED_ShowString(10,50,"R\0");
 8001936:	4a8a      	ldr	r2, [pc, #552]	; (8001b60 <motor+0x300>)
 8001938:	2132      	movs	r1, #50	; 0x32
 800193a:	200a      	movs	r0, #10
 800193c:	f008 fd7a 	bl	800a434 <OLED_ShowString>
	 		  magnitude = (int)(aRxBuffer[1] - '0')*100 + (int)(aRxBuffer[2] - '0')*10 + (int)(aRxBuffer[3] - '0');
 8001940:	4b85      	ldr	r3, [pc, #532]	; (8001b58 <motor+0x2f8>)
 8001942:	785b      	ldrb	r3, [r3, #1]
 8001944:	3b30      	subs	r3, #48	; 0x30
 8001946:	2264      	movs	r2, #100	; 0x64
 8001948:	fb02 f103 	mul.w	r1, r2, r3
 800194c:	4b82      	ldr	r3, [pc, #520]	; (8001b58 <motor+0x2f8>)
 800194e:	789b      	ldrb	r3, [r3, #2]
 8001950:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	18ca      	adds	r2, r1, r3
 800195e:	4b7e      	ldr	r3, [pc, #504]	; (8001b58 <motor+0x2f8>)
 8001960:	78db      	ldrb	r3, [r3, #3]
 8001962:	3b30      	subs	r3, #48	; 0x30
 8001964:	4413      	add	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
	 		  sprintf(opop,"%d\0", magnitude);
 8001968:	f107 0308 	add.w	r3, r7, #8
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	497d      	ldr	r1, [pc, #500]	; (8001b64 <motor+0x304>)
 8001970:	4618      	mov	r0, r3
 8001972:	f009 f87d 	bl	800aa70 <siprintf>
	 		  OLED_ShowString(10,50,opop);
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	461a      	mov	r2, r3
 800197c:	2132      	movs	r1, #50	; 0x32
 800197e:	200a      	movs	r0, #10
 8001980:	f008 fd58 	bl	800a434 <OLED_ShowString>
	 		 osDelay(10);
 8001984:	200a      	movs	r0, #10
 8001986:	f005 fe95 	bl	80076b4 <osDelay>
	 		 forward1(80.00,defaultPower);
 800198a:	4b77      	ldr	r3, [pc, #476]	; (8001b68 <motor+0x308>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	ed9f 0b67 	vldr	d0, [pc, #412]	; 8001b30 <motor+0x2d0>
 8001994:	f000 fbe4 	bl	8002160 <forward1>
	 		 osDelay(500);
 8001998:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800199c:	f005 fe8a 	bl	80076b4 <osDelay>
	 		  back_Right(magnitude,defaultPower);
 80019a0:	4b71      	ldr	r3, [pc, #452]	; (8001b68 <motor+0x308>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	6938      	ldr	r0, [r7, #16]
 80019a8:	f001 f84e 	bl	8002a48 <back_Right>

	 		  osDelay(500);
 80019ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019b0:	f005 fe80 	bl	80076b4 <osDelay>
	 		  reverse1(20.00,defaultPower);
 80019b4:	4b6c      	ldr	r3, [pc, #432]	; (8001b68 <motor+0x308>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8001b38 <motor+0x2d8>
 80019be:	f000 fdc3 	bl	8002548 <reverse1>
	 		  osDelay(10);
 80019c2:	200a      	movs	r0, #10
 80019c4:	f005 fe76 	bl	80076b4 <osDelay>
	 		  magnitude = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
	 		  HAL_UART_Transmit(&huart3,"S11",3,0xFF);
 80019cc:	23ff      	movs	r3, #255	; 0xff
 80019ce:	2203      	movs	r2, #3
 80019d0:	4966      	ldr	r1, [pc, #408]	; (8001b6c <motor+0x30c>)
 80019d2:	4867      	ldr	r0, [pc, #412]	; (8001b70 <motor+0x310>)
 80019d4:	f004 fd33 	bl	800643e <HAL_UART_Transmit>
 80019d8:	e21a      	b.n	8001e10 <motor+0x5b0>
	 	  }else if (strncmp(aRxBuffer, "L",1) == 0){
 80019da:	2201      	movs	r2, #1
 80019dc:	4966      	ldr	r1, [pc, #408]	; (8001b78 <motor+0x318>)
 80019de:	485e      	ldr	r0, [pc, #376]	; (8001b58 <motor+0x2f8>)
 80019e0:	f009 f8a9 	bl	800ab36 <strncmp>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d143      	bne.n	8001a72 <motor+0x212>
		  OLED_ShowString(10,50,"L\0");
 80019ea:	4a64      	ldr	r2, [pc, #400]	; (8001b7c <motor+0x31c>)
 80019ec:	2132      	movs	r1, #50	; 0x32
 80019ee:	200a      	movs	r0, #10
 80019f0:	f008 fd20 	bl	800a434 <OLED_ShowString>
		  magnitude = (int)(aRxBuffer[1] - '0')*100 + (int)(aRxBuffer[2] - '0')*10 + (int)(aRxBuffer[3] - '0');
 80019f4:	4b58      	ldr	r3, [pc, #352]	; (8001b58 <motor+0x2f8>)
 80019f6:	785b      	ldrb	r3, [r3, #1]
 80019f8:	3b30      	subs	r3, #48	; 0x30
 80019fa:	2264      	movs	r2, #100	; 0x64
 80019fc:	fb02 f103 	mul.w	r1, r2, r3
 8001a00:	4b55      	ldr	r3, [pc, #340]	; (8001b58 <motor+0x2f8>)
 8001a02:	789b      	ldrb	r3, [r3, #2]
 8001a04:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	18ca      	adds	r2, r1, r3
 8001a12:	4b51      	ldr	r3, [pc, #324]	; (8001b58 <motor+0x2f8>)
 8001a14:	78db      	ldrb	r3, [r3, #3]
 8001a16:	3b30      	subs	r3, #48	; 0x30
 8001a18:	4413      	add	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
		  sprintf(opop,"%d\0", magnitude);
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4950      	ldr	r1, [pc, #320]	; (8001b64 <motor+0x304>)
 8001a24:	4618      	mov	r0, r3
 8001a26:	f009 f823 	bl	800aa70 <siprintf>
		  OLED_ShowString(10,50,opop);
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	461a      	mov	r2, r3
 8001a30:	2132      	movs	r1, #50	; 0x32
 8001a32:	200a      	movs	r0, #10
 8001a34:	f008 fcfe 	bl	800a434 <OLED_ShowString>
		  Left(magnitude,defaultPower);
 8001a38:	4b4b      	ldr	r3, [pc, #300]	; (8001b68 <motor+0x308>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	6938      	ldr	r0, [r7, #16]
 8001a40:	f000 fe78 	bl	8002734 <Left>
 		  osDelay(500);
 8001a44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a48:	f005 fe34 	bl	80076b4 <osDelay>
 		  reverse1(35.00,defaultPower);
 8001a4c:	4b46      	ldr	r3, [pc, #280]	; (8001b68 <motor+0x308>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8001b40 <motor+0x2e0>
 8001a56:	f000 fd77 	bl	8002548 <reverse1>
 		  osDelay(10);
 8001a5a:	200a      	movs	r0, #10
 8001a5c:	f005 fe2a 	bl	80076b4 <osDelay>
		  magnitude = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	613b      	str	r3, [r7, #16]
		  HAL_UART_Transmit(&huart3,"S11",3,0xFF);
 8001a64:	23ff      	movs	r3, #255	; 0xff
 8001a66:	2203      	movs	r2, #3
 8001a68:	4940      	ldr	r1, [pc, #256]	; (8001b6c <motor+0x30c>)
 8001a6a:	4841      	ldr	r0, [pc, #260]	; (8001b70 <motor+0x310>)
 8001a6c:	f004 fce7 	bl	800643e <HAL_UART_Transmit>
 8001a70:	e1ce      	b.n	8001e10 <motor+0x5b0>
	  }else if (strncmp(aRxBuffer, "K",1) == 0){
 8001a72:	2201      	movs	r2, #1
 8001a74:	4942      	ldr	r1, [pc, #264]	; (8001b80 <motor+0x320>)
 8001a76:	4838      	ldr	r0, [pc, #224]	; (8001b58 <motor+0x2f8>)
 8001a78:	f009 f85d 	bl	800ab36 <strncmp>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f040 8080 	bne.w	8001b84 <motor+0x324>
		  OLED_ShowString(10,50,"L\0");
 8001a84:	4a3d      	ldr	r2, [pc, #244]	; (8001b7c <motor+0x31c>)
 8001a86:	2132      	movs	r1, #50	; 0x32
 8001a88:	200a      	movs	r0, #10
 8001a8a:	f008 fcd3 	bl	800a434 <OLED_ShowString>
		  magnitude = (int)(aRxBuffer[1] - '0')*100 + (int)(aRxBuffer[2] - '0')*10 + (int)(aRxBuffer[3] - '0');
 8001a8e:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <motor+0x2f8>)
 8001a90:	785b      	ldrb	r3, [r3, #1]
 8001a92:	3b30      	subs	r3, #48	; 0x30
 8001a94:	2264      	movs	r2, #100	; 0x64
 8001a96:	fb02 f103 	mul.w	r1, r2, r3
 8001a9a:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <motor+0x2f8>)
 8001a9c:	789b      	ldrb	r3, [r3, #2]
 8001a9e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	18ca      	adds	r2, r1, r3
 8001aac:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <motor+0x2f8>)
 8001aae:	78db      	ldrb	r3, [r3, #3]
 8001ab0:	3b30      	subs	r3, #48	; 0x30
 8001ab2:	4413      	add	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
		  sprintf(opop,"%d\0", magnitude);
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4929      	ldr	r1, [pc, #164]	; (8001b64 <motor+0x304>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f008 ffd6 	bl	800aa70 <siprintf>
		  OLED_ShowString(10,50,opop);
 8001ac4:	f107 0308 	add.w	r3, r7, #8
 8001ac8:	461a      	mov	r2, r3
 8001aca:	2132      	movs	r1, #50	; 0x32
 8001acc:	200a      	movs	r0, #10
 8001ace:	f008 fcb1 	bl	800a434 <OLED_ShowString>
		  osDelay(500);
 8001ad2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ad6:	f005 fded 	bl	80076b4 <osDelay>
		  forward1(20.00,defaultPower);
 8001ada:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <motor+0x308>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8001b38 <motor+0x2d8>
 8001ae4:	f000 fb3c 	bl	8002160 <forward1>
		  osDelay(500);
 8001ae8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001aec:	f005 fde2 	bl	80076b4 <osDelay>
		  back_Left(magnitude*-1,defaultPower);
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	425b      	negs	r3, r3
 8001af4:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <motor+0x308>)
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 fe94 	bl	8002828 <back_Left>
		  osDelay(500);
 8001b00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b04:	f005 fdd6 	bl	80076b4 <osDelay>
		  reverse1(30.00,defaultPower);
 8001b08:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <motor+0x308>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8001b48 <motor+0x2e8>
 8001b12:	f000 fd19 	bl	8002548 <reverse1>
		  magnitude = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
		  HAL_UART_Transmit(&huart3,"S11",3,0xFF);
 8001b1a:	23ff      	movs	r3, #255	; 0xff
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	4913      	ldr	r1, [pc, #76]	; (8001b6c <motor+0x30c>)
 8001b20:	4813      	ldr	r0, [pc, #76]	; (8001b70 <motor+0x310>)
 8001b22:	f004 fc8c 	bl	800643e <HAL_UART_Transmit>
 8001b26:	e173      	b.n	8001e10 <motor+0x5b0>
 8001b28:	00000000 	.word	0x00000000
 8001b2c:	40518000 	.word	0x40518000
 8001b30:	00000000 	.word	0x00000000
 8001b34:	40540000 	.word	0x40540000
 8001b38:	00000000 	.word	0x00000000
 8001b3c:	40340000 	.word	0x40340000
 8001b40:	00000000 	.word	0x00000000
 8001b44:	40418000 	.word	0x40418000
 8001b48:	00000000 	.word	0x00000000
 8001b4c:	403e0000 	.word	0x403e0000
 8001b50:	200001c8 	.word	0x200001c8
 8001b54:	200000f0 	.word	0x200000f0
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	0800ba40 	.word	0x0800ba40
 8001b60:	0800ba44 	.word	0x0800ba44
 8001b64:	0800ba48 	.word	0x0800ba48
 8001b68:	20000004 	.word	0x20000004
 8001b6c:	0800ba4c 	.word	0x0800ba4c
 8001b70:	20000210 	.word	0x20000210
 8001b74:	0800ba50 	.word	0x0800ba50
 8001b78:	0800ba54 	.word	0x0800ba54
 8001b7c:	0800ba58 	.word	0x0800ba58
 8001b80:	0800ba5c 	.word	0x0800ba5c
	  }else if(strncmp(aRxBuffer,"F",1)== 0){ //Forward
 8001b84:	2201      	movs	r2, #1
 8001b86:	49ad      	ldr	r1, [pc, #692]	; (8001e3c <motor+0x5dc>)
 8001b88:	48ad      	ldr	r0, [pc, #692]	; (8001e40 <motor+0x5e0>)
 8001b8a:	f008 ffd4 	bl	800ab36 <strncmp>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d150      	bne.n	8001c36 <motor+0x3d6>
		  magnitude = (double) 10.00*((double)(aRxBuffer[1] - '0')*100.00 + (double)(aRxBuffer[2] - '0')*10.00 + (double)(aRxBuffer[3] - '0')*1.00);
 8001b94:	4baa      	ldr	r3, [pc, #680]	; (8001e40 <motor+0x5e0>)
 8001b96:	785b      	ldrb	r3, [r3, #1]
 8001b98:	3b30      	subs	r3, #48	; 0x30
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fcca 	bl	8000534 <__aeabi_i2d>
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	4ba7      	ldr	r3, [pc, #668]	; (8001e44 <motor+0x5e4>)
 8001ba6:	f7fe fd2f 	bl	8000608 <__aeabi_dmul>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4614      	mov	r4, r2
 8001bb0:	461d      	mov	r5, r3
 8001bb2:	4ba3      	ldr	r3, [pc, #652]	; (8001e40 <motor+0x5e0>)
 8001bb4:	789b      	ldrb	r3, [r3, #2]
 8001bb6:	3b30      	subs	r3, #48	; 0x30
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fcbb 	bl	8000534 <__aeabi_i2d>
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	4ba1      	ldr	r3, [pc, #644]	; (8001e48 <motor+0x5e8>)
 8001bc4:	f7fe fd20 	bl	8000608 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4620      	mov	r0, r4
 8001bce:	4629      	mov	r1, r5
 8001bd0:	f7fe fb64 	bl	800029c <__adddf3>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4614      	mov	r4, r2
 8001bda:	461d      	mov	r5, r3
 8001bdc:	4b98      	ldr	r3, [pc, #608]	; (8001e40 <motor+0x5e0>)
 8001bde:	78db      	ldrb	r3, [r3, #3]
 8001be0:	3b30      	subs	r3, #48	; 0x30
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fca6 	bl	8000534 <__aeabi_i2d>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4620      	mov	r0, r4
 8001bee:	4629      	mov	r1, r5
 8001bf0:	f7fe fb54 	bl	800029c <__adddf3>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	4b91      	ldr	r3, [pc, #580]	; (8001e48 <motor+0x5e8>)
 8001c02:	f7fe fd01 	bl	8000608 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7fe ff95 	bl	8000b3c <__aeabi_d2iz>
 8001c12:	4603      	mov	r3, r0
 8001c14:	613b      	str	r3, [r7, #16]
		  //reverse(300,defaultPower);
		  forward((double)magnitude,defaultPower);
 8001c16:	6938      	ldr	r0, [r7, #16]
 8001c18:	f7fe fc8c 	bl	8000534 <__aeabi_i2d>
 8001c1c:	4604      	mov	r4, r0
 8001c1e:	460d      	mov	r5, r1
 8001c20:	4b8a      	ldr	r3, [pc, #552]	; (8001e4c <motor+0x5ec>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	ec45 4b10 	vmov	d0, r4, r5
 8001c2a:	f000 f9c9 	bl	8001fc0 <forward>
		  osDelay(10);
 8001c2e:	200a      	movs	r0, #10
 8001c30:	f005 fd40 	bl	80076b4 <osDelay>
 8001c34:	e0ec      	b.n	8001e10 <motor+0x5b0>
	  }else if(strncmp(aRxBuffer,"Z",1)== 0){ //Reverse
 8001c36:	2201      	movs	r2, #1
 8001c38:	4985      	ldr	r1, [pc, #532]	; (8001e50 <motor+0x5f0>)
 8001c3a:	4881      	ldr	r0, [pc, #516]	; (8001e40 <motor+0x5e0>)
 8001c3c:	f008 ff7b 	bl	800ab36 <strncmp>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d150      	bne.n	8001ce8 <motor+0x488>
		  magnitude = (double) 10.00*((double)(aRxBuffer[1] - '0')*100.00 + (double)(aRxBuffer[2] - '0')*10.00 + (double)(aRxBuffer[3] - '0')*1.00);
 8001c46:	4b7e      	ldr	r3, [pc, #504]	; (8001e40 <motor+0x5e0>)
 8001c48:	785b      	ldrb	r3, [r3, #1]
 8001c4a:	3b30      	subs	r3, #48	; 0x30
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fc71 	bl	8000534 <__aeabi_i2d>
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	4b7b      	ldr	r3, [pc, #492]	; (8001e44 <motor+0x5e4>)
 8001c58:	f7fe fcd6 	bl	8000608 <__aeabi_dmul>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4614      	mov	r4, r2
 8001c62:	461d      	mov	r5, r3
 8001c64:	4b76      	ldr	r3, [pc, #472]	; (8001e40 <motor+0x5e0>)
 8001c66:	789b      	ldrb	r3, [r3, #2]
 8001c68:	3b30      	subs	r3, #48	; 0x30
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc62 	bl	8000534 <__aeabi_i2d>
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	4b74      	ldr	r3, [pc, #464]	; (8001e48 <motor+0x5e8>)
 8001c76:	f7fe fcc7 	bl	8000608 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4620      	mov	r0, r4
 8001c80:	4629      	mov	r1, r5
 8001c82:	f7fe fb0b 	bl	800029c <__adddf3>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4614      	mov	r4, r2
 8001c8c:	461d      	mov	r5, r3
 8001c8e:	4b6c      	ldr	r3, [pc, #432]	; (8001e40 <motor+0x5e0>)
 8001c90:	78db      	ldrb	r3, [r3, #3]
 8001c92:	3b30      	subs	r3, #48	; 0x30
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc4d 	bl	8000534 <__aeabi_i2d>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	f7fe fafb 	bl	800029c <__adddf3>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	4b65      	ldr	r3, [pc, #404]	; (8001e48 <motor+0x5e8>)
 8001cb4:	f7fe fca8 	bl	8000608 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f7fe ff3c 	bl	8000b3c <__aeabi_d2iz>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	613b      	str	r3, [r7, #16]
		  //reverse(300,defaultPower);
		  reverse((double)magnitude,defaultPower);
 8001cc8:	6938      	ldr	r0, [r7, #16]
 8001cca:	f7fe fc33 	bl	8000534 <__aeabi_i2d>
 8001cce:	4604      	mov	r4, r0
 8001cd0:	460d      	mov	r5, r1
 8001cd2:	4b5e      	ldr	r3, [pc, #376]	; (8001e4c <motor+0x5ec>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	ec45 4b10 	vmov	d0, r4, r5
 8001cdc:	f000 fb5c 	bl	8002398 <reverse>
		  osDelay(10);
 8001ce0:	200a      	movs	r0, #10
 8001ce2:	f005 fce7 	bl	80076b4 <osDelay>
 8001ce6:	e093      	b.n	8001e10 <motor+0x5b0>
	  }else if(strcmp(aRxBuffer, "C111") == 0){ //Center Servo
 8001ce8:	495a      	ldr	r1, [pc, #360]	; (8001e54 <motor+0x5f4>)
 8001cea:	4855      	ldr	r0, [pc, #340]	; (8001e40 <motor+0x5e0>)
 8001cec:	f7fe fa70 	bl	80001d0 <strcmp>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d105      	bne.n	8001d02 <motor+0x4a2>
		  center();
 8001cf6:	f000 fcf9 	bl	80026ec <center>
		  osDelay(10);
 8001cfa:	200a      	movs	r0, #10
 8001cfc:	f005 fcda 	bl	80076b4 <osDelay>
 8001d00:	e086      	b.n	8001e10 <motor+0x5b0>
	  }
	  else if(strcmp(aRxBuffer, "L111") == 0){ //Full Left
 8001d02:	4955      	ldr	r1, [pc, #340]	; (8001e58 <motor+0x5f8>)
 8001d04:	484e      	ldr	r0, [pc, #312]	; (8001e40 <motor+0x5e0>)
 8001d06:	f7fe fa63 	bl	80001d0 <strcmp>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d109      	bne.n	8001d24 <motor+0x4c4>
		  //fullLeft();

		  Left(90,defaultPower);
 8001d10:	4b4e      	ldr	r3, [pc, #312]	; (8001e4c <motor+0x5ec>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	205a      	movs	r0, #90	; 0x5a
 8001d18:	f000 fd0c 	bl	8002734 <Left>
		  osDelay(10);
 8001d1c:	200a      	movs	r0, #10
 8001d1e:	f005 fcc9 	bl	80076b4 <osDelay>
 8001d22:	e075      	b.n	8001e10 <motor+0x5b0>
	  }else if(strcmp(aRxBuffer, "LL22") == 0){ //Half Left
 8001d24:	494d      	ldr	r1, [pc, #308]	; (8001e5c <motor+0x5fc>)
 8001d26:	4846      	ldr	r0, [pc, #280]	; (8001e40 <motor+0x5e0>)
 8001d28:	f7fe fa52 	bl	80001d0 <strcmp>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d105      	bne.n	8001d3e <motor+0x4de>
		  halfLeft();
 8001d32:	f000 fdf3 	bl	800291c <halfLeft>
		  osDelay(10);
 8001d36:	200a      	movs	r0, #10
 8001d38:	f005 fcbc 	bl	80076b4 <osDelay>
 8001d3c:	e068      	b.n	8001e10 <motor+0x5b0>
	  }else if(strcmp(aRxBuffer, "R111") == 0){ //Full Right
 8001d3e:	4948      	ldr	r1, [pc, #288]	; (8001e60 <motor+0x600>)
 8001d40:	483f      	ldr	r0, [pc, #252]	; (8001e40 <motor+0x5e0>)
 8001d42:	f7fe fa45 	bl	80001d0 <strcmp>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10a      	bne.n	8001d62 <motor+0x502>
		  Right(-90,defaultPower);
 8001d4c:	4b3f      	ldr	r3, [pc, #252]	; (8001e4c <motor+0x5ec>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8001d56:	f000 fdfd 	bl	8002954 <Right>
		  osDelay(10);
 8001d5a:	200a      	movs	r0, #10
 8001d5c:	f005 fcaa 	bl	80076b4 <osDelay>
 8001d60:	e056      	b.n	8001e10 <motor+0x5b0>
	  }else if(strcmp(aRxBuffer, "RR22") == 0){ //Half Right
 8001d62:	4940      	ldr	r1, [pc, #256]	; (8001e64 <motor+0x604>)
 8001d64:	4836      	ldr	r0, [pc, #216]	; (8001e40 <motor+0x5e0>)
 8001d66:	f7fe fa33 	bl	80001d0 <strcmp>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d105      	bne.n	8001d7c <motor+0x51c>
		  halfRight();
 8001d70:	f000 fee4 	bl	8002b3c <halfRight>
		  osDelay(10);
 8001d74:	200a      	movs	r0, #10
 8001d76:	f005 fc9d 	bl	80076b4 <osDelay>
 8001d7a:	e049      	b.n	8001e10 <motor+0x5b0>
	  }else if(strcmp(aRxBuffer, "TTTT") == 0){
 8001d7c:	493a      	ldr	r1, [pc, #232]	; (8001e68 <motor+0x608>)
 8001d7e:	4830      	ldr	r0, [pc, #192]	; (8001e40 <motor+0x5e0>)
 8001d80:	f7fe fa26 	bl	80001d0 <strcmp>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d125      	bne.n	8001dd6 <motor+0x576>
		  osDelay(100);
 8001d8a:	2064      	movs	r0, #100	; 0x64
 8001d8c:	f005 fc92 	bl	80076b4 <osDelay>
		  forward(2000);
 8001d90:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d94:	f000 f914 	bl	8001fc0 <forward>
		  while(wheelDist < 4000){
 8001d98:	e002      	b.n	8001da0 <motor+0x540>
			  printf("Hello");
 8001d9a:	4834      	ldr	r0, [pc, #208]	; (8001e6c <motor+0x60c>)
 8001d9c:	f008 fdd6 	bl	800a94c <iprintf>
		  while(wheelDist < 4000){
 8001da0:	4b33      	ldr	r3, [pc, #204]	; (8001e70 <motor+0x610>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001da8:	dbf7      	blt.n	8001d9a <motor+0x53a>
		  }
		  stop();
 8001daa:	f000 fa9f 	bl	80022ec <stop>
		  osDelay(5000);
 8001dae:	f241 3088 	movw	r0, #5000	; 0x1388
 8001db2:	f005 fc7f 	bl	80076b4 <osDelay>
		  reverse(defaultPower);
 8001db6:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <motor+0x5ec>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 faec 	bl	8002398 <reverse>
		  while(wheelDist > 0){
 8001dc0:	e002      	b.n	8001dc8 <motor+0x568>
			  printf("Hello");
 8001dc2:	482a      	ldr	r0, [pc, #168]	; (8001e6c <motor+0x60c>)
 8001dc4:	f008 fdc2 	bl	800a94c <iprintf>
		  while(wheelDist > 0){
 8001dc8:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <motor+0x610>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	dcf8      	bgt.n	8001dc2 <motor+0x562>
		  }
		  stop();
 8001dd0:	f000 fa8c 	bl	80022ec <stop>
 8001dd4:	e01c      	b.n	8001e10 <motor+0x5b0>
	  }else if(strcmp(aRxBuffer, "EEEE") == 0){
 8001dd6:	4927      	ldr	r1, [pc, #156]	; (8001e74 <motor+0x614>)
 8001dd8:	4819      	ldr	r0, [pc, #100]	; (8001e40 <motor+0x5e0>)
 8001dda:	f7fe f9f9 	bl	80001d0 <strcmp>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10e      	bne.n	8001e02 <motor+0x5a2>
		  osDelay(100);
 8001de4:	2064      	movs	r0, #100	; 0x64
 8001de6:	f005 fc65 	bl	80076b4 <osDelay>
		  stop();
 8001dea:	f000 fa7f 	bl	80022ec <stop>
		  osDelay(100);
 8001dee:	2064      	movs	r0, #100	; 0x64
 8001df0:	f005 fc60 	bl	80076b4 <osDelay>
		  HAL_UART_Transmit(&huart3,"EEEE\0",2,0xFF);
 8001df4:	23ff      	movs	r3, #255	; 0xff
 8001df6:	2202      	movs	r2, #2
 8001df8:	491f      	ldr	r1, [pc, #124]	; (8001e78 <motor+0x618>)
 8001dfa:	4820      	ldr	r0, [pc, #128]	; (8001e7c <motor+0x61c>)
 8001dfc:	f004 fb1f 	bl	800643e <HAL_UART_Transmit>
 8001e00:	e006      	b.n	8001e10 <motor+0x5b0>

	  }
	  else{
		  OLED_ShowString(10,10,motorcmd);
 8001e02:	4b1f      	ldr	r3, [pc, #124]	; (8001e80 <motor+0x620>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	210a      	movs	r1, #10
 8001e0a:	200a      	movs	r0, #10
 8001e0c:	f008 fb12 	bl	800a434 <OLED_ShowString>
	  }
	  magnitude = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	613b      	str	r3, [r7, #16]
	  OLED_ShowString(10,40,aRxBuffer);
 8001e14:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <motor+0x5e0>)
 8001e16:	2128      	movs	r1, #40	; 0x28
 8001e18:	200a      	movs	r0, #10
 8001e1a:	f008 fb0b 	bl	800a434 <OLED_ShowString>
	  memset(aRxBuffer, 0, sizeof(aRxBuffer));
 8001e1e:	2204      	movs	r2, #4
 8001e20:	2100      	movs	r1, #0
 8001e22:	4807      	ldr	r0, [pc, #28]	; (8001e40 <motor+0x5e0>)
 8001e24:	f008 fcf5 	bl	800a812 <memset>
	  memset(aTxBuffer, 0, sizeof(aTxBuffer));
 8001e28:	2205      	movs	r2, #5
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4815      	ldr	r0, [pc, #84]	; (8001e84 <motor+0x624>)
 8001e2e:	f008 fcf0 	bl	800a812 <memset>
	  osDelay(5000);
 8001e32:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e36:	f005 fc3d 	bl	80076b4 <osDelay>
  {
 8001e3a:	e523      	b.n	8001884 <motor+0x24>
 8001e3c:	0800ba60 	.word	0x0800ba60
 8001e40:	20000000 	.word	0x20000000
 8001e44:	40590000 	.word	0x40590000
 8001e48:	40240000 	.word	0x40240000
 8001e4c:	20000004 	.word	0x20000004
 8001e50:	0800ba64 	.word	0x0800ba64
 8001e54:	0800ba68 	.word	0x0800ba68
 8001e58:	0800ba70 	.word	0x0800ba70
 8001e5c:	0800ba78 	.word	0x0800ba78
 8001e60:	0800ba80 	.word	0x0800ba80
 8001e64:	0800ba88 	.word	0x0800ba88
 8001e68:	0800ba90 	.word	0x0800ba90
 8001e6c:	0800ba98 	.word	0x0800ba98
 8001e70:	200002c0 	.word	0x200002c0
 8001e74:	0800baa0 	.word	0x0800baa0
 8001e78:	0800baa8 	.word	0x0800baa8
 8001e7c:	20000210 	.word	0x20000210
 8001e80:	20000270 	.word	0x20000270
 8001e84:	20000268 	.word	0x20000268

08001e88 <encoder_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_task */
void encoder_task(void *argument)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b094      	sub	sp, #80	; 0x50
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder_task */
  /* Infinite loop */
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001e90:	213c      	movs	r1, #60	; 0x3c
 8001e92:	4843      	ldr	r0, [pc, #268]	; (8001fa0 <encoder_task+0x118>)
 8001e94:	f003 fc90 	bl	80057b8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8001e98:	213c      	movs	r1, #60	; 0x3c
 8001e9a:	4842      	ldr	r0, [pc, #264]	; (8001fa4 <encoder_task+0x11c>)
 8001e9c:	f003 fc8c 	bl	80057b8 <HAL_TIM_Encoder_Start>

	int cnt1,cnt2,diff1,diff2;
	int dirL,dirR;
	uint32_t tick = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
	total_distanceA = 0;
 8001ea4:	4b40      	ldr	r3, [pc, #256]	; (8001fa8 <encoder_task+0x120>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
	total_distanceB = 0;
 8001eaa:	4b40      	ldr	r3, [pc, #256]	; (8001fac <encoder_task+0x124>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
	cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001eb0:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <encoder_task+0x118>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	63bb      	str	r3, [r7, #56]	; 0x38
	tick = HAL_GetTick();
 8001eb8:	f001 fa96 	bl	80033e8 <HAL_GetTick>
 8001ebc:	63f8      	str	r0, [r7, #60]	; 0x3c
////		sprintf(hello2,"Dir:%5d\0",cnt2);
////		OLED_ShowString(10,10,hello2);
//		OLED_Refresh_Gram();

		//tick = HAL_GetTick();
		 if(HAL_GetTick() - tick >= 10){
 8001ebe:	f001 fa93 	bl	80033e8 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b09      	cmp	r3, #9
 8001eca:	d9f8      	bls.n	8001ebe <encoder_task+0x36>
				  cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001ecc:	4b34      	ldr	r3, [pc, #208]	; (8001fa0 <encoder_task+0x118>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	63bb      	str	r3, [r7, #56]	; 0x38
				  cnt2 =  __HAL_TIM_GET_COUNTER(&htim3);
 8001ed4:	4b33      	ldr	r3, [pc, #204]	; (8001fa4 <encoder_task+0x11c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
					if(cnt1 > 32000){
 8001edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ede:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001ee2:	dd06      	ble.n	8001ef2 <encoder_task+0x6a>
						  diff1 = (65536 - cnt1);
 8001ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee6:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001eea:	64fb      	str	r3, [r7, #76]	; 0x4c
						  dirL = 1;
 8001eec:	2301      	movs	r3, #1
 8001eee:	647b      	str	r3, [r7, #68]	; 0x44
 8001ef0:	e004      	b.n	8001efc <encoder_task+0x74>


						  }
					 else {
						  diff1 = cnt1;
 8001ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
						  dirL = -1;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	647b      	str	r3, [r7, #68]	; 0x44

					  }


					  if(cnt2 > 32000){
 8001efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efe:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001f02:	dd07      	ble.n	8001f14 <encoder_task+0x8c>
						  diff2 = (65536 - cnt2);
 8001f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f06:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001f0a:	64bb      	str	r3, [r7, #72]	; 0x48
						  dirR = -1;
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f10:	643b      	str	r3, [r7, #64]	; 0x40
 8001f12:	e003      	b.n	8001f1c <encoder_task+0x94>
					  }
					  else {
						 diff2 = cnt2;
 8001f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f16:	64bb      	str	r3, [r7, #72]	; 0x48
						 dirR = 1;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	643b      	str	r3, [r7, #64]	; 0x40
					  }


                      if(dirR == 1){
 8001f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d106      	bne.n	8001f30 <encoder_task+0xa8>
	  		  			  total_distanceB += diff2;
 8001f22:	4b22      	ldr	r3, [pc, #136]	; (8001fac <encoder_task+0x124>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f28:	4413      	add	r3, r2
 8001f2a:	4a20      	ldr	r2, [pc, #128]	; (8001fac <encoder_task+0x124>)
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e005      	b.n	8001f3c <encoder_task+0xb4>
                         }
                      else {
                       	  total_distanceB -= diff2;
 8001f30:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <encoder_task+0x124>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	4a1c      	ldr	r2, [pc, #112]	; (8001fac <encoder_task+0x124>)
 8001f3a:	6013      	str	r3, [r2, #0]
                         }

                         if(dirL == 1){
 8001f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d106      	bne.n	8001f50 <encoder_task+0xc8>
	  		  			  total_distanceA += diff1;
 8001f42:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <encoder_task+0x120>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <encoder_task+0x120>)
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e005      	b.n	8001f5c <encoder_task+0xd4>
                         }
                         else {
                       	  total_distanceA -= diff1;
 8001f50:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <encoder_task+0x120>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	4a13      	ldr	r2, [pc, #76]	; (8001fa8 <encoder_task+0x120>)
 8001f5a:	6013      	str	r3, [r2, #0]
                         }

		  			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001f5c:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <encoder_task+0x118>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2200      	movs	r2, #0
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24
		  			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <encoder_task+0x11c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24
		  			tick = HAL_GetTick();
 8001f6c:	f001 fa3c 	bl	80033e8 <HAL_GetTick>
 8001f70:	63f8      	str	r0, [r7, #60]	; 0x3c
		  			sprintf(disA,"DisA:%5d",total_distanceA);
 8001f72:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <encoder_task+0x120>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	490d      	ldr	r1, [pc, #52]	; (8001fb0 <encoder_task+0x128>)
 8001f7a:	480e      	ldr	r0, [pc, #56]	; (8001fb4 <encoder_task+0x12c>)
 8001f7c:	f008 fd78 	bl	800aa70 <siprintf>
		  			sprintf(disB,"DisB:%5d",total_distanceB);
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <encoder_task+0x124>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	490c      	ldr	r1, [pc, #48]	; (8001fb8 <encoder_task+0x130>)
 8001f88:	480c      	ldr	r0, [pc, #48]	; (8001fbc <encoder_task+0x134>)
 8001f8a:	f008 fd71 	bl	800aa70 <siprintf>
		  			//OLED_ShowString(10,20,disB);
		  			OLED_ShowString(10,50,disA);
 8001f8e:	4a09      	ldr	r2, [pc, #36]	; (8001fb4 <encoder_task+0x12c>)
 8001f90:	2132      	movs	r1, #50	; 0x32
 8001f92:	200a      	movs	r0, #10
 8001f94:	f008 fa4e 	bl	800a434 <OLED_ShowString>
		  			OLED_Refresh_Gram();
 8001f98:	f008 f8d8 	bl	800a14c <OLED_Refresh_Gram>
		 if(HAL_GetTick() - tick >= 10){
 8001f9c:	e78f      	b.n	8001ebe <encoder_task+0x36>
 8001f9e:	bf00      	nop
 8001fa0:	20000138 	.word	0x20000138
 8001fa4:	20000180 	.word	0x20000180
 8001fa8:	20000290 	.word	0x20000290
 8001fac:	20000294 	.word	0x20000294
 8001fb0:	0800bab0 	.word	0x0800bab0
 8001fb4:	20000298 	.word	0x20000298
 8001fb8:	0800babc 	.word	0x0800babc
 8001fbc:	200002ac 	.word	0x200002ac

08001fc0 <forward>:
* @param argument: Not used
* @retval None
*/

/* Movement Functions BEGIN Header_show */
void forward(double target_distance,int pwnVal){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b094      	sub	sp, #80	; 0x50
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	ed87 0b02 	vstr	d0, [r7, #8]
 8001fca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,"F11",3,0xFF);
 8001fcc:	23ff      	movs	r3, #255	; 0xff
 8001fce:	2203      	movs	r2, #3
 8001fd0:	4959      	ldr	r1, [pc, #356]	; (8002138 <forward+0x178>)
 8001fd2:	485a      	ldr	r0, [pc, #360]	; (800213c <forward+0x17c>)
 8001fd4:	f004 fa33 	bl	800643e <HAL_UART_Transmit>
	//OLED_ShowString(10,10,"           ");
	  double encoder_count = 1559.00;
 8001fd8:	a351      	add	r3, pc, #324	; (adr r3, 8002120 <forward+0x160>)
 8001fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fde:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	  char printprint[10];
	  OLED_ShowString(10,10,"Start\0");
 8001fe2:	4a57      	ldr	r2, [pc, #348]	; (8002140 <forward+0x180>)
 8001fe4:	210a      	movs	r1, #10
 8001fe6:	200a      	movs	r0, #10
 8001fe8:	f008 fa24 	bl	800a434 <OLED_ShowString>
	  uint8_t totaldist[20];

	  double stopdistance = (double) (((double)(target_distance)/(215.00))*encoder_count);
 8001fec:	a34e      	add	r3, pc, #312	; (adr r3, 8002128 <forward+0x168>)
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ff6:	f7fe fc31 	bl	800085c <__aeabi_ddiv>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002002:	f7fe fb01 	bl	8000608 <__aeabi_dmul>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  stopdistance = stopdistance - 217.53488;
 800200e:	a348      	add	r3, pc, #288	; (adr r3, 8002130 <forward+0x170>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002018:	f7fe f93e 	bl	8000298 <__aeabi_dsub>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  htim1.Instance -> CCR4 = 151;
 8002024:	4b47      	ldr	r3, [pc, #284]	; (8002144 <forward+0x184>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2297      	movs	r2, #151	; 0x97
 800202a:	641a      	str	r2, [r3, #64]	; 0x40
	  osDelay(1000);
 800202c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002030:	f005 fb40 	bl	80076b4 <osDelay>


	  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 8002034:	2201      	movs	r2, #1
 8002036:	2108      	movs	r1, #8
 8002038:	4843      	ldr	r0, [pc, #268]	; (8002148 <forward+0x188>)
 800203a:	f001 fd5d 	bl	8003af8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 800203e:	2200      	movs	r2, #0
 8002040:	2104      	movs	r1, #4
 8002042:	4841      	ldr	r0, [pc, #260]	; (8002148 <forward+0x188>)
 8002044:	f001 fd58 	bl	8003af8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 8002048:	2201      	movs	r2, #1
 800204a:	2110      	movs	r1, #16
 800204c:	483e      	ldr	r0, [pc, #248]	; (8002148 <forward+0x188>)
 800204e:	f001 fd53 	bl	8003af8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
 8002054:	2120      	movs	r1, #32
 8002056:	483c      	ldr	r0, [pc, #240]	; (8002148 <forward+0x188>)
 8002058:	f001 fd4e 	bl	8003af8 <HAL_GPIO_WritePin>
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwnVal);
 800205c:	4b3b      	ldr	r3, [pc, #236]	; (800214c <forward+0x18c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,2100);
 8002064:	4b39      	ldr	r3, [pc, #228]	; (800214c <forward+0x18c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f640 0234 	movw	r2, #2100	; 0x834
 800206c:	639a      	str	r2, [r3, #56]	; 0x38
	  total_angle = 0;
 800206e:	4938      	ldr	r1, [pc, #224]	; (8002150 <forward+0x190>)
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	e9c1 2300 	strd	r2, r3, [r1]
	  int counter = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  while (1){

		  if(total_angle>= 1){
 8002080:	4b33      	ldr	r3, [pc, #204]	; (8002150 <forward+0x190>)
 8002082:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	4b32      	ldr	r3, [pc, #200]	; (8002154 <forward+0x194>)
 800208c:	f7fe fd42 	bl	8000b14 <__aeabi_dcmpge>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <forward+0xe6>
			  htim1.Instance -> CCR4 = 159;
 8002096:	4b2b      	ldr	r3, [pc, #172]	; (8002144 <forward+0x184>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	229f      	movs	r2, #159	; 0x9f
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
			  osDelay(20);
 800209e:	2014      	movs	r0, #20
 80020a0:	f005 fb08 	bl	80076b4 <osDelay>
 80020a4:	e017      	b.n	80020d6 <forward+0x116>

		  }
		  else if (total_angle <= -2){
 80020a6:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <forward+0x190>)
 80020a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80020b4:	f7fe fd24 	bl	8000b00 <__aeabi_dcmple>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <forward+0x10e>
			  htim1.Instance -> CCR4 = 139;
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <forward+0x184>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	228b      	movs	r2, #139	; 0x8b
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40
			  osDelay(100);
 80020c6:	2064      	movs	r0, #100	; 0x64
 80020c8:	f005 faf4 	bl	80076b4 <osDelay>
 80020cc:	e003      	b.n	80020d6 <forward+0x116>

		  }
		  else{
			  htim1.Instance -> CCR4 = 147;
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <forward+0x184>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2293      	movs	r2, #147	; 0x93
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40

		  }
		  double pee = (double) total_distanceB;
 80020d6:	4b20      	ldr	r3, [pc, #128]	; (8002158 <forward+0x198>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fa2a 	bl	8000534 <__aeabi_i2d>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		  if(pee >=  stopdistance){
 80020e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020ec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80020f0:	f7fe fd10 	bl	8000b14 <__aeabi_dcmpge>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <forward+0x140>
				stop();
 80020fa:	f000 f8f7 	bl	80022ec <stop>
				break;
 80020fe:	e000      	b.n	8002102 <forward+0x142>
	  while (1){
 8002100:	e7be      	b.n	8002080 <forward+0xc0>
			}
	  }
	  stop();
 8002102:	f000 f8f3 	bl	80022ec <stop>
	  HAL_UART_Transmit(&huart3,"S11",3,0xFF);
 8002106:	23ff      	movs	r3, #255	; 0xff
 8002108:	2203      	movs	r2, #3
 800210a:	4914      	ldr	r1, [pc, #80]	; (800215c <forward+0x19c>)
 800210c:	480b      	ldr	r0, [pc, #44]	; (800213c <forward+0x17c>)
 800210e:	f004 f996 	bl	800643e <HAL_UART_Transmit>
}
 8002112:	bf00      	nop
 8002114:	3750      	adds	r7, #80	; 0x50
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	f3af 8000 	nop.w
 8002120:	00000000 	.word	0x00000000
 8002124:	40985c00 	.word	0x40985c00
 8002128:	00000000 	.word	0x00000000
 800212c:	406ae000 	.word	0x406ae000
 8002130:	bca9691a 	.word	0xbca9691a
 8002134:	406b311d 	.word	0x406b311d
 8002138:	0800bac8 	.word	0x0800bac8
 800213c:	20000210 	.word	0x20000210
 8002140:	0800bacc 	.word	0x0800bacc
 8002144:	200000f0 	.word	0x200000f0
 8002148:	40020000 	.word	0x40020000
 800214c:	200001c8 	.word	0x200001c8
 8002150:	20000288 	.word	0x20000288
 8002154:	3ff00000 	.word	0x3ff00000
 8002158:	20000294 	.word	0x20000294
 800215c:	0800ba4c 	.word	0x0800ba4c

08002160 <forward1>:
void forward1(double target_distance,int pwnVal){
 8002160:	b580      	push	{r7, lr}
 8002162:	b094      	sub	sp, #80	; 0x50
 8002164:	af00      	add	r7, sp, #0
 8002166:	ed87 0b02 	vstr	d0, [r7, #8]
 800216a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,"F11",3,0xFF);
 800216c:	23ff      	movs	r3, #255	; 0xff
 800216e:	2203      	movs	r2, #3
 8002170:	4955      	ldr	r1, [pc, #340]	; (80022c8 <forward1+0x168>)
 8002172:	4856      	ldr	r0, [pc, #344]	; (80022cc <forward1+0x16c>)
 8002174:	f004 f963 	bl	800643e <HAL_UART_Transmit>
	//OLED_ShowString(10,10,"           ");
	  double encoder_count = 1559.00;
 8002178:	a34d      	add	r3, pc, #308	; (adr r3, 80022b0 <forward1+0x150>)
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	  char printprint[10];
	  OLED_ShowString(10,10,"Start\0");
 8002182:	4a53      	ldr	r2, [pc, #332]	; (80022d0 <forward1+0x170>)
 8002184:	210a      	movs	r1, #10
 8002186:	200a      	movs	r0, #10
 8002188:	f008 f954 	bl	800a434 <OLED_ShowString>
	  uint8_t totaldist[20];

	  double stopdistance = (double) (((double)(target_distance)/(215.00))*encoder_count);
 800218c:	a34a      	add	r3, pc, #296	; (adr r3, 80022b8 <forward1+0x158>)
 800218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002192:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002196:	f7fe fb61 	bl	800085c <__aeabi_ddiv>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80021a2:	f7fe fa31 	bl	8000608 <__aeabi_dmul>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  stopdistance = stopdistance - 217.53488;
 80021ae:	a344      	add	r3, pc, #272	; (adr r3, 80022c0 <forward1+0x160>)
 80021b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80021b8:	f7fe f86e 	bl	8000298 <__aeabi_dsub>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  htim1.Instance -> CCR4 = 151;
 80021c4:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <forward1+0x174>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2297      	movs	r2, #151	; 0x97
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40
	  osDelay(1000);
 80021cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021d0:	f005 fa70 	bl	80076b4 <osDelay>


	  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 80021d4:	2201      	movs	r2, #1
 80021d6:	2108      	movs	r1, #8
 80021d8:	483f      	ldr	r0, [pc, #252]	; (80022d8 <forward1+0x178>)
 80021da:	f001 fc8d 	bl	8003af8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 80021de:	2200      	movs	r2, #0
 80021e0:	2104      	movs	r1, #4
 80021e2:	483d      	ldr	r0, [pc, #244]	; (80022d8 <forward1+0x178>)
 80021e4:	f001 fc88 	bl	8003af8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 80021e8:	2201      	movs	r2, #1
 80021ea:	2110      	movs	r1, #16
 80021ec:	483a      	ldr	r0, [pc, #232]	; (80022d8 <forward1+0x178>)
 80021ee:	f001 fc83 	bl	8003af8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2120      	movs	r1, #32
 80021f6:	4838      	ldr	r0, [pc, #224]	; (80022d8 <forward1+0x178>)
 80021f8:	f001 fc7e 	bl	8003af8 <HAL_GPIO_WritePin>
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwnVal);
 80021fc:	4b37      	ldr	r3, [pc, #220]	; (80022dc <forward1+0x17c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,2100);
 8002204:	4b35      	ldr	r3, [pc, #212]	; (80022dc <forward1+0x17c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f640 0234 	movw	r2, #2100	; 0x834
 800220c:	639a      	str	r2, [r3, #56]	; 0x38
	  total_angle = 0;
 800220e:	4934      	ldr	r1, [pc, #208]	; (80022e0 <forward1+0x180>)
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9c1 2300 	strd	r2, r3, [r1]
	  int counter = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  while (1){

		  if(total_angle>= 2){
 8002220:	4b2f      	ldr	r3, [pc, #188]	; (80022e0 <forward1+0x180>)
 8002222:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800222e:	f7fe fc71 	bl	8000b14 <__aeabi_dcmpge>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d007      	beq.n	8002248 <forward1+0xe8>
			  htim1.Instance -> CCR4 = 161;
 8002238:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <forward1+0x174>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	22a1      	movs	r2, #161	; 0xa1
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
			  osDelay(20);
 8002240:	2014      	movs	r0, #20
 8002242:	f005 fa37 	bl	80076b4 <osDelay>
 8002246:	e016      	b.n	8002276 <forward1+0x116>

		  }
		  else if (total_angle <= -1){
 8002248:	4b25      	ldr	r3, [pc, #148]	; (80022e0 <forward1+0x180>)
 800224a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <forward1+0x184>)
 8002254:	f7fe fc54 	bl	8000b00 <__aeabi_dcmple>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d007      	beq.n	800226e <forward1+0x10e>
			  htim1.Instance -> CCR4 = 139;
 800225e:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <forward1+0x174>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	228b      	movs	r2, #139	; 0x8b
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
			  osDelay(20);
 8002266:	2014      	movs	r0, #20
 8002268:	f005 fa24 	bl	80076b4 <osDelay>
 800226c:	e003      	b.n	8002276 <forward1+0x116>

		  }
		  else{
			  htim1.Instance -> CCR4 = 151;
 800226e:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <forward1+0x174>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2297      	movs	r2, #151	; 0x97
 8002274:	641a      	str	r2, [r3, #64]	; 0x40

		  }
		  double pee = (double) total_distanceB;
 8002276:	4b1c      	ldr	r3, [pc, #112]	; (80022e8 <forward1+0x188>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe f95a 	bl	8000534 <__aeabi_i2d>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		  if(pee >=  stopdistance){
 8002288:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800228c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002290:	f7fe fc40 	bl	8000b14 <__aeabi_dcmpge>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <forward1+0x140>
				stop();
 800229a:	f000 f827 	bl	80022ec <stop>
				break;
 800229e:	e000      	b.n	80022a2 <forward1+0x142>
	  while (1){
 80022a0:	e7be      	b.n	8002220 <forward1+0xc0>
			}
	  }
	  stop();
 80022a2:	f000 f823 	bl	80022ec <stop>
}
 80022a6:	bf00      	nop
 80022a8:	3750      	adds	r7, #80	; 0x50
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	00000000 	.word	0x00000000
 80022b4:	40985c00 	.word	0x40985c00
 80022b8:	00000000 	.word	0x00000000
 80022bc:	406ae000 	.word	0x406ae000
 80022c0:	bca9691a 	.word	0xbca9691a
 80022c4:	406b311d 	.word	0x406b311d
 80022c8:	0800bac8 	.word	0x0800bac8
 80022cc:	20000210 	.word	0x20000210
 80022d0:	0800bacc 	.word	0x0800bacc
 80022d4:	200000f0 	.word	0x200000f0
 80022d8:	40020000 	.word	0x40020000
 80022dc:	200001c8 	.word	0x200001c8
 80022e0:	20000288 	.word	0x20000288
 80022e4:	bff00000 	.word	0xbff00000
 80022e8:	20000294 	.word	0x20000294

080022ec <stop>:


void stop(){
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3,"S00",3,0xFF);
 80022f2:	23ff      	movs	r3, #255	; 0xff
 80022f4:	2203      	movs	r2, #3
 80022f6:	491e      	ldr	r1, [pc, #120]	; (8002370 <stop+0x84>)
 80022f8:	481e      	ldr	r0, [pc, #120]	; (8002374 <stop+0x88>)
 80022fa:	f004 f8a0 	bl	800643e <HAL_UART_Transmit>
	//OLED_ShowString(10,10,"           ");
	  OLED_ShowString(10,10,"Stop\0");
 80022fe:	4a1e      	ldr	r2, [pc, #120]	; (8002378 <stop+0x8c>)
 8002300:	210a      	movs	r1, #10
 8002302:	200a      	movs	r0, #10
 8002304:	f008 f896 	bl	800a434 <OLED_ShowString>
	  int pwnVal = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	607b      	str	r3, [r7, #4]
	  total_distanceA = 0;
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <stop+0x90>)
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
	  total_distanceB = 0;
 8002312:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <stop+0x94>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
	  total_angle = 0;
 8002318:	491a      	ldr	r1, [pc, #104]	; (8002384 <stop+0x98>)
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	e9c1 2300 	strd	r2, r3, [r1]
	  htim1.Instance -> CCR4 = 151;
 8002326:	4b18      	ldr	r3, [pc, #96]	; (8002388 <stop+0x9c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2297      	movs	r2, #151	; 0x97
 800232c:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 800232e:	2201      	movs	r2, #1
 8002330:	2104      	movs	r1, #4
 8002332:	4816      	ldr	r0, [pc, #88]	; (800238c <stop+0xa0>)
 8002334:	f001 fbe0 	bl	8003af8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 8002338:	2200      	movs	r2, #0
 800233a:	2108      	movs	r1, #8
 800233c:	4813      	ldr	r0, [pc, #76]	; (800238c <stop+0xa0>)
 800233e:	f001 fbdb 	bl	8003af8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 8002342:	2201      	movs	r2, #1
 8002344:	2110      	movs	r1, #16
 8002346:	4811      	ldr	r0, [pc, #68]	; (800238c <stop+0xa0>)
 8002348:	f001 fbd6 	bl	8003af8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 800234c:	2200      	movs	r2, #0
 800234e:	2120      	movs	r1, #32
 8002350:	480e      	ldr	r0, [pc, #56]	; (800238c <stop+0xa0>)
 8002352:	f001 fbd1 	bl	8003af8 <HAL_GPIO_WritePin>
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwnVal);
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <stop+0xa4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwnVal);
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <stop+0xa4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	0800bad4 	.word	0x0800bad4
 8002374:	20000210 	.word	0x20000210
 8002378:	0800bad8 	.word	0x0800bad8
 800237c:	20000290 	.word	0x20000290
 8002380:	20000294 	.word	0x20000294
 8002384:	20000288 	.word	0x20000288
 8002388:	200000f0 	.word	0x200000f0
 800238c:	40020000 	.word	0x40020000
 8002390:	200001c8 	.word	0x200001c8
 8002394:	00000000 	.word	0x00000000

08002398 <reverse>:

void reverse(double target_distance,int pwnVal){
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af00      	add	r7, sp, #0
 800239e:	ed87 0b02 	vstr	d0, [r7, #8]
 80023a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,"REV",3,0xFF);
 80023a4:	23ff      	movs	r3, #255	; 0xff
 80023a6:	2203      	movs	r2, #3
 80023a8:	495b      	ldr	r1, [pc, #364]	; (8002518 <reverse+0x180>)
 80023aa:	485c      	ldr	r0, [pc, #368]	; (800251c <reverse+0x184>)
 80023ac:	f004 f847 	bl	800643e <HAL_UART_Transmit>
	//OLED_ShowString(10,10,"           ");
	  OLED_ShowString(10,10,"Reverse\0");
 80023b0:	4a5b      	ldr	r2, [pc, #364]	; (8002520 <reverse+0x188>)
 80023b2:	210a      	movs	r1, #10
 80023b4:	200a      	movs	r0, #10
 80023b6:	f008 f83d 	bl	800a434 <OLED_ShowString>
	  total_distanceA = 0;
 80023ba:	4b5a      	ldr	r3, [pc, #360]	; (8002524 <reverse+0x18c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
	  total_distanceB = 0;
 80023c0:	4b59      	ldr	r3, [pc, #356]	; (8002528 <reverse+0x190>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
	  total_angle = 0;
 80023c6:	4959      	ldr	r1, [pc, #356]	; (800252c <reverse+0x194>)
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	e9c1 2300 	strd	r2, r3, [r1]
	  htim1.Instance -> CCR4 = 151;
 80023d4:	4b56      	ldr	r3, [pc, #344]	; (8002530 <reverse+0x198>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2297      	movs	r2, #151	; 0x97
 80023da:	641a      	str	r2, [r3, #64]	; 0x40
	  osDelay(500);
 80023dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023e0:	f005 f968 	bl	80076b4 <osDelay>
	  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 80023e4:	2200      	movs	r2, #0
 80023e6:	2108      	movs	r1, #8
 80023e8:	4852      	ldr	r0, [pc, #328]	; (8002534 <reverse+0x19c>)
 80023ea:	f001 fb85 	bl	8003af8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 80023ee:	2201      	movs	r2, #1
 80023f0:	2104      	movs	r1, #4
 80023f2:	4850      	ldr	r0, [pc, #320]	; (8002534 <reverse+0x19c>)
 80023f4:	f001 fb80 	bl	8003af8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
 80023f8:	2200      	movs	r2, #0
 80023fa:	2110      	movs	r1, #16
 80023fc:	484d      	ldr	r0, [pc, #308]	; (8002534 <reverse+0x19c>)
 80023fe:	f001 fb7b 	bl	8003af8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
 8002402:	2201      	movs	r2, #1
 8002404:	2120      	movs	r1, #32
 8002406:	484b      	ldr	r0, [pc, #300]	; (8002534 <reverse+0x19c>)
 8002408:	f001 fb76 	bl	8003af8 <HAL_GPIO_WritePin>
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwnVal);
 800240c:	4b4a      	ldr	r3, [pc, #296]	; (8002538 <reverse+0x1a0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,2100);
 8002414:	4b48      	ldr	r3, [pc, #288]	; (8002538 <reverse+0x1a0>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f640 0234 	movw	r2, #2100	; 0x834
 800241c:	639a      	str	r2, [r3, #56]	; 0x38
	  double encoder_count = -1559.00;
 800241e:	a338      	add	r3, pc, #224	; (adr r3, 8002500 <reverse+0x168>)
 8002420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002424:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  double stopdistance = (double) (((double)(target_distance)/(215.00))*encoder_count);
 8002428:	a337      	add	r3, pc, #220	; (adr r3, 8002508 <reverse+0x170>)
 800242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002432:	f7fe fa13 	bl	800085c <__aeabi_ddiv>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800243e:	f7fe f8e3 	bl	8000608 <__aeabi_dmul>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  stopdistance = stopdistance + 217.53488;
 800244a:	a331      	add	r3, pc, #196	; (adr r3, 8002510 <reverse+0x178>)
 800244c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002450:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002454:	f7fd ff22 	bl	800029c <__adddf3>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  while(1){
		  osDelay(10);
 8002460:	200a      	movs	r0, #10
 8002462:	f005 f927 	bl	80076b4 <osDelay>
		  if(total_angle>= 1){
 8002466:	4b31      	ldr	r3, [pc, #196]	; (800252c <reverse+0x194>)
 8002468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	4b32      	ldr	r3, [pc, #200]	; (800253c <reverse+0x1a4>)
 8002472:	f7fe fb4f 	bl	8000b14 <__aeabi_dcmpge>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d007      	beq.n	800248c <reverse+0xf4>
			  htim1.Instance -> CCR4 = 139;
 800247c:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <reverse+0x198>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	228b      	movs	r2, #139	; 0x8b
 8002482:	641a      	str	r2, [r3, #64]	; 0x40
			  osDelay(20);
 8002484:	2014      	movs	r0, #20
 8002486:	f005 f915 	bl	80076b4 <osDelay>
 800248a:	e016      	b.n	80024ba <reverse+0x122>

		  }
		  else if (total_angle <= -1){
 800248c:	4b27      	ldr	r3, [pc, #156]	; (800252c <reverse+0x194>)
 800248e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <reverse+0x1a8>)
 8002498:	f7fe fb32 	bl	8000b00 <__aeabi_dcmple>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d007      	beq.n	80024b2 <reverse+0x11a>
			  htim1.Instance -> CCR4 = 159;
 80024a2:	4b23      	ldr	r3, [pc, #140]	; (8002530 <reverse+0x198>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	229f      	movs	r2, #159	; 0x9f
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40
			  osDelay(20);
 80024aa:	2014      	movs	r0, #20
 80024ac:	f005 f902 	bl	80076b4 <osDelay>
 80024b0:	e003      	b.n	80024ba <reverse+0x122>

		  }
		  else{
			  htim1.Instance -> CCR4 = 151;
 80024b2:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <reverse+0x198>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2297      	movs	r2, #151	; 0x97
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40
		  }
		  double pee = (double) total_distanceB;
 80024ba:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <reverse+0x190>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe f838 	bl	8000534 <__aeabi_i2d>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		  if(pee <=  stopdistance){
 80024cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024d4:	f7fe fb14 	bl	8000b00 <__aeabi_dcmple>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <reverse+0x14c>
				stop();
 80024de:	f7ff ff05 	bl	80022ec <stop>
				break;
 80024e2:	e000      	b.n	80024e6 <reverse+0x14e>
	  while(1){
 80024e4:	e7bc      	b.n	8002460 <reverse+0xc8>
			}
	  }
	  stop();
 80024e6:	f7ff ff01 	bl	80022ec <stop>
		//total_distanceA = 0;
		//total_distanceB = 0;
	  HAL_UART_Transmit(&huart3,"S11",3,0xFF);
 80024ea:	23ff      	movs	r3, #255	; 0xff
 80024ec:	2203      	movs	r2, #3
 80024ee:	4915      	ldr	r1, [pc, #84]	; (8002544 <reverse+0x1ac>)
 80024f0:	480a      	ldr	r0, [pc, #40]	; (800251c <reverse+0x184>)
 80024f2:	f003 ffa4 	bl	800643e <HAL_UART_Transmit>

}
 80024f6:	bf00      	nop
 80024f8:	3728      	adds	r7, #40	; 0x28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	00000000 	.word	0x00000000
 8002504:	c0985c00 	.word	0xc0985c00
 8002508:	00000000 	.word	0x00000000
 800250c:	406ae000 	.word	0x406ae000
 8002510:	bca9691a 	.word	0xbca9691a
 8002514:	406b311d 	.word	0x406b311d
 8002518:	0800bae0 	.word	0x0800bae0
 800251c:	20000210 	.word	0x20000210
 8002520:	0800bae4 	.word	0x0800bae4
 8002524:	20000290 	.word	0x20000290
 8002528:	20000294 	.word	0x20000294
 800252c:	20000288 	.word	0x20000288
 8002530:	200000f0 	.word	0x200000f0
 8002534:	40020000 	.word	0x40020000
 8002538:	200001c8 	.word	0x200001c8
 800253c:	3ff00000 	.word	0x3ff00000
 8002540:	bff00000 	.word	0xbff00000
 8002544:	0800ba4c 	.word	0x0800ba4c

08002548 <reverse1>:
void reverse1(double target_distance,int pwnVal){
 8002548:	b580      	push	{r7, lr}
 800254a:	b08a      	sub	sp, #40	; 0x28
 800254c:	af00      	add	r7, sp, #0
 800254e:	ed87 0b02 	vstr	d0, [r7, #8]
 8002552:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,"REV",3,0xFF);
 8002554:	23ff      	movs	r3, #255	; 0xff
 8002556:	2203      	movs	r2, #3
 8002558:	4959      	ldr	r1, [pc, #356]	; (80026c0 <reverse1+0x178>)
 800255a:	485a      	ldr	r0, [pc, #360]	; (80026c4 <reverse1+0x17c>)
 800255c:	f003 ff6f 	bl	800643e <HAL_UART_Transmit>
	//OLED_ShowString(10,10,"           ");
	  OLED_ShowString(10,10,"Reverse\0");
 8002560:	4a59      	ldr	r2, [pc, #356]	; (80026c8 <reverse1+0x180>)
 8002562:	210a      	movs	r1, #10
 8002564:	200a      	movs	r0, #10
 8002566:	f007 ff65 	bl	800a434 <OLED_ShowString>
	  total_distanceA = 0;
 800256a:	4b58      	ldr	r3, [pc, #352]	; (80026cc <reverse1+0x184>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
	  total_distanceB = 0;
 8002570:	4b57      	ldr	r3, [pc, #348]	; (80026d0 <reverse1+0x188>)
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
	  total_angle = 0;
 8002576:	4957      	ldr	r1, [pc, #348]	; (80026d4 <reverse1+0x18c>)
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	e9c1 2300 	strd	r2, r3, [r1]
	  htim1.Instance -> CCR4 = 151;
 8002584:	4b54      	ldr	r3, [pc, #336]	; (80026d8 <reverse1+0x190>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2297      	movs	r2, #151	; 0x97
 800258a:	641a      	str	r2, [r3, #64]	; 0x40
	  osDelay(500);
 800258c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002590:	f005 f890 	bl	80076b4 <osDelay>
	  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 8002594:	2200      	movs	r2, #0
 8002596:	2108      	movs	r1, #8
 8002598:	4850      	ldr	r0, [pc, #320]	; (80026dc <reverse1+0x194>)
 800259a:	f001 faad 	bl	8003af8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 800259e:	2201      	movs	r2, #1
 80025a0:	2104      	movs	r1, #4
 80025a2:	484e      	ldr	r0, [pc, #312]	; (80026dc <reverse1+0x194>)
 80025a4:	f001 faa8 	bl	8003af8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
 80025a8:	2200      	movs	r2, #0
 80025aa:	2110      	movs	r1, #16
 80025ac:	484b      	ldr	r0, [pc, #300]	; (80026dc <reverse1+0x194>)
 80025ae:	f001 faa3 	bl	8003af8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
 80025b2:	2201      	movs	r2, #1
 80025b4:	2120      	movs	r1, #32
 80025b6:	4849      	ldr	r0, [pc, #292]	; (80026dc <reverse1+0x194>)
 80025b8:	f001 fa9e 	bl	8003af8 <HAL_GPIO_WritePin>
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwnVal);
 80025bc:	4b48      	ldr	r3, [pc, #288]	; (80026e0 <reverse1+0x198>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,2100);
 80025c4:	4b46      	ldr	r3, [pc, #280]	; (80026e0 <reverse1+0x198>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f640 0234 	movw	r2, #2100	; 0x834
 80025cc:	639a      	str	r2, [r3, #56]	; 0x38
	  double encoder_count = -1559.00;
 80025ce:	a336      	add	r3, pc, #216	; (adr r3, 80026a8 <reverse1+0x160>)
 80025d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  double stopdistance = (double) (((double)(target_distance)/(215.00))*encoder_count);
 80025d8:	a335      	add	r3, pc, #212	; (adr r3, 80026b0 <reverse1+0x168>)
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025e2:	f7fe f93b 	bl	800085c <__aeabi_ddiv>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80025ee:	f7fe f80b 	bl	8000608 <__aeabi_dmul>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  stopdistance = stopdistance + 217.53488;
 80025fa:	a32f      	add	r3, pc, #188	; (adr r3, 80026b8 <reverse1+0x170>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002604:	f7fd fe4a 	bl	800029c <__adddf3>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  while(1){
		  osDelay(10);
 8002610:	200a      	movs	r0, #10
 8002612:	f005 f84f 	bl	80076b4 <osDelay>
		  if(total_angle>= 1){
 8002616:	4b2f      	ldr	r3, [pc, #188]	; (80026d4 <reverse1+0x18c>)
 8002618:	e9d3 0100 	ldrd	r0, r1, [r3]
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <reverse1+0x19c>)
 8002622:	f7fe fa77 	bl	8000b14 <__aeabi_dcmpge>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d007      	beq.n	800263c <reverse1+0xf4>
			  htim1.Instance -> CCR4 = 139;
 800262c:	4b2a      	ldr	r3, [pc, #168]	; (80026d8 <reverse1+0x190>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	228b      	movs	r2, #139	; 0x8b
 8002632:	641a      	str	r2, [r3, #64]	; 0x40
			  osDelay(20);
 8002634:	2014      	movs	r0, #20
 8002636:	f005 f83d 	bl	80076b4 <osDelay>
 800263a:	e016      	b.n	800266a <reverse1+0x122>

		  }
		  else if (total_angle <= -1){
 800263c:	4b25      	ldr	r3, [pc, #148]	; (80026d4 <reverse1+0x18c>)
 800263e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	4b28      	ldr	r3, [pc, #160]	; (80026e8 <reverse1+0x1a0>)
 8002648:	f7fe fa5a 	bl	8000b00 <__aeabi_dcmple>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <reverse1+0x11a>
			  htim1.Instance -> CCR4 = 159;
 8002652:	4b21      	ldr	r3, [pc, #132]	; (80026d8 <reverse1+0x190>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	229f      	movs	r2, #159	; 0x9f
 8002658:	641a      	str	r2, [r3, #64]	; 0x40
			  osDelay(20);
 800265a:	2014      	movs	r0, #20
 800265c:	f005 f82a 	bl	80076b4 <osDelay>
 8002660:	e003      	b.n	800266a <reverse1+0x122>

		  }
		  else{
			  htim1.Instance -> CCR4 = 151;
 8002662:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <reverse1+0x190>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2297      	movs	r2, #151	; 0x97
 8002668:	641a      	str	r2, [r3, #64]	; 0x40
		  }
		  double pee = (double) total_distanceB;
 800266a:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <reverse1+0x188>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fd ff60 	bl	8000534 <__aeabi_i2d>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	e9c7 2304 	strd	r2, r3, [r7, #16]
		  if(pee <=  stopdistance){
 800267c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002680:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002684:	f7fe fa3c 	bl	8000b00 <__aeabi_dcmple>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <reverse1+0x14c>
				stop();
 800268e:	f7ff fe2d 	bl	80022ec <stop>
				break;
 8002692:	e000      	b.n	8002696 <reverse1+0x14e>
	  while(1){
 8002694:	e7bc      	b.n	8002610 <reverse1+0xc8>
			}
	  }
	  stop();
 8002696:	f7ff fe29 	bl	80022ec <stop>
		//total_distanceA = 0;
		//total_distanceB = 0;

}
 800269a:	bf00      	nop
 800269c:	3728      	adds	r7, #40	; 0x28
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	f3af 8000 	nop.w
 80026a8:	00000000 	.word	0x00000000
 80026ac:	c0985c00 	.word	0xc0985c00
 80026b0:	00000000 	.word	0x00000000
 80026b4:	406ae000 	.word	0x406ae000
 80026b8:	bca9691a 	.word	0xbca9691a
 80026bc:	406b311d 	.word	0x406b311d
 80026c0:	0800bae0 	.word	0x0800bae0
 80026c4:	20000210 	.word	0x20000210
 80026c8:	0800bae4 	.word	0x0800bae4
 80026cc:	20000290 	.word	0x20000290
 80026d0:	20000294 	.word	0x20000294
 80026d4:	20000288 	.word	0x20000288
 80026d8:	200000f0 	.word	0x200000f0
 80026dc:	40020000 	.word	0x40020000
 80026e0:	200001c8 	.word	0x200001c8
 80026e4:	3ff00000 	.word	0x3ff00000
 80026e8:	bff00000 	.word	0xbff00000

080026ec <center>:


void center(){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3,"C11",3,0xFF);
 80026f0:	23ff      	movs	r3, #255	; 0xff
 80026f2:	2203      	movs	r2, #3
 80026f4:	490a      	ldr	r1, [pc, #40]	; (8002720 <center+0x34>)
 80026f6:	480b      	ldr	r0, [pc, #44]	; (8002724 <center+0x38>)
 80026f8:	f003 fea1 	bl	800643e <HAL_UART_Transmit>
	//OLED_ShowString(10,10,"           ");
	  OLED_ShowString(10,10,"Center\0");
 80026fc:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <center+0x3c>)
 80026fe:	210a      	movs	r1, #10
 8002700:	200a      	movs	r0, #10
 8002702:	f007 fe97 	bl	800a434 <OLED_ShowString>
	  htim1.Instance->CCR4 = 151;
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <center+0x40>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2297      	movs	r2, #151	; 0x97
 800270c:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_UART_Transmit(&huart3,"S11",3,0xFF);
 800270e:	23ff      	movs	r3, #255	; 0xff
 8002710:	2203      	movs	r2, #3
 8002712:	4907      	ldr	r1, [pc, #28]	; (8002730 <center+0x44>)
 8002714:	4803      	ldr	r0, [pc, #12]	; (8002724 <center+0x38>)
 8002716:	f003 fe92 	bl	800643e <HAL_UART_Transmit>
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	0800baf0 	.word	0x0800baf0
 8002724:	20000210 	.word	0x20000210
 8002728:	0800baf4 	.word	0x0800baf4
 800272c:	200000f0 	.word	0x200000f0
 8002730:	0800ba4c 	.word	0x0800ba4c

08002734 <Left>:

void Left(int target_angle,int pwnVal){
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3,"L11",3,0xFF);
 800273e:	23ff      	movs	r3, #255	; 0xff
 8002740:	2203      	movs	r2, #3
 8002742:	4930      	ldr	r1, [pc, #192]	; (8002804 <Left+0xd0>)
 8002744:	4830      	ldr	r0, [pc, #192]	; (8002808 <Left+0xd4>)
 8002746:	f003 fe7a 	bl	800643e <HAL_UART_Transmit>
	//OLED_ShowString(10,10,"           ");
	 HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 800274a:	2200      	movs	r2, #0
 800274c:	2104      	movs	r1, #4
 800274e:	482f      	ldr	r0, [pc, #188]	; (800280c <Left+0xd8>)
 8002750:	f001 f9d2 	bl	8003af8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 8002754:	2201      	movs	r2, #1
 8002756:	2108      	movs	r1, #8
 8002758:	482c      	ldr	r0, [pc, #176]	; (800280c <Left+0xd8>)
 800275a:	f001 f9cd 	bl	8003af8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 800275e:	2201      	movs	r2, #1
 8002760:	2110      	movs	r1, #16
 8002762:	482a      	ldr	r0, [pc, #168]	; (800280c <Left+0xd8>)
 8002764:	f001 f9c8 	bl	8003af8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 8002768:	2200      	movs	r2, #0
 800276a:	2120      	movs	r1, #32
 800276c:	4827      	ldr	r0, [pc, #156]	; (800280c <Left+0xd8>)
 800276e:	f001 f9c3 	bl	8003af8 <HAL_GPIO_WritePin>

	  htim1.Instance->CCR4 = 95;
 8002772:	4b27      	ldr	r3, [pc, #156]	; (8002810 <Left+0xdc>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	225f      	movs	r2, #95	; 0x5f
 8002778:	641a      	str	r2, [r3, #64]	; 0x40
	  osDelay(500);
 800277a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800277e:	f004 ff99 	bl	80076b4 <osDelay>
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,1333);
 8002782:	4b24      	ldr	r3, [pc, #144]	; (8002814 <Left+0xe0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f240 5235 	movw	r2, #1333	; 0x535
 800278a:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwnVal);
 800278c:	4b21      	ldr	r3, [pc, #132]	; (8002814 <Left+0xe0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	639a      	str	r2, [r3, #56]	; 0x38

	 total_angle = 0;
 8002794:	4920      	ldr	r1, [pc, #128]	; (8002818 <Left+0xe4>)
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	e9c1 2300 	strd	r2, r3, [r1]

	  OLED_ShowString(10,10,"Full Left\0");
 80027a2:	4a1e      	ldr	r2, [pc, #120]	; (800281c <Left+0xe8>)
 80027a4:	210a      	movs	r1, #10
 80027a6:	200a      	movs	r0, #10
 80027a8:	f007 fe44 	bl	800a434 <OLED_ShowString>

	  while(strncmp(aRxBuffer,"L", 1) == 0){
 80027ac:	e00f      	b.n	80027ce <Left+0x9a>
		  osDelay(10);
 80027ae:	200a      	movs	r0, #10
 80027b0:	f004 ff80 	bl	80076b4 <osDelay>
		  if (total_angle >= target_angle+13){
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	330d      	adds	r3, #13
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd febb 	bl	8000534 <__aeabi_i2d>
 80027be:	4b16      	ldr	r3, [pc, #88]	; (8002818 <Left+0xe4>)
 80027c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c4:	f7fe f99c 	bl	8000b00 <__aeabi_dcmple>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d108      	bne.n	80027e0 <Left+0xac>
	  while(strncmp(aRxBuffer,"L", 1) == 0){
 80027ce:	2201      	movs	r2, #1
 80027d0:	4913      	ldr	r1, [pc, #76]	; (8002820 <Left+0xec>)
 80027d2:	4814      	ldr	r0, [pc, #80]	; (8002824 <Left+0xf0>)
 80027d4:	f008 f9af 	bl	800ab36 <strncmp>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0e7      	beq.n	80027ae <Left+0x7a>
 80027de:	e000      	b.n	80027e2 <Left+0xae>
			  break;
 80027e0:	bf00      	nop
		  }
	  }
	  total_angle = 0;
 80027e2:	490d      	ldr	r1, [pc, #52]	; (8002818 <Left+0xe4>)
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	e9c1 2300 	strd	r2, r3, [r1]
	  htim1.Instance->CCR4 = 151;
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <Left+0xdc>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2297      	movs	r2, #151	; 0x97
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40
	  //osDelay(10);
	  stop();
 80027f8:	f7ff fd78 	bl	80022ec <stop>
}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	0800bafc 	.word	0x0800bafc
 8002808:	20000210 	.word	0x20000210
 800280c:	40020000 	.word	0x40020000
 8002810:	200000f0 	.word	0x200000f0
 8002814:	200001c8 	.word	0x200001c8
 8002818:	20000288 	.word	0x20000288
 800281c:	0800bb00 	.word	0x0800bb00
 8002820:	0800ba54 	.word	0x0800ba54
 8002824:	20000000 	.word	0x20000000

08002828 <back_Left>:

void back_Left(int target_angle,int pwnVal){
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3,"K11",3,0xFF);
 8002832:	23ff      	movs	r3, #255	; 0xff
 8002834:	2203      	movs	r2, #3
 8002836:	4930      	ldr	r1, [pc, #192]	; (80028f8 <back_Left+0xd0>)
 8002838:	4830      	ldr	r0, [pc, #192]	; (80028fc <back_Left+0xd4>)
 800283a:	f003 fe00 	bl	800643e <HAL_UART_Transmit>
	//OLED_ShowString(10,10,"           ");
	 HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 800283e:	2201      	movs	r2, #1
 8002840:	2104      	movs	r1, #4
 8002842:	482f      	ldr	r0, [pc, #188]	; (8002900 <back_Left+0xd8>)
 8002844:	f001 f958 	bl	8003af8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 8002848:	2200      	movs	r2, #0
 800284a:	2108      	movs	r1, #8
 800284c:	482c      	ldr	r0, [pc, #176]	; (8002900 <back_Left+0xd8>)
 800284e:	f001 f953 	bl	8003af8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
 8002852:	2200      	movs	r2, #0
 8002854:	2110      	movs	r1, #16
 8002856:	482a      	ldr	r0, [pc, #168]	; (8002900 <back_Left+0xd8>)
 8002858:	f001 f94e 	bl	8003af8 <HAL_GPIO_WritePin>
	  htim1.Instance->CCR4 = 95;
 800285c:	4b29      	ldr	r3, [pc, #164]	; (8002904 <back_Left+0xdc>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	225f      	movs	r2, #95	; 0x5f
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
	  osDelay(500);
 8002864:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002868:	f004 ff24 	bl	80076b4 <osDelay>
		 HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
 800286c:	2201      	movs	r2, #1
 800286e:	2120      	movs	r1, #32
 8002870:	4823      	ldr	r0, [pc, #140]	; (8002900 <back_Left+0xd8>)
 8002872:	f001 f941 	bl	8003af8 <HAL_GPIO_WritePin>
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,1333);
 8002876:	4b24      	ldr	r3, [pc, #144]	; (8002908 <back_Left+0xe0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f240 5235 	movw	r2, #1333	; 0x535
 800287e:	635a      	str	r2, [r3, #52]	; 0x34

	 total_angle = 0;
 8002880:	4922      	ldr	r1, [pc, #136]	; (800290c <back_Left+0xe4>)
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	e9c1 2300 	strd	r2, r3, [r1]
	 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwnVal);
 800288e:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <back_Left+0xe0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	639a      	str	r2, [r3, #56]	; 0x38
	  OLED_ShowString(10,10,"Full Left\0");
 8002896:	4a1e      	ldr	r2, [pc, #120]	; (8002910 <back_Left+0xe8>)
 8002898:	210a      	movs	r1, #10
 800289a:	200a      	movs	r0, #10
 800289c:	f007 fdca 	bl	800a434 <OLED_ShowString>

	  while(strncmp(aRxBuffer,"K", 1) == 0){
 80028a0:	e00f      	b.n	80028c2 <back_Left+0x9a>
		  osDelay(10);
 80028a2:	200a      	movs	r0, #10
 80028a4:	f004 ff06 	bl	80076b4 <osDelay>
		  if (total_angle <= target_angle-13){
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3b0d      	subs	r3, #13
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fd fe41 	bl	8000534 <__aeabi_i2d>
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <back_Left+0xe4>)
 80028b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b8:	f7fe f92c 	bl	8000b14 <__aeabi_dcmpge>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d108      	bne.n	80028d4 <back_Left+0xac>
	  while(strncmp(aRxBuffer,"K", 1) == 0){
 80028c2:	2201      	movs	r2, #1
 80028c4:	4913      	ldr	r1, [pc, #76]	; (8002914 <back_Left+0xec>)
 80028c6:	4814      	ldr	r0, [pc, #80]	; (8002918 <back_Left+0xf0>)
 80028c8:	f008 f935 	bl	800ab36 <strncmp>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0e7      	beq.n	80028a2 <back_Left+0x7a>
 80028d2:	e000      	b.n	80028d6 <back_Left+0xae>
			  break;
 80028d4:	bf00      	nop
		  }
	  }
	  total_angle = 0;
 80028d6:	490d      	ldr	r1, [pc, #52]	; (800290c <back_Left+0xe4>)
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	e9c1 2300 	strd	r2, r3, [r1]
	  htim1.Instance->CCR4 = 151;
 80028e4:	4b07      	ldr	r3, [pc, #28]	; (8002904 <back_Left+0xdc>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2297      	movs	r2, #151	; 0x97
 80028ea:	641a      	str	r2, [r3, #64]	; 0x40
	  //osDelay(10);
	  stop();
 80028ec:	f7ff fcfe 	bl	80022ec <stop>
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	0800bb0c 	.word	0x0800bb0c
 80028fc:	20000210 	.word	0x20000210
 8002900:	40020000 	.word	0x40020000
 8002904:	200000f0 	.word	0x200000f0
 8002908:	200001c8 	.word	0x200001c8
 800290c:	20000288 	.word	0x20000288
 8002910:	0800bb00 	.word	0x0800bb00
 8002914:	0800ba5c 	.word	0x0800ba5c
 8002918:	20000000 	.word	0x20000000

0800291c <halfLeft>:
	//OLED_ShowString(10,10,"           ");
	  OLED_ShowString(10,10,"Full Left\0");
	  htim1.Instance->CCR4 = 100;
}

void halfLeft(){
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3,"L22",3,0xFF);
 8002920:	23ff      	movs	r3, #255	; 0xff
 8002922:	2203      	movs	r2, #3
 8002924:	4907      	ldr	r1, [pc, #28]	; (8002944 <halfLeft+0x28>)
 8002926:	4808      	ldr	r0, [pc, #32]	; (8002948 <halfLeft+0x2c>)
 8002928:	f003 fd89 	bl	800643e <HAL_UART_Transmit>
	//OLED_ShowString(10,10,"           ");
	  OLED_ShowString(10,10,"Half Left\0");
 800292c:	4a07      	ldr	r2, [pc, #28]	; (800294c <halfLeft+0x30>)
 800292e:	210a      	movs	r1, #10
 8002930:	200a      	movs	r0, #10
 8002932:	f007 fd7f 	bl	800a434 <OLED_ShowString>
	  htim1.Instance->CCR4 = 125;
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <halfLeft+0x34>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	227d      	movs	r2, #125	; 0x7d
 800293c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	0800bb10 	.word	0x0800bb10
 8002948:	20000210 	.word	0x20000210
 800294c:	0800bb14 	.word	0x0800bb14
 8002950:	200000f0 	.word	0x200000f0

08002954 <Right>:

void Right(int target_angle,int pwnVal){
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3,"R11",3,0xFF);
 800295e:	23ff      	movs	r3, #255	; 0xff
 8002960:	2203      	movs	r2, #3
 8002962:	4930      	ldr	r1, [pc, #192]	; (8002a24 <Right+0xd0>)
 8002964:	4830      	ldr	r0, [pc, #192]	; (8002a28 <Right+0xd4>)
 8002966:	f003 fd6a 	bl	800643e <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 800296a:	2201      	movs	r2, #1
 800296c:	2108      	movs	r1, #8
 800296e:	482f      	ldr	r0, [pc, #188]	; (8002a2c <Right+0xd8>)
 8002970:	f001 f8c2 	bl	8003af8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 8002974:	2200      	movs	r2, #0
 8002976:	2104      	movs	r1, #4
 8002978:	482c      	ldr	r0, [pc, #176]	; (8002a2c <Right+0xd8>)
 800297a:	f001 f8bd 	bl	8003af8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 800297e:	2200      	movs	r2, #0
 8002980:	2120      	movs	r1, #32
 8002982:	482a      	ldr	r0, [pc, #168]	; (8002a2c <Right+0xd8>)
 8002984:	f001 f8b8 	bl	8003af8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 8002988:	2201      	movs	r2, #1
 800298a:	2110      	movs	r1, #16
 800298c:	4827      	ldr	r0, [pc, #156]	; (8002a2c <Right+0xd8>)
 800298e:	f001 f8b3 	bl	8003af8 <HAL_GPIO_WritePin>
		  htim1.Instance->CCR4 = 235;
 8002992:	4b27      	ldr	r3, [pc, #156]	; (8002a30 <Right+0xdc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	22eb      	movs	r2, #235	; 0xeb
 8002998:	641a      	str	r2, [r3, #64]	; 0x40
		  osDelay(500);
 800299a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800299e:	f004 fe89 	bl	80076b4 <osDelay>
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwnVal);
 80029a2:	4b24      	ldr	r3, [pc, #144]	; (8002a34 <Right+0xe0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,1333);
 80029aa:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <Right+0xe0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f240 5235 	movw	r2, #1333	; 0x535
 80029b2:	639a      	str	r2, [r3, #56]	; 0x38
		  OLED_ShowString(10,10,"Right\0");
 80029b4:	4a20      	ldr	r2, [pc, #128]	; (8002a38 <Right+0xe4>)
 80029b6:	210a      	movs	r1, #10
 80029b8:	200a      	movs	r0, #10
 80029ba:	f007 fd3b 	bl	800a434 <OLED_ShowString>
		  total_angle = 0;
 80029be:	491f      	ldr	r1, [pc, #124]	; (8002a3c <Right+0xe8>)
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	e9c1 2300 	strd	r2, r3, [r1]

		  while(strncmp(aRxBuffer,"R",1)==0){
 80029cc:	e00f      	b.n	80029ee <Right+0x9a>
			  osDelay(10);
 80029ce:	200a      	movs	r0, #10
 80029d0:	f004 fe70 	bl	80076b4 <osDelay>
			  if (total_angle <= target_angle-9){
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b09      	subs	r3, #9
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fdab 	bl	8000534 <__aeabi_i2d>
 80029de:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <Right+0xe8>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f7fe f896 	bl	8000b14 <__aeabi_dcmpge>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d108      	bne.n	8002a00 <Right+0xac>
		  while(strncmp(aRxBuffer,"R",1)==0){
 80029ee:	2201      	movs	r2, #1
 80029f0:	4913      	ldr	r1, [pc, #76]	; (8002a40 <Right+0xec>)
 80029f2:	4814      	ldr	r0, [pc, #80]	; (8002a44 <Right+0xf0>)
 80029f4:	f008 f89f 	bl	800ab36 <strncmp>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0e7      	beq.n	80029ce <Right+0x7a>
 80029fe:	e000      	b.n	8002a02 <Right+0xae>
				  	 break;
 8002a00:	bf00      	nop
			  }
		  }
		  total_angle = 0;
 8002a02:	490e      	ldr	r1, [pc, #56]	; (8002a3c <Right+0xe8>)
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	e9c1 2300 	strd	r2, r3, [r1]
		  htim1.Instance->CCR4 = 151;
 8002a10:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <Right+0xdc>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2297      	movs	r2, #151	; 0x97
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40
		  //osDelay(10);
		  stop();
 8002a18:	f7ff fc68 	bl	80022ec <stop>
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	0800bb20 	.word	0x0800bb20
 8002a28:	20000210 	.word	0x20000210
 8002a2c:	40020000 	.word	0x40020000
 8002a30:	200000f0 	.word	0x200000f0
 8002a34:	200001c8 	.word	0x200001c8
 8002a38:	0800bb24 	.word	0x0800bb24
 8002a3c:	20000288 	.word	0x20000288
 8002a40:	0800ba40 	.word	0x0800ba40
 8002a44:	20000000 	.word	0x20000000

08002a48 <back_Right>:
void back_Right(int target_angle,int pwnVal){
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3,"E11",3,0xFF);
 8002a52:	23ff      	movs	r3, #255	; 0xff
 8002a54:	2203      	movs	r2, #3
 8002a56:	4930      	ldr	r1, [pc, #192]	; (8002b18 <back_Right+0xd0>)
 8002a58:	4830      	ldr	r0, [pc, #192]	; (8002b1c <back_Right+0xd4>)
 8002a5a:	f003 fcf0 	bl	800643e <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2108      	movs	r1, #8
 8002a62:	482f      	ldr	r0, [pc, #188]	; (8002b20 <back_Right+0xd8>)
 8002a64:	f001 f848 	bl	8003af8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 8002a68:	2201      	movs	r2, #1
 8002a6a:	2104      	movs	r1, #4
 8002a6c:	482c      	ldr	r0, [pc, #176]	; (8002b20 <back_Right+0xd8>)
 8002a6e:	f001 f843 	bl	8003af8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
 8002a72:	2201      	movs	r2, #1
 8002a74:	2120      	movs	r1, #32
 8002a76:	482a      	ldr	r0, [pc, #168]	; (8002b20 <back_Right+0xd8>)
 8002a78:	f001 f83e 	bl	8003af8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2110      	movs	r1, #16
 8002a80:	4827      	ldr	r0, [pc, #156]	; (8002b20 <back_Right+0xd8>)
 8002a82:	f001 f839 	bl	8003af8 <HAL_GPIO_WritePin>

		  htim1.Instance->CCR4 = 235;
 8002a86:	4b27      	ldr	r3, [pc, #156]	; (8002b24 <back_Right+0xdc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	22eb      	movs	r2, #235	; 0xeb
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
		  osDelay(500);
 8002a8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a92:	f004 fe0f 	bl	80076b4 <osDelay>
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwnVal);
 8002a96:	4b24      	ldr	r3, [pc, #144]	; (8002b28 <back_Right+0xe0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,1333);
 8002a9e:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <back_Right+0xe0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f240 5235 	movw	r2, #1333	; 0x535
 8002aa6:	639a      	str	r2, [r3, #56]	; 0x38
		  OLED_ShowString(10,10,"Back Right\0");
 8002aa8:	4a20      	ldr	r2, [pc, #128]	; (8002b2c <back_Right+0xe4>)
 8002aaa:	210a      	movs	r1, #10
 8002aac:	200a      	movs	r0, #10
 8002aae:	f007 fcc1 	bl	800a434 <OLED_ShowString>
		  total_angle = 0;
 8002ab2:	491f      	ldr	r1, [pc, #124]	; (8002b30 <back_Right+0xe8>)
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	e9c1 2300 	strd	r2, r3, [r1]

		  while(strncmp(aRxBuffer,"E",1)==0){
 8002ac0:	e00f      	b.n	8002ae2 <back_Right+0x9a>
			  osDelay(10);
 8002ac2:	200a      	movs	r0, #10
 8002ac4:	f004 fdf6 	bl	80076b4 <osDelay>
			  if (total_angle >= target_angle+14){
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	330e      	adds	r3, #14
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fd fd31 	bl	8000534 <__aeabi_i2d>
 8002ad2:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <back_Right+0xe8>)
 8002ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad8:	f7fe f812 	bl	8000b00 <__aeabi_dcmple>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d108      	bne.n	8002af4 <back_Right+0xac>
		  while(strncmp(aRxBuffer,"E",1)==0){
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4913      	ldr	r1, [pc, #76]	; (8002b34 <back_Right+0xec>)
 8002ae6:	4814      	ldr	r0, [pc, #80]	; (8002b38 <back_Right+0xf0>)
 8002ae8:	f008 f825 	bl	800ab36 <strncmp>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0e7      	beq.n	8002ac2 <back_Right+0x7a>
 8002af2:	e000      	b.n	8002af6 <back_Right+0xae>
				  break;
 8002af4:	bf00      	nop

			  }
		  }
		  total_angle = 0;
 8002af6:	490e      	ldr	r1, [pc, #56]	; (8002b30 <back_Right+0xe8>)
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	e9c1 2300 	strd	r2, r3, [r1]
		  htim1.Instance->CCR4 = 151;
 8002b04:	4b07      	ldr	r3, [pc, #28]	; (8002b24 <back_Right+0xdc>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2297      	movs	r2, #151	; 0x97
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40
		  //osDelay(10);
		  stop();
 8002b0c:	f7ff fbee 	bl	80022ec <stop>
}
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	0800bb2c 	.word	0x0800bb2c
 8002b1c:	20000210 	.word	0x20000210
 8002b20:	40020000 	.word	0x40020000
 8002b24:	200000f0 	.word	0x200000f0
 8002b28:	200001c8 	.word	0x200001c8
 8002b2c:	0800bb30 	.word	0x0800bb30
 8002b30:	20000288 	.word	0x20000288
 8002b34:	0800ba50 	.word	0x0800ba50
 8002b38:	20000000 	.word	0x20000000

08002b3c <halfRight>:
	//OLED_ShowString(10,10,"           ");
	  OLED_ShowString(10,10,"Full Right\0");
	  htim1.Instance->CCR4 = 200;
}

void halfRight(){
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3,"R22",3,0xFF);
 8002b40:	23ff      	movs	r3, #255	; 0xff
 8002b42:	2203      	movs	r2, #3
 8002b44:	4907      	ldr	r1, [pc, #28]	; (8002b64 <halfRight+0x28>)
 8002b46:	4808      	ldr	r0, [pc, #32]	; (8002b68 <halfRight+0x2c>)
 8002b48:	f003 fc79 	bl	800643e <HAL_UART_Transmit>
	//OLED_ShowString(10,10,"           ");
	  OLED_ShowString(10,10,"Half Right\0");
 8002b4c:	4a07      	ldr	r2, [pc, #28]	; (8002b6c <halfRight+0x30>)
 8002b4e:	210a      	movs	r1, #10
 8002b50:	200a      	movs	r0, #10
 8002b52:	f007 fc6f 	bl	800a434 <OLED_ShowString>
	  htim1.Instance->CCR4 = 175;
 8002b56:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <halfRight+0x34>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	22af      	movs	r2, #175	; 0xaf
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	0800bb48 	.word	0x0800bb48
 8002b68:	20000210 	.word	0x20000210
 8002b6c:	0800bb4c 	.word	0x0800bb4c
 8002b70:	200000f0 	.word	0x200000f0

08002b74 <show>:



/* USER CODE END Header_show */
void show(void *argument)
{
 8002b74:	b490      	push	{r4, r7}
 8002b76:	b08c      	sub	sp, #48	; 0x30
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN show */
	uint8_t hello2[20] = "Hello World!\0";
 8002b7c:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <show+0x20>)
 8002b7e:	f107 041c 	add.w	r4, r7, #28
 8002b82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b84:	c407      	stmia	r4!, {r0, r1, r2}
 8002b86:	8023      	strh	r3, [r4, #0]
 8002b88:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	809a      	strh	r2, [r3, #4]
	uint8_t testing[20];
  /* Infinite loop */
  for(;;)
 8002b92:	e7fe      	b.n	8002b92 <show+0x1e>
 8002b94:	0800bb58 	.word	0x0800bb58

08002b98 <GyroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GyroTask */
void GyroTask(void *argument)
{
 8002b98:	b5b0      	push	{r4, r5, r7, lr}
 8002b9a:	b08a      	sub	sp, #40	; 0x28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GyroTask */
	uint8_t val[2] = {0,0};
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	83bb      	strh	r3, [r7, #28]

	 char hellox[20];
	 int16_t angular_speed = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	847b      	strh	r3, [r7, #34]	; 0x22



	 uint32_t tick = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
	 gyroInit();
 8002bac:	f7fe f9c0 	bl	8000f30 <gyroInit>
	 int dir;
	 int16_t offset = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	843b      	strh	r3, [r7, #32]
	 tick = HAL_GetTick();
 8002bb4:	f000 fc18 	bl	80033e8 <HAL_GetTick>
 8002bb8:	6278      	str	r0, [r7, #36]	; 0x24
	 osDelayUntil(10);
 8002bba:	200a      	movs	r0, #10
 8002bbc:	f004 fd95 	bl	80076ea <osDelayUntil>

  /* Infinite loop */
  for(;;)
  {
      osDelayUntil(10);
 8002bc0:	200a      	movs	r0, #10
 8002bc2:	f004 fd92 	bl	80076ea <osDelayUntil>

      if(HAL_GetTick() - tick >= 100){
 8002bc6:	f000 fc0f 	bl	80033e8 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b63      	cmp	r3, #99	; 0x63
 8002bd2:	d9f5      	bls.n	8002bc0 <GyroTask+0x28>
   readByte(0x37, val);
 8002bd4:	f107 031c 	add.w	r3, r7, #28
 8002bd8:	4619      	mov	r1, r3
 8002bda:	2037      	movs	r0, #55	; 0x37
 8002bdc:	f7fe f958 	bl	8000e90 <readByte>
   osDelayUntil(1);
 8002be0:	2001      	movs	r0, #1
 8002be2:	f004 fd82 	bl	80076ea <osDelayUntil>
   angular_speed = ((int16_t)((int8_t)val[0]))*256 +  (uint16_t)val[1];
 8002be6:	7f3b      	ldrb	r3, [r7, #28]
 8002be8:	b25b      	sxtb	r3, r3
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	7f7b      	ldrb	r3, [r7, #29]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	847b      	strh	r3, [r7, #34]	; 0x22
   angular_speed = (val[0] << 8) | val[1];
 8002bfa:	7f3b      	ldrb	r3, [r7, #28]
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	b21a      	sxth	r2, r3
 8002c00:	7f7b      	ldrb	r3, [r7, #29]
 8002c02:	b21b      	sxth	r3, r3
 8002c04:	4313      	orrs	r3, r2
 8002c06:	847b      	strh	r3, [r7, #34]	; 0x22





   total_angle +=(double)(angular_speed + 2)*((HAL_GetTick() - tick)/16400.0)*1.42;
 8002c08:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fd fc90 	bl	8000534 <__aeabi_i2d>
 8002c14:	4604      	mov	r4, r0
 8002c16:	460d      	mov	r5, r1
 8002c18:	f000 fbe6 	bl	80033e8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fd fc76 	bl	8000514 <__aeabi_ui2d>
 8002c28:	a333      	add	r3, pc, #204	; (adr r3, 8002cf8 <GyroTask+0x160>)
 8002c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2e:	f7fd fe15 	bl	800085c <__aeabi_ddiv>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4620      	mov	r0, r4
 8002c38:	4629      	mov	r1, r5
 8002c3a:	f7fd fce5 	bl	8000608 <__aeabi_dmul>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	4610      	mov	r0, r2
 8002c44:	4619      	mov	r1, r3
 8002c46:	a32e      	add	r3, pc, #184	; (adr r3, 8002d00 <GyroTask+0x168>)
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	f7fd fcdc 	bl	8000608 <__aeabi_dmul>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4610      	mov	r0, r2
 8002c56:	4619      	mov	r1, r3
 8002c58:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <GyroTask+0x150>)
 8002c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5e:	f7fd fb1d 	bl	800029c <__adddf3>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4920      	ldr	r1, [pc, #128]	; (8002ce8 <GyroTask+0x150>)
 8002c68:	e9c1 2300 	strd	r2, r3, [r1]

   //global_angle += (double)(angular_speed + 0.5)*((HAL_GetTick() - tick)/16400.0)*1.42;


   //prevSpeed = angular_speed;
   if(total_angle >= 720){
 8002c6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <GyroTask+0x150>)
 8002c6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <GyroTask+0x154>)
 8002c78:	f7fd ff4c 	bl	8000b14 <__aeabi_dcmpge>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d006      	beq.n	8002c90 <GyroTask+0xf8>
    total_angle = 0;
 8002c82:	4919      	ldr	r1, [pc, #100]	; (8002ce8 <GyroTask+0x150>)
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	e9c1 2300 	strd	r2, r3, [r1]
   }
   if(total_angle <= -720){
 8002c90:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <GyroTask+0x150>)
 8002c92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <GyroTask+0x158>)
 8002c9c:	f7fd ff30 	bl	8000b00 <__aeabi_dcmple>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d006      	beq.n	8002cb4 <GyroTask+0x11c>
    total_angle = 0;
 8002ca6:	4910      	ldr	r1, [pc, #64]	; (8002ce8 <GyroTask+0x150>)
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	e9c1 2300 	strd	r2, r3, [r1]
   }
   sprintf(hellox, "angle %5d \0", (int)(total_angle));
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <GyroTask+0x150>)
 8002cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f7fd ff3d 	bl	8000b3c <__aeabi_d2iz>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	f107 0308 	add.w	r3, r7, #8
 8002cc8:	490a      	ldr	r1, [pc, #40]	; (8002cf4 <GyroTask+0x15c>)
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f007 fed0 	bl	800aa70 <siprintf>
   OLED_ShowString(10,30, hellox);
 8002cd0:	f107 0308 	add.w	r3, r7, #8
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	211e      	movs	r1, #30
 8002cd8:	200a      	movs	r0, #10
 8002cda:	f007 fbab 	bl	800a434 <OLED_ShowString>
   //OLED_Refresh_Gram();
   tick = HAL_GetTick();
 8002cde:	f000 fb83 	bl	80033e8 <HAL_GetTick>
 8002ce2:	6278      	str	r0, [r7, #36]	; 0x24
      osDelayUntil(10);
 8002ce4:	e76c      	b.n	8002bc0 <GyroTask+0x28>
 8002ce6:	bf00      	nop
 8002ce8:	20000288 	.word	0x20000288
 8002cec:	40868000 	.word	0x40868000
 8002cf0:	c0868000 	.word	0xc0868000
 8002cf4:	0800bb6c 	.word	0x0800bb6c
 8002cf8:	00000000 	.word	0x00000000
 8002cfc:	40d00400 	.word	0x40d00400
 8002d00:	eb851eb8 	.word	0xeb851eb8
 8002d04:	3ff6b851 	.word	0x3ff6b851

08002d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d0c:	b672      	cpsid	i
}
 8002d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d10:	e7fe      	b.n	8002d10 <Error_Handler+0x8>
	...

08002d14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <HAL_MspInit+0x54>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	4a11      	ldr	r2, [pc, #68]	; (8002d68 <HAL_MspInit+0x54>)
 8002d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d28:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2a:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <HAL_MspInit+0x54>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d32:	607b      	str	r3, [r7, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	603b      	str	r3, [r7, #0]
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_MspInit+0x54>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <HAL_MspInit+0x54>)
 8002d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d44:	6413      	str	r3, [r2, #64]	; 0x40
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_MspInit+0x54>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d52:	2200      	movs	r2, #0
 8002d54:	210f      	movs	r1, #15
 8002d56:	f06f 0001 	mvn.w	r0, #1
 8002d5a:	f000 fc50 	bl	80035fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800

08002d6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a19      	ldr	r2, [pc, #100]	; (8002df0 <HAL_I2C_MspInit+0x84>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d12c      	bne.n	8002de8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <HAL_I2C_MspInit+0x88>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a17      	ldr	r2, [pc, #92]	; (8002df4 <HAL_I2C_MspInit+0x88>)
 8002d98:	f043 0302 	orr.w	r3, r3, #2
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <HAL_I2C_MspInit+0x88>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002daa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002db0:	2312      	movs	r3, #18
 8002db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db8:	2303      	movs	r3, #3
 8002dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc0:	f107 0314 	add.w	r3, r7, #20
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	480c      	ldr	r0, [pc, #48]	; (8002df8 <HAL_I2C_MspInit+0x8c>)
 8002dc8:	f000 fce2 	bl	8003790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <HAL_I2C_MspInit+0x88>)
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	4a07      	ldr	r2, [pc, #28]	; (8002df4 <HAL_I2C_MspInit+0x88>)
 8002dd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dda:	6413      	str	r3, [r2, #64]	; 0x40
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <HAL_I2C_MspInit+0x88>)
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002de8:	bf00      	nop
 8002dea:	3728      	adds	r7, #40	; 0x28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40005400 	.word	0x40005400
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40020400 	.word	0x40020400

08002dfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a23      	ldr	r2, [pc, #140]	; (8002ea8 <HAL_TIM_Base_MspInit+0xac>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d10e      	bne.n	8002e3c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	4b22      	ldr	r3, [pc, #136]	; (8002eac <HAL_TIM_Base_MspInit+0xb0>)
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	4a21      	ldr	r2, [pc, #132]	; (8002eac <HAL_TIM_Base_MspInit+0xb0>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e2e:	4b1f      	ldr	r3, [pc, #124]	; (8002eac <HAL_TIM_Base_MspInit+0xb0>)
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002e3a:	e031      	b.n	8002ea0 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM8)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a1b      	ldr	r2, [pc, #108]	; (8002eb0 <HAL_TIM_Base_MspInit+0xb4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d12c      	bne.n	8002ea0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	4b18      	ldr	r3, [pc, #96]	; (8002eac <HAL_TIM_Base_MspInit+0xb0>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	4a17      	ldr	r2, [pc, #92]	; (8002eac <HAL_TIM_Base_MspInit+0xb0>)
 8002e50:	f043 0302 	orr.w	r3, r3, #2
 8002e54:	6453      	str	r3, [r2, #68]	; 0x44
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <HAL_TIM_Base_MspInit+0xb0>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	4b11      	ldr	r3, [pc, #68]	; (8002eac <HAL_TIM_Base_MspInit+0xb0>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a10      	ldr	r2, [pc, #64]	; (8002eac <HAL_TIM_Base_MspInit+0xb0>)
 8002e6c:	f043 0304 	orr.w	r3, r3, #4
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <HAL_TIM_Base_MspInit+0xb0>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin|PWMC_Pin;
 8002e7e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e84:	2302      	movs	r3, #2
 8002e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002e90:	2303      	movs	r3, #3
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4806      	ldr	r0, [pc, #24]	; (8002eb4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e9c:	f000 fc78 	bl	8003790 <HAL_GPIO_Init>
}
 8002ea0:	bf00      	nop
 8002ea2:	3728      	adds	r7, #40	; 0x28
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40010000 	.word	0x40010000
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40010400 	.word	0x40010400
 8002eb4:	40020800 	.word	0x40020800

08002eb8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08c      	sub	sp, #48	; 0x30
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	f107 031c 	add.w	r3, r7, #28
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed8:	d14b      	bne.n	8002f72 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	4b3f      	ldr	r3, [pc, #252]	; (8002fdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	4a3e      	ldr	r2, [pc, #248]	; (8002fdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eea:	4b3c      	ldr	r3, [pc, #240]	; (8002fdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	61bb      	str	r3, [r7, #24]
 8002ef4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	4b38      	ldr	r3, [pc, #224]	; (8002fdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	4a37      	ldr	r2, [pc, #220]	; (8002fdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6313      	str	r3, [r2, #48]	; 0x30
 8002f06:	4b35      	ldr	r3, [pc, #212]	; (8002fdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	4b31      	ldr	r3, [pc, #196]	; (8002fdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4a30      	ldr	r2, [pc, #192]	; (8002fdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f1c:	f043 0302 	orr.w	r3, r3, #2
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
 8002f22:	4b2e      	ldr	r3, [pc, #184]	; (8002fdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f34:	2302      	movs	r3, #2
 8002f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f40:	2301      	movs	r3, #1
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f44:	f107 031c 	add.w	r3, r7, #28
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4825      	ldr	r0, [pc, #148]	; (8002fe0 <HAL_TIM_Encoder_MspInit+0x128>)
 8002f4c:	f000 fc20 	bl	8003790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f50:	2308      	movs	r3, #8
 8002f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f54:	2302      	movs	r3, #2
 8002f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f60:	2301      	movs	r3, #1
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f64:	f107 031c 	add.w	r3, r7, #28
 8002f68:	4619      	mov	r1, r3
 8002f6a:	481e      	ldr	r0, [pc, #120]	; (8002fe4 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002f6c:	f000 fc10 	bl	8003790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f70:	e030      	b.n	8002fd4 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a1c      	ldr	r2, [pc, #112]	; (8002fe8 <HAL_TIM_Encoder_MspInit+0x130>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d12b      	bne.n	8002fd4 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	4a15      	ldr	r2, [pc, #84]	; (8002fdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f86:	f043 0302 	orr.w	r3, r3, #2
 8002f8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8c:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60bb      	str	r3, [r7, #8]
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	4a0e      	ldr	r2, [pc, #56]	; (8002fdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fb4:	23c0      	movs	r3, #192	; 0xc0
 8002fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc8:	f107 031c 	add.w	r3, r7, #28
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4804      	ldr	r0, [pc, #16]	; (8002fe0 <HAL_TIM_Encoder_MspInit+0x128>)
 8002fd0:	f000 fbde 	bl	8003790 <HAL_GPIO_Init>
}
 8002fd4:	bf00      	nop
 8002fd6:	3730      	adds	r7, #48	; 0x30
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	40020000 	.word	0x40020000
 8002fe4:	40020400 	.word	0x40020400
 8002fe8:	40000400 	.word	0x40000400

08002fec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff4:	f107 030c 	add.w	r3, r7, #12
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a12      	ldr	r2, [pc, #72]	; (8003054 <HAL_TIM_MspPostInit+0x68>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d11e      	bne.n	800304c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <HAL_TIM_MspPostInit+0x6c>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	4a10      	ldr	r2, [pc, #64]	; (8003058 <HAL_TIM_MspPostInit+0x6c>)
 8003018:	f043 0310 	orr.w	r3, r3, #16
 800301c:	6313      	str	r3, [r2, #48]	; 0x30
 800301e:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <HAL_TIM_MspPostInit+0x6c>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800302a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800302e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003030:	2302      	movs	r3, #2
 8003032:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003038:	2300      	movs	r3, #0
 800303a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800303c:	2301      	movs	r3, #1
 800303e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003040:	f107 030c 	add.w	r3, r7, #12
 8003044:	4619      	mov	r1, r3
 8003046:	4805      	ldr	r0, [pc, #20]	; (800305c <HAL_TIM_MspPostInit+0x70>)
 8003048:	f000 fba2 	bl	8003790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800304c:	bf00      	nop
 800304e:	3720      	adds	r7, #32
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40010000 	.word	0x40010000
 8003058:	40023800 	.word	0x40023800
 800305c:	40021000 	.word	0x40021000

08003060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08a      	sub	sp, #40	; 0x28
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	605a      	str	r2, [r3, #4]
 8003072:	609a      	str	r2, [r3, #8]
 8003074:	60da      	str	r2, [r3, #12]
 8003076:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1d      	ldr	r2, [pc, #116]	; (80030f4 <HAL_UART_MspInit+0x94>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d134      	bne.n	80030ec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	4b1c      	ldr	r3, [pc, #112]	; (80030f8 <HAL_UART_MspInit+0x98>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	4a1b      	ldr	r2, [pc, #108]	; (80030f8 <HAL_UART_MspInit+0x98>)
 800308c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003090:	6413      	str	r3, [r2, #64]	; 0x40
 8003092:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_UART_MspInit+0x98>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_UART_MspInit+0x98>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	4a14      	ldr	r2, [pc, #80]	; (80030f8 <HAL_UART_MspInit+0x98>)
 80030a8:	f043 0304 	orr.w	r3, r3, #4
 80030ac:	6313      	str	r3, [r2, #48]	; 0x30
 80030ae:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_UART_MspInit+0x98>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80030ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80030be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c0:	2302      	movs	r3, #2
 80030c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030c8:	2302      	movs	r3, #2
 80030ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030cc:	2307      	movs	r3, #7
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030d0:	f107 0314 	add.w	r3, r7, #20
 80030d4:	4619      	mov	r1, r3
 80030d6:	4809      	ldr	r0, [pc, #36]	; (80030fc <HAL_UART_MspInit+0x9c>)
 80030d8:	f000 fb5a 	bl	8003790 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80030dc:	2200      	movs	r2, #0
 80030de:	2105      	movs	r1, #5
 80030e0:	2027      	movs	r0, #39	; 0x27
 80030e2:	f000 fa8c 	bl	80035fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80030e6:	2027      	movs	r0, #39	; 0x27
 80030e8:	f000 faa5 	bl	8003636 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80030ec:	bf00      	nop
 80030ee:	3728      	adds	r7, #40	; 0x28
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40004800 	.word	0x40004800
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40020800 	.word	0x40020800

08003100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003104:	e7fe      	b.n	8003104 <NMI_Handler+0x4>

08003106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800310a:	e7fe      	b.n	800310a <HardFault_Handler+0x4>

0800310c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003110:	e7fe      	b.n	8003110 <MemManage_Handler+0x4>

08003112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003116:	e7fe      	b.n	8003116 <BusFault_Handler+0x4>

08003118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800311c:	e7fe      	b.n	800311c <UsageFault_Handler+0x4>

0800311e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003130:	f000 f946 	bl	80033c0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003134:	f005 ffa0 	bl	8009078 <xTaskGetSchedulerState>
 8003138:	4603      	mov	r3, r0
 800313a:	2b01      	cmp	r3, #1
 800313c:	d001      	beq.n	8003142 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800313e:	f006 fd8b 	bl	8009c58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800314c:	4802      	ldr	r0, [pc, #8]	; (8003158 <USART3_IRQHandler+0x10>)
 800314e:	f003 fa39 	bl	80065c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000210 	.word	0x20000210

0800315c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	e00a      	b.n	8003184 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800316e:	f3af 8000 	nop.w
 8003172:	4601      	mov	r1, r0
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	60ba      	str	r2, [r7, #8]
 800317a:	b2ca      	uxtb	r2, r1
 800317c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	3301      	adds	r3, #1
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	429a      	cmp	r2, r3
 800318a:	dbf0      	blt.n	800316e <_read+0x12>
	}

return len;
 800318c:	687b      	ldr	r3, [r7, #4]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b086      	sub	sp, #24
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	e009      	b.n	80031bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	60ba      	str	r2, [r7, #8]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	3301      	adds	r3, #1
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	dbf1      	blt.n	80031a8 <_write+0x12>
	}
	return len;
 80031c4:	687b      	ldr	r3, [r7, #4]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <_close>:

int _close(int file)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
	return -1;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031f6:	605a      	str	r2, [r3, #4]
	return 0;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <_isatty>:

int _isatty(int file)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
	return 1;
 800320e:	2301      	movs	r3, #1
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
	return 0;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003240:	4a14      	ldr	r2, [pc, #80]	; (8003294 <_sbrk+0x5c>)
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <_sbrk+0x60>)
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800324c:	4b13      	ldr	r3, [pc, #76]	; (800329c <_sbrk+0x64>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003254:	4b11      	ldr	r3, [pc, #68]	; (800329c <_sbrk+0x64>)
 8003256:	4a12      	ldr	r2, [pc, #72]	; (80032a0 <_sbrk+0x68>)
 8003258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <_sbrk+0x64>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	429a      	cmp	r2, r3
 8003266:	d207      	bcs.n	8003278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003268:	f007 f9a2 	bl	800a5b0 <__errno>
 800326c:	4603      	mov	r3, r0
 800326e:	220c      	movs	r2, #12
 8003270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003272:	f04f 33ff 	mov.w	r3, #4294967295
 8003276:	e009      	b.n	800328c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <_sbrk+0x64>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800327e:	4b07      	ldr	r3, [pc, #28]	; (800329c <_sbrk+0x64>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4413      	add	r3, r2
 8003286:	4a05      	ldr	r2, [pc, #20]	; (800329c <_sbrk+0x64>)
 8003288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800328a:	68fb      	ldr	r3, [r7, #12]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20020000 	.word	0x20020000
 8003298:	00000400 	.word	0x00000400
 800329c:	200002c4 	.word	0x200002c4
 80032a0:	200050f0 	.word	0x200050f0

080032a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <SystemInit+0x20>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	4a05      	ldr	r2, [pc, #20]	; (80032c4 <SystemInit+0x20>)
 80032b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003300 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032cc:	480d      	ldr	r0, [pc, #52]	; (8003304 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032ce:	490e      	ldr	r1, [pc, #56]	; (8003308 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032d0:	4a0e      	ldr	r2, [pc, #56]	; (800330c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032d4:	e002      	b.n	80032dc <LoopCopyDataInit>

080032d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032da:	3304      	adds	r3, #4

080032dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032e0:	d3f9      	bcc.n	80032d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032e2:	4a0b      	ldr	r2, [pc, #44]	; (8003310 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032e4:	4c0b      	ldr	r4, [pc, #44]	; (8003314 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032e8:	e001      	b.n	80032ee <LoopFillZerobss>

080032ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032ec:	3204      	adds	r2, #4

080032ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032f0:	d3fb      	bcc.n	80032ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80032f2:	f7ff ffd7 	bl	80032a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032f6:	f007 fa57 	bl	800a7a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032fa:	f7fd fe5d 	bl	8000fb8 <main>
  bx  lr    
 80032fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003300:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003308:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800330c:	0800c768 	.word	0x0800c768
  ldr r2, =_sbss
 8003310:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003314:	200050ec 	.word	0x200050ec

08003318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003318:	e7fe      	b.n	8003318 <ADC_IRQHandler>
	...

0800331c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003320:	4b0e      	ldr	r3, [pc, #56]	; (800335c <HAL_Init+0x40>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a0d      	ldr	r2, [pc, #52]	; (800335c <HAL_Init+0x40>)
 8003326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800332a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800332c:	4b0b      	ldr	r3, [pc, #44]	; (800335c <HAL_Init+0x40>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a0a      	ldr	r2, [pc, #40]	; (800335c <HAL_Init+0x40>)
 8003332:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003336:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003338:	4b08      	ldr	r3, [pc, #32]	; (800335c <HAL_Init+0x40>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a07      	ldr	r2, [pc, #28]	; (800335c <HAL_Init+0x40>)
 800333e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003342:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003344:	2003      	movs	r0, #3
 8003346:	f000 f94f 	bl	80035e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800334a:	200f      	movs	r0, #15
 800334c:	f000 f808 	bl	8003360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003350:	f7ff fce0 	bl	8002d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40023c00 	.word	0x40023c00

08003360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003368:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <HAL_InitTick+0x54>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <HAL_InitTick+0x58>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	4619      	mov	r1, r3
 8003372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003376:	fbb3 f3f1 	udiv	r3, r3, r1
 800337a:	fbb2 f3f3 	udiv	r3, r2, r3
 800337e:	4618      	mov	r0, r3
 8003380:	f000 f967 	bl	8003652 <HAL_SYSTICK_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e00e      	b.n	80033ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b0f      	cmp	r3, #15
 8003392:	d80a      	bhi.n	80033aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003394:	2200      	movs	r2, #0
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	f04f 30ff 	mov.w	r0, #4294967295
 800339c:	f000 f92f 	bl	80035fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033a0:	4a06      	ldr	r2, [pc, #24]	; (80033bc <HAL_InitTick+0x5c>)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	e000      	b.n	80033ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	2000000c 	.word	0x2000000c
 80033b8:	20000014 	.word	0x20000014
 80033bc:	20000010 	.word	0x20000010

080033c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_IncTick+0x20>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_IncTick+0x24>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4413      	add	r3, r2
 80033d0:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <HAL_IncTick+0x24>)
 80033d2:	6013      	str	r3, [r2, #0]
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20000014 	.word	0x20000014
 80033e4:	200002c8 	.word	0x200002c8

080033e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return uwTick;
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <HAL_GetTick+0x14>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	200002c8 	.word	0x200002c8

08003400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003408:	f7ff ffee 	bl	80033e8 <HAL_GetTick>
 800340c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003418:	d005      	beq.n	8003426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800341a:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <HAL_Delay+0x44>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003426:	bf00      	nop
 8003428:	f7ff ffde 	bl	80033e8 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	429a      	cmp	r2, r3
 8003436:	d8f7      	bhi.n	8003428 <HAL_Delay+0x28>
  {
  }
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000014 	.word	0x20000014

08003448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <__NVIC_SetPriorityGrouping+0x44>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003464:	4013      	ands	r3, r2
 8003466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800347a:	4a04      	ldr	r2, [pc, #16]	; (800348c <__NVIC_SetPriorityGrouping+0x44>)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	60d3      	str	r3, [r2, #12]
}
 8003480:	bf00      	nop
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003494:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	0a1b      	lsrs	r3, r3, #8
 800349a:	f003 0307 	and.w	r3, r3, #7
}
 800349e:	4618      	mov	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	db0b      	blt.n	80034d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	f003 021f 	and.w	r2, r3, #31
 80034c4:	4907      	ldr	r1, [pc, #28]	; (80034e4 <__NVIC_EnableIRQ+0x38>)
 80034c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	2001      	movs	r0, #1
 80034ce:	fa00 f202 	lsl.w	r2, r0, r2
 80034d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	e000e100 	.word	0xe000e100

080034e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	6039      	str	r1, [r7, #0]
 80034f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	db0a      	blt.n	8003512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	490c      	ldr	r1, [pc, #48]	; (8003534 <__NVIC_SetPriority+0x4c>)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	0112      	lsls	r2, r2, #4
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	440b      	add	r3, r1
 800350c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003510:	e00a      	b.n	8003528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	b2da      	uxtb	r2, r3
 8003516:	4908      	ldr	r1, [pc, #32]	; (8003538 <__NVIC_SetPriority+0x50>)
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	3b04      	subs	r3, #4
 8003520:	0112      	lsls	r2, r2, #4
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	440b      	add	r3, r1
 8003526:	761a      	strb	r2, [r3, #24]
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	e000e100 	.word	0xe000e100
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800353c:	b480      	push	{r7}
 800353e:	b089      	sub	sp, #36	; 0x24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f1c3 0307 	rsb	r3, r3, #7
 8003556:	2b04      	cmp	r3, #4
 8003558:	bf28      	it	cs
 800355a:	2304      	movcs	r3, #4
 800355c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	3304      	adds	r3, #4
 8003562:	2b06      	cmp	r3, #6
 8003564:	d902      	bls.n	800356c <NVIC_EncodePriority+0x30>
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3b03      	subs	r3, #3
 800356a:	e000      	b.n	800356e <NVIC_EncodePriority+0x32>
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003570:	f04f 32ff 	mov.w	r2, #4294967295
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43da      	mvns	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	401a      	ands	r2, r3
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003584:	f04f 31ff 	mov.w	r1, #4294967295
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	43d9      	mvns	r1, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003594:	4313      	orrs	r3, r2
         );
}
 8003596:	4618      	mov	r0, r3
 8003598:	3724      	adds	r7, #36	; 0x24
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
	...

080035a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035b4:	d301      	bcc.n	80035ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035b6:	2301      	movs	r3, #1
 80035b8:	e00f      	b.n	80035da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ba:	4a0a      	ldr	r2, [pc, #40]	; (80035e4 <SysTick_Config+0x40>)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3b01      	subs	r3, #1
 80035c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035c2:	210f      	movs	r1, #15
 80035c4:	f04f 30ff 	mov.w	r0, #4294967295
 80035c8:	f7ff ff8e 	bl	80034e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <SysTick_Config+0x40>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035d2:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <SysTick_Config+0x40>)
 80035d4:	2207      	movs	r2, #7
 80035d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	e000e010 	.word	0xe000e010

080035e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff ff29 	bl	8003448 <__NVIC_SetPriorityGrouping>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035fe:	b580      	push	{r7, lr}
 8003600:	b086      	sub	sp, #24
 8003602:	af00      	add	r7, sp, #0
 8003604:	4603      	mov	r3, r0
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	607a      	str	r2, [r7, #4]
 800360a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003610:	f7ff ff3e 	bl	8003490 <__NVIC_GetPriorityGrouping>
 8003614:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	68b9      	ldr	r1, [r7, #8]
 800361a:	6978      	ldr	r0, [r7, #20]
 800361c:	f7ff ff8e 	bl	800353c <NVIC_EncodePriority>
 8003620:	4602      	mov	r2, r0
 8003622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003626:	4611      	mov	r1, r2
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff ff5d 	bl	80034e8 <__NVIC_SetPriority>
}
 800362e:	bf00      	nop
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	4603      	mov	r3, r0
 800363e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff ff31 	bl	80034ac <__NVIC_EnableIRQ>
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff ffa2 	bl	80035a4 <SysTick_Config>
 8003660:	4603      	mov	r3, r0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003676:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003678:	f7ff feb6 	bl	80033e8 <HAL_GetTick>
 800367c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d008      	beq.n	800369c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2280      	movs	r2, #128	; 0x80
 800368e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e052      	b.n	8003742 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0216 	bic.w	r2, r2, #22
 80036aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d103      	bne.n	80036cc <HAL_DMA_Abort+0x62>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d007      	beq.n	80036dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0208 	bic.w	r2, r2, #8
 80036da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0201 	bic.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036ec:	e013      	b.n	8003716 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036ee:	f7ff fe7b 	bl	80033e8 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b05      	cmp	r3, #5
 80036fa:	d90c      	bls.n	8003716 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2203      	movs	r2, #3
 8003706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e015      	b.n	8003742 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1e4      	bne.n	80036ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003728:	223f      	movs	r2, #63	; 0x3f
 800372a:	409a      	lsls	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d004      	beq.n	8003768 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2280      	movs	r2, #128	; 0x80
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e00c      	b.n	8003782 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2205      	movs	r2, #5
 800376c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0201 	bic.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003790:	b480      	push	{r7}
 8003792:	b089      	sub	sp, #36	; 0x24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	e16b      	b.n	8003a84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037ac:	2201      	movs	r2, #1
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4013      	ands	r3, r2
 80037be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	f040 815a 	bne.w	8003a7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d005      	beq.n	80037e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d130      	bne.n	8003844 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	2203      	movs	r2, #3
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4013      	ands	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4313      	orrs	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003818:	2201      	movs	r2, #1
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	091b      	lsrs	r3, r3, #4
 800382e:	f003 0201 	and.w	r2, r3, #1
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b03      	cmp	r3, #3
 800384e:	d017      	beq.n	8003880 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	2203      	movs	r2, #3
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d123      	bne.n	80038d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	08da      	lsrs	r2, r3, #3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3208      	adds	r2, #8
 8003894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	220f      	movs	r2, #15
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	08da      	lsrs	r2, r3, #3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3208      	adds	r2, #8
 80038ce:	69b9      	ldr	r1, [r7, #24]
 80038d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	2203      	movs	r2, #3
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 0203 	and.w	r2, r3, #3
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80b4 	beq.w	8003a7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	4b60      	ldr	r3, [pc, #384]	; (8003a9c <HAL_GPIO_Init+0x30c>)
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	4a5f      	ldr	r2, [pc, #380]	; (8003a9c <HAL_GPIO_Init+0x30c>)
 8003920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003924:	6453      	str	r3, [r2, #68]	; 0x44
 8003926:	4b5d      	ldr	r3, [pc, #372]	; (8003a9c <HAL_GPIO_Init+0x30c>)
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003932:	4a5b      	ldr	r2, [pc, #364]	; (8003aa0 <HAL_GPIO_Init+0x310>)
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	089b      	lsrs	r3, r3, #2
 8003938:	3302      	adds	r3, #2
 800393a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	220f      	movs	r2, #15
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43db      	mvns	r3, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4013      	ands	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a52      	ldr	r2, [pc, #328]	; (8003aa4 <HAL_GPIO_Init+0x314>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d02b      	beq.n	80039b6 <HAL_GPIO_Init+0x226>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a51      	ldr	r2, [pc, #324]	; (8003aa8 <HAL_GPIO_Init+0x318>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d025      	beq.n	80039b2 <HAL_GPIO_Init+0x222>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a50      	ldr	r2, [pc, #320]	; (8003aac <HAL_GPIO_Init+0x31c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d01f      	beq.n	80039ae <HAL_GPIO_Init+0x21e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a4f      	ldr	r2, [pc, #316]	; (8003ab0 <HAL_GPIO_Init+0x320>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d019      	beq.n	80039aa <HAL_GPIO_Init+0x21a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a4e      	ldr	r2, [pc, #312]	; (8003ab4 <HAL_GPIO_Init+0x324>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d013      	beq.n	80039a6 <HAL_GPIO_Init+0x216>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a4d      	ldr	r2, [pc, #308]	; (8003ab8 <HAL_GPIO_Init+0x328>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00d      	beq.n	80039a2 <HAL_GPIO_Init+0x212>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a4c      	ldr	r2, [pc, #304]	; (8003abc <HAL_GPIO_Init+0x32c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d007      	beq.n	800399e <HAL_GPIO_Init+0x20e>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a4b      	ldr	r2, [pc, #300]	; (8003ac0 <HAL_GPIO_Init+0x330>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d101      	bne.n	800399a <HAL_GPIO_Init+0x20a>
 8003996:	2307      	movs	r3, #7
 8003998:	e00e      	b.n	80039b8 <HAL_GPIO_Init+0x228>
 800399a:	2308      	movs	r3, #8
 800399c:	e00c      	b.n	80039b8 <HAL_GPIO_Init+0x228>
 800399e:	2306      	movs	r3, #6
 80039a0:	e00a      	b.n	80039b8 <HAL_GPIO_Init+0x228>
 80039a2:	2305      	movs	r3, #5
 80039a4:	e008      	b.n	80039b8 <HAL_GPIO_Init+0x228>
 80039a6:	2304      	movs	r3, #4
 80039a8:	e006      	b.n	80039b8 <HAL_GPIO_Init+0x228>
 80039aa:	2303      	movs	r3, #3
 80039ac:	e004      	b.n	80039b8 <HAL_GPIO_Init+0x228>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e002      	b.n	80039b8 <HAL_GPIO_Init+0x228>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <HAL_GPIO_Init+0x228>
 80039b6:	2300      	movs	r3, #0
 80039b8:	69fa      	ldr	r2, [r7, #28]
 80039ba:	f002 0203 	and.w	r2, r2, #3
 80039be:	0092      	lsls	r2, r2, #2
 80039c0:	4093      	lsls	r3, r2
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039c8:	4935      	ldr	r1, [pc, #212]	; (8003aa0 <HAL_GPIO_Init+0x310>)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	089b      	lsrs	r3, r3, #2
 80039ce:	3302      	adds	r3, #2
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039d6:	4b3b      	ldr	r3, [pc, #236]	; (8003ac4 <HAL_GPIO_Init+0x334>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039fa:	4a32      	ldr	r2, [pc, #200]	; (8003ac4 <HAL_GPIO_Init+0x334>)
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a00:	4b30      	ldr	r3, [pc, #192]	; (8003ac4 <HAL_GPIO_Init+0x334>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a24:	4a27      	ldr	r2, [pc, #156]	; (8003ac4 <HAL_GPIO_Init+0x334>)
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a2a:	4b26      	ldr	r3, [pc, #152]	; (8003ac4 <HAL_GPIO_Init+0x334>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a4e:	4a1d      	ldr	r2, [pc, #116]	; (8003ac4 <HAL_GPIO_Init+0x334>)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a54:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <HAL_GPIO_Init+0x334>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a78:	4a12      	ldr	r2, [pc, #72]	; (8003ac4 <HAL_GPIO_Init+0x334>)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	3301      	adds	r3, #1
 8003a82:	61fb      	str	r3, [r7, #28]
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b0f      	cmp	r3, #15
 8003a88:	f67f ae90 	bls.w	80037ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	bf00      	nop
 8003a90:	3724      	adds	r7, #36	; 0x24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40013800 	.word	0x40013800
 8003aa4:	40020000 	.word	0x40020000
 8003aa8:	40020400 	.word	0x40020400
 8003aac:	40020800 	.word	0x40020800
 8003ab0:	40020c00 	.word	0x40020c00
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40021400 	.word	0x40021400
 8003abc:	40021800 	.word	0x40021800
 8003ac0:	40021c00 	.word	0x40021c00
 8003ac4:	40013c00 	.word	0x40013c00

08003ac8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	887b      	ldrh	r3, [r7, #2]
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
 8003ae4:	e001      	b.n	8003aea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	807b      	strh	r3, [r7, #2]
 8003b04:	4613      	mov	r3, r2
 8003b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b08:	787b      	ldrb	r3, [r7, #1]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b0e:	887a      	ldrh	r2, [r7, #2]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b14:	e003      	b.n	8003b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b16:	887b      	ldrh	r3, [r7, #2]
 8003b18:	041a      	lsls	r2, r3, #16
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	619a      	str	r2, [r3, #24]
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b085      	sub	sp, #20
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	460b      	mov	r3, r1
 8003b34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b3c:	887a      	ldrh	r2, [r7, #2]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4013      	ands	r3, r2
 8003b42:	041a      	lsls	r2, r3, #16
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	43d9      	mvns	r1, r3
 8003b48:	887b      	ldrh	r3, [r7, #2]
 8003b4a:	400b      	ands	r3, r1
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	619a      	str	r2, [r3, #24]
}
 8003b52:	bf00      	nop
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
	...

08003b60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e12b      	b.n	8003dca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff f8f0 	bl	8002d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2224      	movs	r2, #36	; 0x24
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0201 	bic.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bc4:	f001 fbba 	bl	800533c <HAL_RCC_GetPCLK1Freq>
 8003bc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	4a81      	ldr	r2, [pc, #516]	; (8003dd4 <HAL_I2C_Init+0x274>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d807      	bhi.n	8003be4 <HAL_I2C_Init+0x84>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4a80      	ldr	r2, [pc, #512]	; (8003dd8 <HAL_I2C_Init+0x278>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	bf94      	ite	ls
 8003bdc:	2301      	movls	r3, #1
 8003bde:	2300      	movhi	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	e006      	b.n	8003bf2 <HAL_I2C_Init+0x92>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4a7d      	ldr	r2, [pc, #500]	; (8003ddc <HAL_I2C_Init+0x27c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	bf94      	ite	ls
 8003bec:	2301      	movls	r3, #1
 8003bee:	2300      	movhi	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e0e7      	b.n	8003dca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4a78      	ldr	r2, [pc, #480]	; (8003de0 <HAL_I2C_Init+0x280>)
 8003bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003c02:	0c9b      	lsrs	r3, r3, #18
 8003c04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	4a6a      	ldr	r2, [pc, #424]	; (8003dd4 <HAL_I2C_Init+0x274>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d802      	bhi.n	8003c34 <HAL_I2C_Init+0xd4>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	3301      	adds	r3, #1
 8003c32:	e009      	b.n	8003c48 <HAL_I2C_Init+0xe8>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c3a:	fb02 f303 	mul.w	r3, r2, r3
 8003c3e:	4a69      	ldr	r2, [pc, #420]	; (8003de4 <HAL_I2C_Init+0x284>)
 8003c40:	fba2 2303 	umull	r2, r3, r2, r3
 8003c44:	099b      	lsrs	r3, r3, #6
 8003c46:	3301      	adds	r3, #1
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	495c      	ldr	r1, [pc, #368]	; (8003dd4 <HAL_I2C_Init+0x274>)
 8003c64:	428b      	cmp	r3, r1
 8003c66:	d819      	bhi.n	8003c9c <HAL_I2C_Init+0x13c>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	1e59      	subs	r1, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c76:	1c59      	adds	r1, r3, #1
 8003c78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c7c:	400b      	ands	r3, r1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_I2C_Init+0x138>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1e59      	subs	r1, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c90:	3301      	adds	r3, #1
 8003c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c96:	e051      	b.n	8003d3c <HAL_I2C_Init+0x1dc>
 8003c98:	2304      	movs	r3, #4
 8003c9a:	e04f      	b.n	8003d3c <HAL_I2C_Init+0x1dc>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d111      	bne.n	8003cc8 <HAL_I2C_Init+0x168>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	1e58      	subs	r0, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6859      	ldr	r1, [r3, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	440b      	add	r3, r1
 8003cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	e012      	b.n	8003cee <HAL_I2C_Init+0x18e>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	1e58      	subs	r0, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6859      	ldr	r1, [r3, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	0099      	lsls	r1, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cde:	3301      	adds	r3, #1
 8003ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	bf0c      	ite	eq
 8003ce8:	2301      	moveq	r3, #1
 8003cea:	2300      	movne	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_I2C_Init+0x196>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e022      	b.n	8003d3c <HAL_I2C_Init+0x1dc>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10e      	bne.n	8003d1c <HAL_I2C_Init+0x1bc>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1e58      	subs	r0, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6859      	ldr	r1, [r3, #4]
 8003d06:	460b      	mov	r3, r1
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	440b      	add	r3, r1
 8003d0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d10:	3301      	adds	r3, #1
 8003d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d1a:	e00f      	b.n	8003d3c <HAL_I2C_Init+0x1dc>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	1e58      	subs	r0, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6859      	ldr	r1, [r3, #4]
 8003d24:	460b      	mov	r3, r1
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	0099      	lsls	r1, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d32:	3301      	adds	r3, #1
 8003d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	6809      	ldr	r1, [r1, #0]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69da      	ldr	r2, [r3, #28]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6911      	ldr	r1, [r2, #16]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68d2      	ldr	r2, [r2, #12]
 8003d76:	4311      	orrs	r1, r2
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6812      	ldr	r2, [r2, #0]
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695a      	ldr	r2, [r3, #20]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	000186a0 	.word	0x000186a0
 8003dd8:	001e847f 	.word	0x001e847f
 8003ddc:	003d08ff 	.word	0x003d08ff
 8003de0:	431bde83 	.word	0x431bde83
 8003de4:	10624dd3 	.word	0x10624dd3

08003de8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	461a      	mov	r2, r3
 8003df4:	460b      	mov	r3, r1
 8003df6:	817b      	strh	r3, [r7, #10]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dfc:	f7ff faf4 	bl	80033e8 <HAL_GetTick>
 8003e00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	f040 80e0 	bne.w	8003fd0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	2319      	movs	r3, #25
 8003e16:	2201      	movs	r2, #1
 8003e18:	4970      	ldr	r1, [pc, #448]	; (8003fdc <HAL_I2C_Master_Transmit+0x1f4>)
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fc58 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e26:	2302      	movs	r3, #2
 8003e28:	e0d3      	b.n	8003fd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_I2C_Master_Transmit+0x50>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e0cc      	b.n	8003fd2 <HAL_I2C_Master_Transmit+0x1ea>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d007      	beq.n	8003e5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0201 	orr.w	r2, r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2221      	movs	r2, #33	; 0x21
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2210      	movs	r2, #16
 8003e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	893a      	ldrh	r2, [r7, #8]
 8003e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4a50      	ldr	r2, [pc, #320]	; (8003fe0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ea0:	8979      	ldrh	r1, [r7, #10]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	6a3a      	ldr	r2, [r7, #32]
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 fac2 	bl	8004430 <I2C_MasterRequestWrite>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e08d      	b.n	8003fd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ecc:	e066      	b.n	8003f9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	6a39      	ldr	r1, [r7, #32]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 fcd2 	bl	800487c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00d      	beq.n	8003efa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d107      	bne.n	8003ef6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e06b      	b.n	8003fd2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	781a      	ldrb	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d11b      	bne.n	8003f70 <HAL_I2C_Master_Transmit+0x188>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d017      	beq.n	8003f70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	781a      	ldrb	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	6a39      	ldr	r1, [r7, #32]
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 fcc2 	bl	80048fe <I2C_WaitOnBTFFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00d      	beq.n	8003f9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d107      	bne.n	8003f98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e01a      	b.n	8003fd2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d194      	bne.n	8003ece <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e000      	b.n	8003fd2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
  }
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	00100002 	.word	0x00100002
 8003fe0:	ffff0000 	.word	0xffff0000

08003fe4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08c      	sub	sp, #48	; 0x30
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	607a      	str	r2, [r7, #4]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	817b      	strh	r3, [r7, #10]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ff8:	f7ff f9f6 	bl	80033e8 <HAL_GetTick>
 8003ffc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b20      	cmp	r3, #32
 8004008:	f040 820b 	bne.w	8004422 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	2319      	movs	r3, #25
 8004012:	2201      	movs	r2, #1
 8004014:	497c      	ldr	r1, [pc, #496]	; (8004208 <HAL_I2C_Master_Receive+0x224>)
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 fb5a 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004022:	2302      	movs	r3, #2
 8004024:	e1fe      	b.n	8004424 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_I2C_Master_Receive+0x50>
 8004030:	2302      	movs	r3, #2
 8004032:	e1f7      	b.n	8004424 <HAL_I2C_Master_Receive+0x440>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b01      	cmp	r3, #1
 8004048:	d007      	beq.n	800405a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 0201 	orr.w	r2, r2, #1
 8004058:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004068:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2222      	movs	r2, #34	; 0x22
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2210      	movs	r2, #16
 8004076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	893a      	ldrh	r2, [r7, #8]
 800408a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4a5c      	ldr	r2, [pc, #368]	; (800420c <HAL_I2C_Master_Receive+0x228>)
 800409a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800409c:	8979      	ldrh	r1, [r7, #10]
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 fa46 	bl	8004534 <I2C_MasterRequestRead>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e1b8      	b.n	8004424 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d113      	bne.n	80040e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ba:	2300      	movs	r3, #0
 80040bc:	623b      	str	r3, [r7, #32]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	623b      	str	r3, [r7, #32]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	623b      	str	r3, [r7, #32]
 80040ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	e18c      	b.n	80043fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d11b      	bne.n	8004122 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fa:	2300      	movs	r3, #0
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	61fb      	str	r3, [r7, #28]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	61fb      	str	r3, [r7, #28]
 800410e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	e16c      	b.n	80043fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004126:	2b02      	cmp	r3, #2
 8004128:	d11b      	bne.n	8004162 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004138:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004148:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800414a:	2300      	movs	r3, #0
 800414c:	61bb      	str	r3, [r7, #24]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	e14c      	b.n	80043fc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004170:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004188:	e138      	b.n	80043fc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418e:	2b03      	cmp	r3, #3
 8004190:	f200 80f1 	bhi.w	8004376 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004198:	2b01      	cmp	r3, #1
 800419a:	d123      	bne.n	80041e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800419c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 fbed 	bl	8004980 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e139      	b.n	8004424 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041e2:	e10b      	b.n	80043fc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d14e      	bne.n	800428a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	2200      	movs	r2, #0
 80041f4:	4906      	ldr	r1, [pc, #24]	; (8004210 <HAL_I2C_Master_Receive+0x22c>)
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 fa6a 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d008      	beq.n	8004214 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e10e      	b.n	8004424 <HAL_I2C_Master_Receive+0x440>
 8004206:	bf00      	nop
 8004208:	00100002 	.word	0x00100002
 800420c:	ffff0000 	.word	0xffff0000
 8004210:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004288:	e0b8      	b.n	80043fc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	2200      	movs	r2, #0
 8004292:	4966      	ldr	r1, [pc, #408]	; (800442c <HAL_I2C_Master_Receive+0x448>)
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 fa1b 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0bf      	b.n	8004424 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	2200      	movs	r2, #0
 80042ee:	494f      	ldr	r1, [pc, #316]	; (800442c <HAL_I2C_Master_Receive+0x448>)
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f9ed 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e091      	b.n	8004424 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800430e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691a      	ldr	r2, [r3, #16]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004374:	e042      	b.n	80043fc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004378:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fb00 	bl	8004980 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e04c      	b.n	8004424 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d118      	bne.n	80043fc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004400:	2b00      	cmp	r3, #0
 8004402:	f47f aec2 	bne.w	800418a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	e000      	b.n	8004424 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004422:	2302      	movs	r3, #2
  }
}
 8004424:	4618      	mov	r0, r3
 8004426:	3728      	adds	r7, #40	; 0x28
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	00010004 	.word	0x00010004

08004430 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	607a      	str	r2, [r7, #4]
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	460b      	mov	r3, r1
 800443e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b08      	cmp	r3, #8
 800444a:	d006      	beq.n	800445a <I2C_MasterRequestWrite+0x2a>
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d003      	beq.n	800445a <I2C_MasterRequestWrite+0x2a>
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004458:	d108      	bne.n	800446c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	e00b      	b.n	8004484 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	2b12      	cmp	r3, #18
 8004472:	d107      	bne.n	8004484 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004482:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f91d 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00d      	beq.n	80044b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044aa:	d103      	bne.n	80044b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e035      	b.n	8004524 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044c0:	d108      	bne.n	80044d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044c2:	897b      	ldrh	r3, [r7, #10]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044d0:	611a      	str	r2, [r3, #16]
 80044d2:	e01b      	b.n	800450c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044d4:	897b      	ldrh	r3, [r7, #10]
 80044d6:	11db      	asrs	r3, r3, #7
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f003 0306 	and.w	r3, r3, #6
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f063 030f 	orn	r3, r3, #15
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	490e      	ldr	r1, [pc, #56]	; (800452c <I2C_MasterRequestWrite+0xfc>)
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f943 	bl	800477e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e010      	b.n	8004524 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004502:	897b      	ldrh	r3, [r7, #10]
 8004504:	b2da      	uxtb	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	4907      	ldr	r1, [pc, #28]	; (8004530 <I2C_MasterRequestWrite+0x100>)
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f933 	bl	800477e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	00010008 	.word	0x00010008
 8004530:	00010002 	.word	0x00010002

08004534 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	607a      	str	r2, [r7, #4]
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	460b      	mov	r3, r1
 8004542:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004558:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2b08      	cmp	r3, #8
 800455e:	d006      	beq.n	800456e <I2C_MasterRequestRead+0x3a>
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d003      	beq.n	800456e <I2C_MasterRequestRead+0x3a>
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800456c:	d108      	bne.n	8004580 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	e00b      	b.n	8004598 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	2b11      	cmp	r3, #17
 8004586:	d107      	bne.n	8004598 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004596:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f893 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00d      	beq.n	80045cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045be:	d103      	bne.n	80045c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e079      	b.n	80046c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045d4:	d108      	bne.n	80045e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045d6:	897b      	ldrh	r3, [r7, #10]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	611a      	str	r2, [r3, #16]
 80045e6:	e05f      	b.n	80046a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045e8:	897b      	ldrh	r3, [r7, #10]
 80045ea:	11db      	asrs	r3, r3, #7
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	f003 0306 	and.w	r3, r3, #6
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	f063 030f 	orn	r3, r3, #15
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	4930      	ldr	r1, [pc, #192]	; (80046c8 <I2C_MasterRequestRead+0x194>)
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f8b9 	bl	800477e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e054      	b.n	80046c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004616:	897b      	ldrh	r3, [r7, #10]
 8004618:	b2da      	uxtb	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	4929      	ldr	r1, [pc, #164]	; (80046cc <I2C_MasterRequestRead+0x198>)
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f8a9 	bl	800477e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e044      	b.n	80046c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800465a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f831 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00d      	beq.n	8004690 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004682:	d103      	bne.n	800468c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800468a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e017      	b.n	80046c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004690:	897b      	ldrh	r3, [r7, #10]
 8004692:	11db      	asrs	r3, r3, #7
 8004694:	b2db      	uxtb	r3, r3
 8004696:	f003 0306 	and.w	r3, r3, #6
 800469a:	b2db      	uxtb	r3, r3
 800469c:	f063 030e 	orn	r3, r3, #14
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	4907      	ldr	r1, [pc, #28]	; (80046cc <I2C_MasterRequestRead+0x198>)
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f865 	bl	800477e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	00010008 	.word	0x00010008
 80046cc:	00010002 	.word	0x00010002

080046d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	4613      	mov	r3, r2
 80046de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046e0:	e025      	b.n	800472e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e8:	d021      	beq.n	800472e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ea:	f7fe fe7d 	bl	80033e8 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d302      	bcc.n	8004700 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d116      	bne.n	800472e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f043 0220 	orr.w	r2, r3, #32
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e023      	b.n	8004776 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	0c1b      	lsrs	r3, r3, #16
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	d10d      	bne.n	8004754 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	43da      	mvns	r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4013      	ands	r3, r2
 8004744:	b29b      	uxth	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	bf0c      	ite	eq
 800474a:	2301      	moveq	r3, #1
 800474c:	2300      	movne	r3, #0
 800474e:	b2db      	uxtb	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	e00c      	b.n	800476e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	43da      	mvns	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4013      	ands	r3, r2
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	bf0c      	ite	eq
 8004766:	2301      	moveq	r3, #1
 8004768:	2300      	movne	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	429a      	cmp	r2, r3
 8004772:	d0b6      	beq.n	80046e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800478c:	e051      	b.n	8004832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800479c:	d123      	bne.n	80047e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f043 0204 	orr.w	r2, r3, #4
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e046      	b.n	8004874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ec:	d021      	beq.n	8004832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ee:	f7fe fdfb 	bl	80033e8 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d302      	bcc.n	8004804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d116      	bne.n	8004832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	f043 0220 	orr.w	r2, r3, #32
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e020      	b.n	8004874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	0c1b      	lsrs	r3, r3, #16
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b01      	cmp	r3, #1
 800483a:	d10c      	bne.n	8004856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	43da      	mvns	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4013      	ands	r3, r2
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	bf14      	ite	ne
 800484e:	2301      	movne	r3, #1
 8004850:	2300      	moveq	r3, #0
 8004852:	b2db      	uxtb	r3, r3
 8004854:	e00b      	b.n	800486e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	43da      	mvns	r2, r3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	4013      	ands	r3, r2
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	bf14      	ite	ne
 8004868:	2301      	movne	r3, #1
 800486a:	2300      	moveq	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d18d      	bne.n	800478e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004888:	e02d      	b.n	80048e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f8ce 	bl	8004a2c <I2C_IsAcknowledgeFailed>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e02d      	b.n	80048f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a0:	d021      	beq.n	80048e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a2:	f7fe fda1 	bl	80033e8 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d302      	bcc.n	80048b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d116      	bne.n	80048e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	f043 0220 	orr.w	r2, r3, #32
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e007      	b.n	80048f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f0:	2b80      	cmp	r3, #128	; 0x80
 80048f2:	d1ca      	bne.n	800488a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800490a:	e02d      	b.n	8004968 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 f88d 	bl	8004a2c <I2C_IsAcknowledgeFailed>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e02d      	b.n	8004978 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004922:	d021      	beq.n	8004968 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004924:	f7fe fd60 	bl	80033e8 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	429a      	cmp	r2, r3
 8004932:	d302      	bcc.n	800493a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d116      	bne.n	8004968 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	f043 0220 	orr.w	r2, r3, #32
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e007      	b.n	8004978 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	2b04      	cmp	r3, #4
 8004974:	d1ca      	bne.n	800490c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800498c:	e042      	b.n	8004a14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	f003 0310 	and.w	r3, r3, #16
 8004998:	2b10      	cmp	r3, #16
 800499a:	d119      	bne.n	80049d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0210 	mvn.w	r2, #16
 80049a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e029      	b.n	8004a24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d0:	f7fe fd0a 	bl	80033e8 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d302      	bcc.n	80049e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d116      	bne.n	8004a14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	f043 0220 	orr.w	r2, r3, #32
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e007      	b.n	8004a24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b40      	cmp	r3, #64	; 0x40
 8004a20:	d1b5      	bne.n	800498e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a42:	d11b      	bne.n	8004a7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	f043 0204 	orr.w	r2, r3, #4
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
	...

08004a8c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004a92:	4b06      	ldr	r3, [pc, #24]	; (8004aac <HAL_PWR_EnableBkUpAccess+0x20>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004a98:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_PWR_EnableBkUpAccess+0x24>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004a9e:	687b      	ldr	r3, [r7, #4]
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	420e0020 	.word	0x420e0020
 8004ab0:	40007000 	.word	0x40007000

08004ab4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8004aba:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <HAL_PWR_DisableBkUpAccess+0x20>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004ac0:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <HAL_PWR_DisableBkUpAccess+0x24>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004ac6:	687b      	ldr	r3, [r7, #4]
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	420e0020 	.word	0x420e0020
 8004ad8:	40007000 	.word	0x40007000

08004adc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e267      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d075      	beq.n	8004be6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004afa:	4b88      	ldr	r3, [pc, #544]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 030c 	and.w	r3, r3, #12
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d00c      	beq.n	8004b20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b06:	4b85      	ldr	r3, [pc, #532]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	d112      	bne.n	8004b38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b12:	4b82      	ldr	r3, [pc, #520]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b1e:	d10b      	bne.n	8004b38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b20:	4b7e      	ldr	r3, [pc, #504]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d05b      	beq.n	8004be4 <HAL_RCC_OscConfig+0x108>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d157      	bne.n	8004be4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e242      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b40:	d106      	bne.n	8004b50 <HAL_RCC_OscConfig+0x74>
 8004b42:	4b76      	ldr	r3, [pc, #472]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a75      	ldr	r2, [pc, #468]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	e01d      	b.n	8004b8c <HAL_RCC_OscConfig+0xb0>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b58:	d10c      	bne.n	8004b74 <HAL_RCC_OscConfig+0x98>
 8004b5a:	4b70      	ldr	r3, [pc, #448]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a6f      	ldr	r2, [pc, #444]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	4b6d      	ldr	r3, [pc, #436]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a6c      	ldr	r2, [pc, #432]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	e00b      	b.n	8004b8c <HAL_RCC_OscConfig+0xb0>
 8004b74:	4b69      	ldr	r3, [pc, #420]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a68      	ldr	r2, [pc, #416]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	4b66      	ldr	r3, [pc, #408]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a65      	ldr	r2, [pc, #404]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d013      	beq.n	8004bbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b94:	f7fe fc28 	bl	80033e8 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b9c:	f7fe fc24 	bl	80033e8 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b64      	cmp	r3, #100	; 0x64
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e207      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bae:	4b5b      	ldr	r3, [pc, #364]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0xc0>
 8004bba:	e014      	b.n	8004be6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbc:	f7fe fc14 	bl	80033e8 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bc4:	f7fe fc10 	bl	80033e8 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b64      	cmp	r3, #100	; 0x64
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e1f3      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bd6:	4b51      	ldr	r3, [pc, #324]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f0      	bne.n	8004bc4 <HAL_RCC_OscConfig+0xe8>
 8004be2:	e000      	b.n	8004be6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d063      	beq.n	8004cba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bf2:	4b4a      	ldr	r3, [pc, #296]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 030c 	and.w	r3, r3, #12
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00b      	beq.n	8004c16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bfe:	4b47      	ldr	r3, [pc, #284]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d11c      	bne.n	8004c44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c0a:	4b44      	ldr	r3, [pc, #272]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d116      	bne.n	8004c44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c16:	4b41      	ldr	r3, [pc, #260]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d005      	beq.n	8004c2e <HAL_RCC_OscConfig+0x152>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d001      	beq.n	8004c2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e1c7      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c2e:	4b3b      	ldr	r3, [pc, #236]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	4937      	ldr	r1, [pc, #220]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c42:	e03a      	b.n	8004cba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d020      	beq.n	8004c8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c4c:	4b34      	ldr	r3, [pc, #208]	; (8004d20 <HAL_RCC_OscConfig+0x244>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c52:	f7fe fbc9 	bl	80033e8 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c5a:	f7fe fbc5 	bl	80033e8 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e1a8      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c6c:	4b2b      	ldr	r3, [pc, #172]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0f0      	beq.n	8004c5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c78:	4b28      	ldr	r3, [pc, #160]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	4925      	ldr	r1, [pc, #148]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	600b      	str	r3, [r1, #0]
 8004c8c:	e015      	b.n	8004cba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c8e:	4b24      	ldr	r3, [pc, #144]	; (8004d20 <HAL_RCC_OscConfig+0x244>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c94:	f7fe fba8 	bl	80033e8 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c9c:	f7fe fba4 	bl	80033e8 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e187      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cae:	4b1b      	ldr	r3, [pc, #108]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1f0      	bne.n	8004c9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d036      	beq.n	8004d34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d016      	beq.n	8004cfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cce:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <HAL_RCC_OscConfig+0x248>)
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd4:	f7fe fb88 	bl	80033e8 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cdc:	f7fe fb84 	bl	80033e8 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e167      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cee:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <HAL_RCC_OscConfig+0x240>)
 8004cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0x200>
 8004cfa:	e01b      	b.n	8004d34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cfc:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <HAL_RCC_OscConfig+0x248>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d02:	f7fe fb71 	bl	80033e8 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d08:	e00e      	b.n	8004d28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d0a:	f7fe fb6d 	bl	80033e8 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d907      	bls.n	8004d28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e150      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	42470000 	.word	0x42470000
 8004d24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d28:	4b88      	ldr	r3, [pc, #544]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1ea      	bne.n	8004d0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8097 	beq.w	8004e70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d42:	2300      	movs	r3, #0
 8004d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d46:	4b81      	ldr	r3, [pc, #516]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10f      	bne.n	8004d72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d52:	2300      	movs	r3, #0
 8004d54:	60bb      	str	r3, [r7, #8]
 8004d56:	4b7d      	ldr	r3, [pc, #500]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	4a7c      	ldr	r2, [pc, #496]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d60:	6413      	str	r3, [r2, #64]	; 0x40
 8004d62:	4b7a      	ldr	r3, [pc, #488]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	60bb      	str	r3, [r7, #8]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d72:	4b77      	ldr	r3, [pc, #476]	; (8004f50 <HAL_RCC_OscConfig+0x474>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d118      	bne.n	8004db0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d7e:	4b74      	ldr	r3, [pc, #464]	; (8004f50 <HAL_RCC_OscConfig+0x474>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a73      	ldr	r2, [pc, #460]	; (8004f50 <HAL_RCC_OscConfig+0x474>)
 8004d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d8a:	f7fe fb2d 	bl	80033e8 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d92:	f7fe fb29 	bl	80033e8 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e10c      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da4:	4b6a      	ldr	r3, [pc, #424]	; (8004f50 <HAL_RCC_OscConfig+0x474>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0f0      	beq.n	8004d92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d106      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x2ea>
 8004db8:	4b64      	ldr	r3, [pc, #400]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbc:	4a63      	ldr	r2, [pc, #396]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc4:	e01c      	b.n	8004e00 <HAL_RCC_OscConfig+0x324>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b05      	cmp	r3, #5
 8004dcc:	d10c      	bne.n	8004de8 <HAL_RCC_OscConfig+0x30c>
 8004dce:	4b5f      	ldr	r3, [pc, #380]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	4a5e      	ldr	r2, [pc, #376]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004dd4:	f043 0304 	orr.w	r3, r3, #4
 8004dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dda:	4b5c      	ldr	r3, [pc, #368]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	4a5b      	ldr	r2, [pc, #364]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004de0:	f043 0301 	orr.w	r3, r3, #1
 8004de4:	6713      	str	r3, [r2, #112]	; 0x70
 8004de6:	e00b      	b.n	8004e00 <HAL_RCC_OscConfig+0x324>
 8004de8:	4b58      	ldr	r3, [pc, #352]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	4a57      	ldr	r2, [pc, #348]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004dee:	f023 0301 	bic.w	r3, r3, #1
 8004df2:	6713      	str	r3, [r2, #112]	; 0x70
 8004df4:	4b55      	ldr	r3, [pc, #340]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df8:	4a54      	ldr	r2, [pc, #336]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004dfa:	f023 0304 	bic.w	r3, r3, #4
 8004dfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d015      	beq.n	8004e34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e08:	f7fe faee 	bl	80033e8 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e0e:	e00a      	b.n	8004e26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e10:	f7fe faea 	bl	80033e8 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e0cb      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e26:	4b49      	ldr	r3, [pc, #292]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0ee      	beq.n	8004e10 <HAL_RCC_OscConfig+0x334>
 8004e32:	e014      	b.n	8004e5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e34:	f7fe fad8 	bl	80033e8 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e3a:	e00a      	b.n	8004e52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e3c:	f7fe fad4 	bl	80033e8 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e0b5      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e52:	4b3e      	ldr	r3, [pc, #248]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1ee      	bne.n	8004e3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e5e:	7dfb      	ldrb	r3, [r7, #23]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d105      	bne.n	8004e70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e64:	4b39      	ldr	r3, [pc, #228]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	4a38      	ldr	r2, [pc, #224]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 80a1 	beq.w	8004fbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e7a:	4b34      	ldr	r3, [pc, #208]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 030c 	and.w	r3, r3, #12
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d05c      	beq.n	8004f40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d141      	bne.n	8004f12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8e:	4b31      	ldr	r3, [pc, #196]	; (8004f54 <HAL_RCC_OscConfig+0x478>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e94:	f7fe faa8 	bl	80033e8 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e9c:	f7fe faa4 	bl	80033e8 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e087      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eae:	4b27      	ldr	r3, [pc, #156]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69da      	ldr	r2, [r3, #28]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	019b      	lsls	r3, r3, #6
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	085b      	lsrs	r3, r3, #1
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	041b      	lsls	r3, r3, #16
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	061b      	lsls	r3, r3, #24
 8004ede:	491b      	ldr	r1, [pc, #108]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <HAL_RCC_OscConfig+0x478>)
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eea:	f7fe fa7d 	bl	80033e8 <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef0:	e008      	b.n	8004f04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ef2:	f7fe fa79 	bl	80033e8 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e05c      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f04:	4b11      	ldr	r3, [pc, #68]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0f0      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x416>
 8004f10:	e054      	b.n	8004fbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f12:	4b10      	ldr	r3, [pc, #64]	; (8004f54 <HAL_RCC_OscConfig+0x478>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f18:	f7fe fa66 	bl	80033e8 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f20:	f7fe fa62 	bl	80033e8 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e045      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f32:	4b06      	ldr	r3, [pc, #24]	; (8004f4c <HAL_RCC_OscConfig+0x470>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f0      	bne.n	8004f20 <HAL_RCC_OscConfig+0x444>
 8004f3e:	e03d      	b.n	8004fbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d107      	bne.n	8004f58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e038      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	40007000 	.word	0x40007000
 8004f54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f58:	4b1b      	ldr	r3, [pc, #108]	; (8004fc8 <HAL_RCC_OscConfig+0x4ec>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d028      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d121      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d11a      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f88:	4013      	ands	r3, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d111      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9e:	085b      	lsrs	r3, r3, #1
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d107      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d001      	beq.n	8004fbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40023800 	.word	0x40023800

08004fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e0cc      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe0:	4b68      	ldr	r3, [pc, #416]	; (8005184 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d90c      	bls.n	8005008 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fee:	4b65      	ldr	r3, [pc, #404]	; (8005184 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff6:	4b63      	ldr	r3, [pc, #396]	; (8005184 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d001      	beq.n	8005008 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0b8      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d020      	beq.n	8005056 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005020:	4b59      	ldr	r3, [pc, #356]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	4a58      	ldr	r2, [pc, #352]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800502a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005038:	4b53      	ldr	r3, [pc, #332]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	4a52      	ldr	r2, [pc, #328]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005042:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005044:	4b50      	ldr	r3, [pc, #320]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	494d      	ldr	r1, [pc, #308]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	4313      	orrs	r3, r2
 8005054:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d044      	beq.n	80050ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d107      	bne.n	800507a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506a:	4b47      	ldr	r3, [pc, #284]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d119      	bne.n	80050aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e07f      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b02      	cmp	r3, #2
 8005080:	d003      	beq.n	800508a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005086:	2b03      	cmp	r3, #3
 8005088:	d107      	bne.n	800509a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508a:	4b3f      	ldr	r3, [pc, #252]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e06f      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800509a:	4b3b      	ldr	r3, [pc, #236]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e067      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050aa:	4b37      	ldr	r3, [pc, #220]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f023 0203 	bic.w	r2, r3, #3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	4934      	ldr	r1, [pc, #208]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050bc:	f7fe f994 	bl	80033e8 <HAL_GetTick>
 80050c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c2:	e00a      	b.n	80050da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c4:	f7fe f990 	bl	80033e8 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e04f      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050da:	4b2b      	ldr	r3, [pc, #172]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 020c 	and.w	r2, r3, #12
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d1eb      	bne.n	80050c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050ec:	4b25      	ldr	r3, [pc, #148]	; (8005184 <HAL_RCC_ClockConfig+0x1b8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d20c      	bcs.n	8005114 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fa:	4b22      	ldr	r3, [pc, #136]	; (8005184 <HAL_RCC_ClockConfig+0x1b8>)
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005102:	4b20      	ldr	r3, [pc, #128]	; (8005184 <HAL_RCC_ClockConfig+0x1b8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d001      	beq.n	8005114 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e032      	b.n	800517a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d008      	beq.n	8005132 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005120:	4b19      	ldr	r3, [pc, #100]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	4916      	ldr	r1, [pc, #88]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	4313      	orrs	r3, r2
 8005130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800513e:	4b12      	ldr	r3, [pc, #72]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	490e      	ldr	r1, [pc, #56]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	4313      	orrs	r3, r2
 8005150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005152:	f000 f821 	bl	8005198 <HAL_RCC_GetSysClockFreq>
 8005156:	4602      	mov	r2, r0
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <HAL_RCC_ClockConfig+0x1bc>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	091b      	lsrs	r3, r3, #4
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	490a      	ldr	r1, [pc, #40]	; (800518c <HAL_RCC_ClockConfig+0x1c0>)
 8005164:	5ccb      	ldrb	r3, [r1, r3]
 8005166:	fa22 f303 	lsr.w	r3, r2, r3
 800516a:	4a09      	ldr	r2, [pc, #36]	; (8005190 <HAL_RCC_ClockConfig+0x1c4>)
 800516c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800516e:	4b09      	ldr	r3, [pc, #36]	; (8005194 <HAL_RCC_ClockConfig+0x1c8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f7fe f8f4 	bl	8003360 <HAL_InitTick>

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40023c00 	.word	0x40023c00
 8005188:	40023800 	.word	0x40023800
 800518c:	0800bc44 	.word	0x0800bc44
 8005190:	2000000c 	.word	0x2000000c
 8005194:	20000010 	.word	0x20000010

08005198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800519c:	b090      	sub	sp, #64	; 0x40
 800519e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	637b      	str	r3, [r7, #52]	; 0x34
 80051a4:	2300      	movs	r3, #0
 80051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051a8:	2300      	movs	r3, #0
 80051aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051b0:	4b59      	ldr	r3, [pc, #356]	; (8005318 <HAL_RCC_GetSysClockFreq+0x180>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f003 030c 	and.w	r3, r3, #12
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d00d      	beq.n	80051d8 <HAL_RCC_GetSysClockFreq+0x40>
 80051bc:	2b08      	cmp	r3, #8
 80051be:	f200 80a1 	bhi.w	8005304 <HAL_RCC_GetSysClockFreq+0x16c>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <HAL_RCC_GetSysClockFreq+0x34>
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d003      	beq.n	80051d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80051ca:	e09b      	b.n	8005304 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051cc:	4b53      	ldr	r3, [pc, #332]	; (800531c <HAL_RCC_GetSysClockFreq+0x184>)
 80051ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80051d0:	e09b      	b.n	800530a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051d2:	4b53      	ldr	r3, [pc, #332]	; (8005320 <HAL_RCC_GetSysClockFreq+0x188>)
 80051d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051d6:	e098      	b.n	800530a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051d8:	4b4f      	ldr	r3, [pc, #316]	; (8005318 <HAL_RCC_GetSysClockFreq+0x180>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051e2:	4b4d      	ldr	r3, [pc, #308]	; (8005318 <HAL_RCC_GetSysClockFreq+0x180>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d028      	beq.n	8005240 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ee:	4b4a      	ldr	r3, [pc, #296]	; (8005318 <HAL_RCC_GetSysClockFreq+0x180>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	099b      	lsrs	r3, r3, #6
 80051f4:	2200      	movs	r2, #0
 80051f6:	623b      	str	r3, [r7, #32]
 80051f8:	627a      	str	r2, [r7, #36]	; 0x24
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005200:	2100      	movs	r1, #0
 8005202:	4b47      	ldr	r3, [pc, #284]	; (8005320 <HAL_RCC_GetSysClockFreq+0x188>)
 8005204:	fb03 f201 	mul.w	r2, r3, r1
 8005208:	2300      	movs	r3, #0
 800520a:	fb00 f303 	mul.w	r3, r0, r3
 800520e:	4413      	add	r3, r2
 8005210:	4a43      	ldr	r2, [pc, #268]	; (8005320 <HAL_RCC_GetSysClockFreq+0x188>)
 8005212:	fba0 1202 	umull	r1, r2, r0, r2
 8005216:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005218:	460a      	mov	r2, r1
 800521a:	62ba      	str	r2, [r7, #40]	; 0x28
 800521c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800521e:	4413      	add	r3, r2
 8005220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005224:	2200      	movs	r2, #0
 8005226:	61bb      	str	r3, [r7, #24]
 8005228:	61fa      	str	r2, [r7, #28]
 800522a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800522e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005232:	f7fb fcab 	bl	8000b8c <__aeabi_uldivmod>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4613      	mov	r3, r2
 800523c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800523e:	e053      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005240:	4b35      	ldr	r3, [pc, #212]	; (8005318 <HAL_RCC_GetSysClockFreq+0x180>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	099b      	lsrs	r3, r3, #6
 8005246:	2200      	movs	r2, #0
 8005248:	613b      	str	r3, [r7, #16]
 800524a:	617a      	str	r2, [r7, #20]
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005252:	f04f 0b00 	mov.w	fp, #0
 8005256:	4652      	mov	r2, sl
 8005258:	465b      	mov	r3, fp
 800525a:	f04f 0000 	mov.w	r0, #0
 800525e:	f04f 0100 	mov.w	r1, #0
 8005262:	0159      	lsls	r1, r3, #5
 8005264:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005268:	0150      	lsls	r0, r2, #5
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	ebb2 080a 	subs.w	r8, r2, sl
 8005272:	eb63 090b 	sbc.w	r9, r3, fp
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005282:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005286:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800528a:	ebb2 0408 	subs.w	r4, r2, r8
 800528e:	eb63 0509 	sbc.w	r5, r3, r9
 8005292:	f04f 0200 	mov.w	r2, #0
 8005296:	f04f 0300 	mov.w	r3, #0
 800529a:	00eb      	lsls	r3, r5, #3
 800529c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052a0:	00e2      	lsls	r2, r4, #3
 80052a2:	4614      	mov	r4, r2
 80052a4:	461d      	mov	r5, r3
 80052a6:	eb14 030a 	adds.w	r3, r4, sl
 80052aa:	603b      	str	r3, [r7, #0]
 80052ac:	eb45 030b 	adc.w	r3, r5, fp
 80052b0:	607b      	str	r3, [r7, #4]
 80052b2:	f04f 0200 	mov.w	r2, #0
 80052b6:	f04f 0300 	mov.w	r3, #0
 80052ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052be:	4629      	mov	r1, r5
 80052c0:	028b      	lsls	r3, r1, #10
 80052c2:	4621      	mov	r1, r4
 80052c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052c8:	4621      	mov	r1, r4
 80052ca:	028a      	lsls	r2, r1, #10
 80052cc:	4610      	mov	r0, r2
 80052ce:	4619      	mov	r1, r3
 80052d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d2:	2200      	movs	r2, #0
 80052d4:	60bb      	str	r3, [r7, #8]
 80052d6:	60fa      	str	r2, [r7, #12]
 80052d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052dc:	f7fb fc56 	bl	8000b8c <__aeabi_uldivmod>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4613      	mov	r3, r2
 80052e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052e8:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <HAL_RCC_GetSysClockFreq+0x180>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	0c1b      	lsrs	r3, r3, #16
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	3301      	adds	r3, #1
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80052f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005300:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005302:	e002      	b.n	800530a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005304:	4b05      	ldr	r3, [pc, #20]	; (800531c <HAL_RCC_GetSysClockFreq+0x184>)
 8005306:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800530c:	4618      	mov	r0, r3
 800530e:	3740      	adds	r7, #64	; 0x40
 8005310:	46bd      	mov	sp, r7
 8005312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005316:	bf00      	nop
 8005318:	40023800 	.word	0x40023800
 800531c:	00f42400 	.word	0x00f42400
 8005320:	017d7840 	.word	0x017d7840

08005324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005328:	4b03      	ldr	r3, [pc, #12]	; (8005338 <HAL_RCC_GetHCLKFreq+0x14>)
 800532a:	681b      	ldr	r3, [r3, #0]
}
 800532c:	4618      	mov	r0, r3
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	2000000c 	.word	0x2000000c

0800533c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005340:	f7ff fff0 	bl	8005324 <HAL_RCC_GetHCLKFreq>
 8005344:	4602      	mov	r2, r0
 8005346:	4b05      	ldr	r3, [pc, #20]	; (800535c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	0a9b      	lsrs	r3, r3, #10
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	4903      	ldr	r1, [pc, #12]	; (8005360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005352:	5ccb      	ldrb	r3, [r1, r3]
 8005354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005358:	4618      	mov	r0, r3
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40023800 	.word	0x40023800
 8005360:	0800bc54 	.word	0x0800bc54

08005364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005368:	f7ff ffdc 	bl	8005324 <HAL_RCC_GetHCLKFreq>
 800536c:	4602      	mov	r2, r0
 800536e:	4b05      	ldr	r3, [pc, #20]	; (8005384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	0b5b      	lsrs	r3, r3, #13
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	4903      	ldr	r1, [pc, #12]	; (8005388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800537a:	5ccb      	ldrb	r3, [r1, r3]
 800537c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005380:	4618      	mov	r0, r3
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40023800 	.word	0x40023800
 8005388:	0800bc54 	.word	0x0800bc54

0800538c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e041      	b.n	8005422 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fd fd22 	bl	8002dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	3304      	adds	r3, #4
 80053c8:	4619      	mov	r1, r3
 80053ca:	4610      	mov	r0, r2
 80053cc:	f000 fc0c 	bl	8005be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b082      	sub	sp, #8
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e041      	b.n	80054c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d106      	bne.n	8005456 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f839 	bl	80054c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2202      	movs	r2, #2
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3304      	adds	r3, #4
 8005466:	4619      	mov	r1, r3
 8005468:	4610      	mov	r0, r2
 800546a:	f000 fbbd 	bl	8005be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d109      	bne.n	8005500 <HAL_TIM_PWM_Start+0x24>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	bf14      	ite	ne
 80054f8:	2301      	movne	r3, #1
 80054fa:	2300      	moveq	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	e022      	b.n	8005546 <HAL_TIM_PWM_Start+0x6a>
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b04      	cmp	r3, #4
 8005504:	d109      	bne.n	800551a <HAL_TIM_PWM_Start+0x3e>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b01      	cmp	r3, #1
 8005510:	bf14      	ite	ne
 8005512:	2301      	movne	r3, #1
 8005514:	2300      	moveq	r3, #0
 8005516:	b2db      	uxtb	r3, r3
 8005518:	e015      	b.n	8005546 <HAL_TIM_PWM_Start+0x6a>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b08      	cmp	r3, #8
 800551e:	d109      	bne.n	8005534 <HAL_TIM_PWM_Start+0x58>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b01      	cmp	r3, #1
 800552a:	bf14      	ite	ne
 800552c:	2301      	movne	r3, #1
 800552e:	2300      	moveq	r3, #0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	e008      	b.n	8005546 <HAL_TIM_PWM_Start+0x6a>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b01      	cmp	r3, #1
 800553e:	bf14      	ite	ne
 8005540:	2301      	movne	r3, #1
 8005542:	2300      	moveq	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e07c      	b.n	8005648 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d104      	bne.n	800555e <HAL_TIM_PWM_Start+0x82>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800555c:	e013      	b.n	8005586 <HAL_TIM_PWM_Start+0xaa>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b04      	cmp	r3, #4
 8005562:	d104      	bne.n	800556e <HAL_TIM_PWM_Start+0x92>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2202      	movs	r2, #2
 8005568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800556c:	e00b      	b.n	8005586 <HAL_TIM_PWM_Start+0xaa>
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b08      	cmp	r3, #8
 8005572:	d104      	bne.n	800557e <HAL_TIM_PWM_Start+0xa2>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800557c:	e003      	b.n	8005586 <HAL_TIM_PWM_Start+0xaa>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2202      	movs	r2, #2
 8005582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2201      	movs	r2, #1
 800558c:	6839      	ldr	r1, [r7, #0]
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fe14 	bl	80061bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a2d      	ldr	r2, [pc, #180]	; (8005650 <HAL_TIM_PWM_Start+0x174>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d004      	beq.n	80055a8 <HAL_TIM_PWM_Start+0xcc>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a2c      	ldr	r2, [pc, #176]	; (8005654 <HAL_TIM_PWM_Start+0x178>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d101      	bne.n	80055ac <HAL_TIM_PWM_Start+0xd0>
 80055a8:	2301      	movs	r3, #1
 80055aa:	e000      	b.n	80055ae <HAL_TIM_PWM_Start+0xd2>
 80055ac:	2300      	movs	r3, #0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d007      	beq.n	80055c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a22      	ldr	r2, [pc, #136]	; (8005650 <HAL_TIM_PWM_Start+0x174>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d022      	beq.n	8005612 <HAL_TIM_PWM_Start+0x136>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d4:	d01d      	beq.n	8005612 <HAL_TIM_PWM_Start+0x136>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a1f      	ldr	r2, [pc, #124]	; (8005658 <HAL_TIM_PWM_Start+0x17c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d018      	beq.n	8005612 <HAL_TIM_PWM_Start+0x136>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a1d      	ldr	r2, [pc, #116]	; (800565c <HAL_TIM_PWM_Start+0x180>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d013      	beq.n	8005612 <HAL_TIM_PWM_Start+0x136>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a1c      	ldr	r2, [pc, #112]	; (8005660 <HAL_TIM_PWM_Start+0x184>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00e      	beq.n	8005612 <HAL_TIM_PWM_Start+0x136>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a16      	ldr	r2, [pc, #88]	; (8005654 <HAL_TIM_PWM_Start+0x178>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d009      	beq.n	8005612 <HAL_TIM_PWM_Start+0x136>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a18      	ldr	r2, [pc, #96]	; (8005664 <HAL_TIM_PWM_Start+0x188>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d004      	beq.n	8005612 <HAL_TIM_PWM_Start+0x136>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a16      	ldr	r2, [pc, #88]	; (8005668 <HAL_TIM_PWM_Start+0x18c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d111      	bne.n	8005636 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b06      	cmp	r3, #6
 8005622:	d010      	beq.n	8005646 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0201 	orr.w	r2, r2, #1
 8005632:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005634:	e007      	b.n	8005646 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f042 0201 	orr.w	r2, r2, #1
 8005644:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40010000 	.word	0x40010000
 8005654:	40010400 	.word	0x40010400
 8005658:	40000400 	.word	0x40000400
 800565c:	40000800 	.word	0x40000800
 8005660:	40000c00 	.word	0x40000c00
 8005664:	40014000 	.word	0x40014000
 8005668:	40001800 	.word	0x40001800

0800566c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e097      	b.n	80057b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d106      	bne.n	800569a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7fd fc0f 	bl	8002eb8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2202      	movs	r2, #2
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6812      	ldr	r2, [r2, #0]
 80056ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056b0:	f023 0307 	bic.w	r3, r3, #7
 80056b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3304      	adds	r3, #4
 80056be:	4619      	mov	r1, r3
 80056c0:	4610      	mov	r0, r2
 80056c2:	f000 fa91 	bl	8005be8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ee:	f023 0303 	bic.w	r3, r3, #3
 80056f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	021b      	lsls	r3, r3, #8
 80056fe:	4313      	orrs	r3, r2
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800570c:	f023 030c 	bic.w	r3, r3, #12
 8005710:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005718:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800571c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	4313      	orrs	r3, r2
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	011a      	lsls	r2, r3, #4
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	031b      	lsls	r3, r3, #12
 800573c:	4313      	orrs	r3, r2
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800574a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005752:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	011b      	lsls	r3, r3, #4
 800575e:	4313      	orrs	r3, r2
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80057e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d110      	bne.n	800580a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d102      	bne.n	80057f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80057ee:	7b7b      	ldrb	r3, [r7, #13]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d001      	beq.n	80057f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e069      	b.n	80058cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005808:	e031      	b.n	800586e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b04      	cmp	r3, #4
 800580e:	d110      	bne.n	8005832 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005810:	7bbb      	ldrb	r3, [r7, #14]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d102      	bne.n	800581c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005816:	7b3b      	ldrb	r3, [r7, #12]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d001      	beq.n	8005820 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e055      	b.n	80058cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005830:	e01d      	b.n	800586e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d108      	bne.n	800584a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005838:	7bbb      	ldrb	r3, [r7, #14]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d105      	bne.n	800584a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800583e:	7b7b      	ldrb	r3, [r7, #13]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d102      	bne.n	800584a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005844:	7b3b      	ldrb	r3, [r7, #12]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d001      	beq.n	800584e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e03e      	b.n	80058cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2202      	movs	r2, #2
 8005852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2202      	movs	r2, #2
 800585a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2202      	movs	r2, #2
 8005862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2202      	movs	r2, #2
 800586a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <HAL_TIM_Encoder_Start+0xc4>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2b04      	cmp	r3, #4
 8005878:	d008      	beq.n	800588c <HAL_TIM_Encoder_Start+0xd4>
 800587a:	e00f      	b.n	800589c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2201      	movs	r2, #1
 8005882:	2100      	movs	r1, #0
 8005884:	4618      	mov	r0, r3
 8005886:	f000 fc99 	bl	80061bc <TIM_CCxChannelCmd>
      break;
 800588a:	e016      	b.n	80058ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2201      	movs	r2, #1
 8005892:	2104      	movs	r1, #4
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fc91 	bl	80061bc <TIM_CCxChannelCmd>
      break;
 800589a:	e00e      	b.n	80058ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2201      	movs	r2, #1
 80058a2:	2100      	movs	r1, #0
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fc89 	bl	80061bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2201      	movs	r2, #1
 80058b0:	2104      	movs	r1, #4
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fc82 	bl	80061bc <TIM_CCxChannelCmd>
      break;
 80058b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0201 	orr.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058e0:	2300      	movs	r3, #0
 80058e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d101      	bne.n	80058f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058ee:	2302      	movs	r3, #2
 80058f0:	e0ae      	b.n	8005a50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b0c      	cmp	r3, #12
 80058fe:	f200 809f 	bhi.w	8005a40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005902:	a201      	add	r2, pc, #4	; (adr r2, 8005908 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005908:	0800593d 	.word	0x0800593d
 800590c:	08005a41 	.word	0x08005a41
 8005910:	08005a41 	.word	0x08005a41
 8005914:	08005a41 	.word	0x08005a41
 8005918:	0800597d 	.word	0x0800597d
 800591c:	08005a41 	.word	0x08005a41
 8005920:	08005a41 	.word	0x08005a41
 8005924:	08005a41 	.word	0x08005a41
 8005928:	080059bf 	.word	0x080059bf
 800592c:	08005a41 	.word	0x08005a41
 8005930:	08005a41 	.word	0x08005a41
 8005934:	08005a41 	.word	0x08005a41
 8005938:	080059ff 	.word	0x080059ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68b9      	ldr	r1, [r7, #8]
 8005942:	4618      	mov	r0, r3
 8005944:	f000 f9f0 	bl	8005d28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699a      	ldr	r2, [r3, #24]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0208 	orr.w	r2, r2, #8
 8005956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699a      	ldr	r2, [r3, #24]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0204 	bic.w	r2, r2, #4
 8005966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6999      	ldr	r1, [r3, #24]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	691a      	ldr	r2, [r3, #16]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	619a      	str	r2, [r3, #24]
      break;
 800597a:	e064      	b.n	8005a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	4618      	mov	r0, r3
 8005984:	f000 fa40 	bl	8005e08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699a      	ldr	r2, [r3, #24]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6999      	ldr	r1, [r3, #24]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	021a      	lsls	r2, r3, #8
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	619a      	str	r2, [r3, #24]
      break;
 80059bc:	e043      	b.n	8005a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68b9      	ldr	r1, [r7, #8]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 fa95 	bl	8005ef4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	69da      	ldr	r2, [r3, #28]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f042 0208 	orr.w	r2, r2, #8
 80059d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	69da      	ldr	r2, [r3, #28]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0204 	bic.w	r2, r2, #4
 80059e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69d9      	ldr	r1, [r3, #28]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	691a      	ldr	r2, [r3, #16]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	61da      	str	r2, [r3, #28]
      break;
 80059fc:	e023      	b.n	8005a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68b9      	ldr	r1, [r7, #8]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 fae9 	bl	8005fdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69da      	ldr	r2, [r3, #28]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69da      	ldr	r2, [r3, #28]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69d9      	ldr	r1, [r3, #28]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	021a      	lsls	r2, r3, #8
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	61da      	str	r2, [r3, #28]
      break;
 8005a3e:	e002      	b.n	8005a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	75fb      	strb	r3, [r7, #23]
      break;
 8005a44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_TIM_ConfigClockSource+0x1c>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e0b4      	b.n	8005bde <HAL_TIM_ConfigClockSource+0x186>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aac:	d03e      	beq.n	8005b2c <HAL_TIM_ConfigClockSource+0xd4>
 8005aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab2:	f200 8087 	bhi.w	8005bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aba:	f000 8086 	beq.w	8005bca <HAL_TIM_ConfigClockSource+0x172>
 8005abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac2:	d87f      	bhi.n	8005bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac4:	2b70      	cmp	r3, #112	; 0x70
 8005ac6:	d01a      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0xa6>
 8005ac8:	2b70      	cmp	r3, #112	; 0x70
 8005aca:	d87b      	bhi.n	8005bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005acc:	2b60      	cmp	r3, #96	; 0x60
 8005ace:	d050      	beq.n	8005b72 <HAL_TIM_ConfigClockSource+0x11a>
 8005ad0:	2b60      	cmp	r3, #96	; 0x60
 8005ad2:	d877      	bhi.n	8005bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad4:	2b50      	cmp	r3, #80	; 0x50
 8005ad6:	d03c      	beq.n	8005b52 <HAL_TIM_ConfigClockSource+0xfa>
 8005ad8:	2b50      	cmp	r3, #80	; 0x50
 8005ada:	d873      	bhi.n	8005bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005adc:	2b40      	cmp	r3, #64	; 0x40
 8005ade:	d058      	beq.n	8005b92 <HAL_TIM_ConfigClockSource+0x13a>
 8005ae0:	2b40      	cmp	r3, #64	; 0x40
 8005ae2:	d86f      	bhi.n	8005bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae4:	2b30      	cmp	r3, #48	; 0x30
 8005ae6:	d064      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ae8:	2b30      	cmp	r3, #48	; 0x30
 8005aea:	d86b      	bhi.n	8005bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	d060      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	d867      	bhi.n	8005bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d05c      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005af8:	2b10      	cmp	r3, #16
 8005afa:	d05a      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005afc:	e062      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6818      	ldr	r0, [r3, #0]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	6899      	ldr	r1, [r3, #8]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f000 fb35 	bl	800617c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	609a      	str	r2, [r3, #8]
      break;
 8005b2a:	e04f      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6818      	ldr	r0, [r3, #0]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	6899      	ldr	r1, [r3, #8]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f000 fb1e 	bl	800617c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689a      	ldr	r2, [r3, #8]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b4e:	609a      	str	r2, [r3, #8]
      break;
 8005b50:	e03c      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6818      	ldr	r0, [r3, #0]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	6859      	ldr	r1, [r3, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f000 fa92 	bl	8006088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2150      	movs	r1, #80	; 0x50
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 faeb 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005b70:	e02c      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	6859      	ldr	r1, [r3, #4]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f000 fab1 	bl	80060e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2160      	movs	r1, #96	; 0x60
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fadb 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005b90:	e01c      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6818      	ldr	r0, [r3, #0]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	6859      	ldr	r1, [r3, #4]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f000 fa72 	bl	8006088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2140      	movs	r1, #64	; 0x40
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 facb 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005bb0:	e00c      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	f000 fac2 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005bc2:	e003      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bc8:	e000      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a40      	ldr	r2, [pc, #256]	; (8005cfc <TIM_Base_SetConfig+0x114>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d013      	beq.n	8005c28 <TIM_Base_SetConfig+0x40>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c06:	d00f      	beq.n	8005c28 <TIM_Base_SetConfig+0x40>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a3d      	ldr	r2, [pc, #244]	; (8005d00 <TIM_Base_SetConfig+0x118>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d00b      	beq.n	8005c28 <TIM_Base_SetConfig+0x40>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a3c      	ldr	r2, [pc, #240]	; (8005d04 <TIM_Base_SetConfig+0x11c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d007      	beq.n	8005c28 <TIM_Base_SetConfig+0x40>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a3b      	ldr	r2, [pc, #236]	; (8005d08 <TIM_Base_SetConfig+0x120>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d003      	beq.n	8005c28 <TIM_Base_SetConfig+0x40>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a3a      	ldr	r2, [pc, #232]	; (8005d0c <TIM_Base_SetConfig+0x124>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d108      	bne.n	8005c3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a2f      	ldr	r2, [pc, #188]	; (8005cfc <TIM_Base_SetConfig+0x114>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d02b      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c48:	d027      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a2c      	ldr	r2, [pc, #176]	; (8005d00 <TIM_Base_SetConfig+0x118>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d023      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a2b      	ldr	r2, [pc, #172]	; (8005d04 <TIM_Base_SetConfig+0x11c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d01f      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a2a      	ldr	r2, [pc, #168]	; (8005d08 <TIM_Base_SetConfig+0x120>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d01b      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a29      	ldr	r2, [pc, #164]	; (8005d0c <TIM_Base_SetConfig+0x124>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d017      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a28      	ldr	r2, [pc, #160]	; (8005d10 <TIM_Base_SetConfig+0x128>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d013      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a27      	ldr	r2, [pc, #156]	; (8005d14 <TIM_Base_SetConfig+0x12c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00f      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a26      	ldr	r2, [pc, #152]	; (8005d18 <TIM_Base_SetConfig+0x130>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00b      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a25      	ldr	r2, [pc, #148]	; (8005d1c <TIM_Base_SetConfig+0x134>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d007      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a24      	ldr	r2, [pc, #144]	; (8005d20 <TIM_Base_SetConfig+0x138>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d003      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a23      	ldr	r2, [pc, #140]	; (8005d24 <TIM_Base_SetConfig+0x13c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d108      	bne.n	8005cac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a0a      	ldr	r2, [pc, #40]	; (8005cfc <TIM_Base_SetConfig+0x114>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d003      	beq.n	8005ce0 <TIM_Base_SetConfig+0xf8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a0c      	ldr	r2, [pc, #48]	; (8005d0c <TIM_Base_SetConfig+0x124>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d103      	bne.n	8005ce8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	615a      	str	r2, [r3, #20]
}
 8005cee:	bf00      	nop
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40010000 	.word	0x40010000
 8005d00:	40000400 	.word	0x40000400
 8005d04:	40000800 	.word	0x40000800
 8005d08:	40000c00 	.word	0x40000c00
 8005d0c:	40010400 	.word	0x40010400
 8005d10:	40014000 	.word	0x40014000
 8005d14:	40014400 	.word	0x40014400
 8005d18:	40014800 	.word	0x40014800
 8005d1c:	40001800 	.word	0x40001800
 8005d20:	40001c00 	.word	0x40001c00
 8005d24:	40002000 	.word	0x40002000

08005d28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	f023 0201 	bic.w	r2, r3, #1
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0303 	bic.w	r3, r3, #3
 8005d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f023 0302 	bic.w	r3, r3, #2
 8005d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a20      	ldr	r2, [pc, #128]	; (8005e00 <TIM_OC1_SetConfig+0xd8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d003      	beq.n	8005d8c <TIM_OC1_SetConfig+0x64>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a1f      	ldr	r2, [pc, #124]	; (8005e04 <TIM_OC1_SetConfig+0xdc>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d10c      	bne.n	8005da6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f023 0308 	bic.w	r3, r3, #8
 8005d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f023 0304 	bic.w	r3, r3, #4
 8005da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a15      	ldr	r2, [pc, #84]	; (8005e00 <TIM_OC1_SetConfig+0xd8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d003      	beq.n	8005db6 <TIM_OC1_SetConfig+0x8e>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a14      	ldr	r2, [pc, #80]	; (8005e04 <TIM_OC1_SetConfig+0xdc>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d111      	bne.n	8005dda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	621a      	str	r2, [r3, #32]
}
 8005df4:	bf00      	nop
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	40010000 	.word	0x40010000
 8005e04:	40010400 	.word	0x40010400

08005e08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	f023 0210 	bic.w	r2, r3, #16
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f023 0320 	bic.w	r3, r3, #32
 8005e52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a22      	ldr	r2, [pc, #136]	; (8005eec <TIM_OC2_SetConfig+0xe4>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d003      	beq.n	8005e70 <TIM_OC2_SetConfig+0x68>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a21      	ldr	r2, [pc, #132]	; (8005ef0 <TIM_OC2_SetConfig+0xe8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d10d      	bne.n	8005e8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a17      	ldr	r2, [pc, #92]	; (8005eec <TIM_OC2_SetConfig+0xe4>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d003      	beq.n	8005e9c <TIM_OC2_SetConfig+0x94>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a16      	ldr	r2, [pc, #88]	; (8005ef0 <TIM_OC2_SetConfig+0xe8>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d113      	bne.n	8005ec4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ea2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	621a      	str	r2, [r3, #32]
}
 8005ede:	bf00      	nop
 8005ee0:	371c      	adds	r7, #28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	40010000 	.word	0x40010000
 8005ef0:	40010400 	.word	0x40010400

08005ef4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 0303 	bic.w	r3, r3, #3
 8005f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	021b      	lsls	r3, r3, #8
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a21      	ldr	r2, [pc, #132]	; (8005fd4 <TIM_OC3_SetConfig+0xe0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d003      	beq.n	8005f5a <TIM_OC3_SetConfig+0x66>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a20      	ldr	r2, [pc, #128]	; (8005fd8 <TIM_OC3_SetConfig+0xe4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d10d      	bne.n	8005f76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	021b      	lsls	r3, r3, #8
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a16      	ldr	r2, [pc, #88]	; (8005fd4 <TIM_OC3_SetConfig+0xe0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d003      	beq.n	8005f86 <TIM_OC3_SetConfig+0x92>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a15      	ldr	r2, [pc, #84]	; (8005fd8 <TIM_OC3_SetConfig+0xe4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d113      	bne.n	8005fae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	621a      	str	r2, [r3, #32]
}
 8005fc8:	bf00      	nop
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	40010000 	.word	0x40010000
 8005fd8:	40010400 	.word	0x40010400

08005fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800600a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	021b      	lsls	r3, r3, #8
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4313      	orrs	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	031b      	lsls	r3, r3, #12
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	4313      	orrs	r3, r2
 8006032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a12      	ldr	r2, [pc, #72]	; (8006080 <TIM_OC4_SetConfig+0xa4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d003      	beq.n	8006044 <TIM_OC4_SetConfig+0x68>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a11      	ldr	r2, [pc, #68]	; (8006084 <TIM_OC4_SetConfig+0xa8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d109      	bne.n	8006058 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800604a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	019b      	lsls	r3, r3, #6
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	4313      	orrs	r3, r2
 8006056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40010000 	.word	0x40010000
 8006084:	40010400 	.word	0x40010400

08006088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	f023 0201 	bic.w	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f023 030a 	bic.w	r3, r3, #10
 80060c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	621a      	str	r2, [r3, #32]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b087      	sub	sp, #28
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	f023 0210 	bic.w	r2, r3, #16
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006110:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	031b      	lsls	r3, r3, #12
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4313      	orrs	r3, r2
 800611a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006122:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	621a      	str	r2, [r3, #32]
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006146:	b480      	push	{r7}
 8006148:	b085      	sub	sp, #20
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4313      	orrs	r3, r2
 8006164:	f043 0307 	orr.w	r3, r3, #7
 8006168:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	609a      	str	r2, [r3, #8]
}
 8006170:	bf00      	nop
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	021a      	lsls	r2, r3, #8
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	431a      	orrs	r2, r3
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	609a      	str	r2, [r3, #8]
}
 80061b0:	bf00      	nop
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f003 031f 	and.w	r3, r3, #31
 80061ce:	2201      	movs	r2, #1
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6a1a      	ldr	r2, [r3, #32]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	43db      	mvns	r3, r3
 80061de:	401a      	ands	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6a1a      	ldr	r2, [r3, #32]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f003 031f 	and.w	r3, r3, #31
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	fa01 f303 	lsl.w	r3, r1, r3
 80061f4:	431a      	orrs	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	621a      	str	r2, [r3, #32]
}
 80061fa:	bf00      	nop
 80061fc:	371c      	adds	r7, #28
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
	...

08006208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006218:	2b01      	cmp	r3, #1
 800621a:	d101      	bne.n	8006220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800621c:	2302      	movs	r3, #2
 800621e:	e05a      	b.n	80062d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006246:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a21      	ldr	r2, [pc, #132]	; (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d022      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800626c:	d01d      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a1d      	ldr	r2, [pc, #116]	; (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d018      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a1b      	ldr	r2, [pc, #108]	; (80062ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d013      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a1a      	ldr	r2, [pc, #104]	; (80062f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00e      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a18      	ldr	r2, [pc, #96]	; (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d009      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a17      	ldr	r2, [pc, #92]	; (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d004      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a15      	ldr	r2, [pc, #84]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d10c      	bne.n	80062c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40010000 	.word	0x40010000
 80062e8:	40000400 	.word	0x40000400
 80062ec:	40000800 	.word	0x40000800
 80062f0:	40000c00 	.word	0x40000c00
 80062f4:	40010400 	.word	0x40010400
 80062f8:	40014000 	.word	0x40014000
 80062fc:	40001800 	.word	0x40001800

08006300 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006318:	2302      	movs	r3, #2
 800631a:	e03d      	b.n	8006398 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	4313      	orrs	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e03f      	b.n	8006436 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d106      	bne.n	80063d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fc fe48 	bl	8003060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2224      	movs	r2, #36	; 0x24
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fddf 	bl	8006fac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	695a      	ldr	r2, [r3, #20]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800640c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800641c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2220      	movs	r2, #32
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b08a      	sub	sp, #40	; 0x28
 8006442:	af02      	add	r7, sp, #8
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	603b      	str	r3, [r7, #0]
 800644a:	4613      	mov	r3, r2
 800644c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800644e:	2300      	movs	r3, #0
 8006450:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b20      	cmp	r3, #32
 800645c:	d17c      	bne.n	8006558 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <HAL_UART_Transmit+0x2c>
 8006464:	88fb      	ldrh	r3, [r7, #6]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e075      	b.n	800655a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_UART_Transmit+0x3e>
 8006478:	2302      	movs	r3, #2
 800647a:	e06e      	b.n	800655a <HAL_UART_Transmit+0x11c>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2221      	movs	r2, #33	; 0x21
 800648e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006492:	f7fc ffa9 	bl	80033e8 <HAL_GetTick>
 8006496:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	88fa      	ldrh	r2, [r7, #6]
 800649c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	88fa      	ldrh	r2, [r7, #6]
 80064a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ac:	d108      	bne.n	80064c0 <HAL_UART_Transmit+0x82>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d104      	bne.n	80064c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	61bb      	str	r3, [r7, #24]
 80064be:	e003      	b.n	80064c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80064d0:	e02a      	b.n	8006528 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2200      	movs	r2, #0
 80064da:	2180      	movs	r1, #128	; 0x80
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 fb1f 	bl	8006b20 <UART_WaitOnFlagUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e036      	b.n	800655a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10b      	bne.n	800650a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	461a      	mov	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006500:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	3302      	adds	r3, #2
 8006506:	61bb      	str	r3, [r7, #24]
 8006508:	e007      	b.n	800651a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	781a      	ldrb	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	3301      	adds	r3, #1
 8006518:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800651e:	b29b      	uxth	r3, r3
 8006520:	3b01      	subs	r3, #1
 8006522:	b29a      	uxth	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1cf      	bne.n	80064d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2200      	movs	r2, #0
 800653a:	2140      	movs	r1, #64	; 0x40
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 faef 	bl	8006b20 <UART_WaitOnFlagUntilTimeout>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e006      	b.n	800655a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2220      	movs	r2, #32
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	e000      	b.n	800655a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006558:	2302      	movs	r3, #2
  }
}
 800655a:	4618      	mov	r0, r3
 800655c:	3720      	adds	r7, #32
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b084      	sub	sp, #16
 8006566:	af00      	add	r7, sp, #0
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	4613      	mov	r3, r2
 800656e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b20      	cmp	r3, #32
 800657a:	d11d      	bne.n	80065b8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <HAL_UART_Receive_IT+0x26>
 8006582:	88fb      	ldrh	r3, [r7, #6]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e016      	b.n	80065ba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006592:	2b01      	cmp	r3, #1
 8006594:	d101      	bne.n	800659a <HAL_UART_Receive_IT+0x38>
 8006596:	2302      	movs	r3, #2
 8006598:	e00f      	b.n	80065ba <HAL_UART_Receive_IT+0x58>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80065a8:	88fb      	ldrh	r3, [r7, #6]
 80065aa:	461a      	mov	r2, r3
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 fb24 	bl	8006bfc <UART_Start_Receive_IT>
 80065b4:	4603      	mov	r3, r0
 80065b6:	e000      	b.n	80065ba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80065b8:	2302      	movs	r3, #2
  }
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
	...

080065c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b0ba      	sub	sp, #232	; 0xe8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10f      	bne.n	800662a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800660a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	d009      	beq.n	800662a <HAL_UART_IRQHandler+0x66>
 8006616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fc07 	bl	8006e36 <UART_Receive_IT>
      return;
 8006628:	e256      	b.n	8006ad8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800662a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 80de 	beq.w	80067f0 <HAL_UART_IRQHandler+0x22c>
 8006634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d106      	bne.n	800664e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006644:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 80d1 	beq.w	80067f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800664e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00b      	beq.n	8006672 <HAL_UART_IRQHandler+0xae>
 800665a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800665e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006662:	2b00      	cmp	r3, #0
 8006664:	d005      	beq.n	8006672 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666a:	f043 0201 	orr.w	r2, r3, #1
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00b      	beq.n	8006696 <HAL_UART_IRQHandler+0xd2>
 800667e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d005      	beq.n	8006696 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	f043 0202 	orr.w	r2, r3, #2
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00b      	beq.n	80066ba <HAL_UART_IRQHandler+0xf6>
 80066a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	f043 0204 	orr.w	r2, r3, #4
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80066ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066be:	f003 0308 	and.w	r3, r3, #8
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d011      	beq.n	80066ea <HAL_UART_IRQHandler+0x126>
 80066c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d105      	bne.n	80066de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80066d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d005      	beq.n	80066ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	f043 0208 	orr.w	r2, r3, #8
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 81ed 	beq.w	8006ace <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f8:	f003 0320 	and.w	r3, r3, #32
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d008      	beq.n	8006712 <HAL_UART_IRQHandler+0x14e>
 8006700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006704:	f003 0320 	and.w	r3, r3, #32
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fb92 	bl	8006e36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671c:	2b40      	cmp	r3, #64	; 0x40
 800671e:	bf0c      	ite	eq
 8006720:	2301      	moveq	r3, #1
 8006722:	2300      	movne	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	f003 0308 	and.w	r3, r3, #8
 8006732:	2b00      	cmp	r3, #0
 8006734:	d103      	bne.n	800673e <HAL_UART_IRQHandler+0x17a>
 8006736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800673a:	2b00      	cmp	r3, #0
 800673c:	d04f      	beq.n	80067de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fa9a 	bl	8006c78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674e:	2b40      	cmp	r3, #64	; 0x40
 8006750:	d141      	bne.n	80067d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3314      	adds	r3, #20
 8006758:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006768:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800676c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3314      	adds	r3, #20
 800677a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800677e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800678a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006796:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1d9      	bne.n	8006752 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d013      	beq.n	80067ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067aa:	4a7d      	ldr	r2, [pc, #500]	; (80069a0 <HAL_UART_IRQHandler+0x3dc>)
 80067ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fc ffc9 	bl	800374a <HAL_DMA_Abort_IT>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d016      	beq.n	80067ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80067c8:	4610      	mov	r0, r2
 80067ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067cc:	e00e      	b.n	80067ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f990 	bl	8006af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d4:	e00a      	b.n	80067ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f98c 	bl	8006af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067dc:	e006      	b.n	80067ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f988 	bl	8006af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80067ea:	e170      	b.n	8006ace <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ec:	bf00      	nop
    return;
 80067ee:	e16e      	b.n	8006ace <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	f040 814a 	bne.w	8006a8e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80067fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067fe:	f003 0310 	and.w	r3, r3, #16
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 8143 	beq.w	8006a8e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800680c:	f003 0310 	and.w	r3, r3, #16
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 813c 	beq.w	8006a8e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006816:	2300      	movs	r3, #0
 8006818:	60bb      	str	r3, [r7, #8]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	60bb      	str	r3, [r7, #8]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	60bb      	str	r3, [r7, #8]
 800682a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006836:	2b40      	cmp	r3, #64	; 0x40
 8006838:	f040 80b4 	bne.w	80069a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006848:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 8140 	beq.w	8006ad2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800685a:	429a      	cmp	r2, r3
 800685c:	f080 8139 	bcs.w	8006ad2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006866:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006872:	f000 8088 	beq.w	8006986 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	330c      	adds	r3, #12
 800687c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006880:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800688c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006894:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	330c      	adds	r3, #12
 800689e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80068a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1d9      	bne.n	8006876 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3314      	adds	r3, #20
 80068c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068d4:	f023 0301 	bic.w	r3, r3, #1
 80068d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3314      	adds	r3, #20
 80068e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e1      	bne.n	80068c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3314      	adds	r3, #20
 8006904:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006908:	e853 3f00 	ldrex	r3, [r3]
 800690c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800690e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006914:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3314      	adds	r3, #20
 800691e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006922:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006924:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006926:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006928:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800692a:	e841 2300 	strex	r3, r2, [r1]
 800692e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1e3      	bne.n	80068fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2220      	movs	r2, #32
 800693a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	330c      	adds	r3, #12
 800694a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800694e:	e853 3f00 	ldrex	r3, [r3]
 8006952:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006956:	f023 0310 	bic.w	r3, r3, #16
 800695a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	330c      	adds	r3, #12
 8006964:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006968:	65ba      	str	r2, [r7, #88]	; 0x58
 800696a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800696e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006970:	e841 2300 	strex	r3, r2, [r1]
 8006974:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1e3      	bne.n	8006944 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006980:	4618      	mov	r0, r3
 8006982:	f7fc fe72 	bl	800366a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800698e:	b29b      	uxth	r3, r3
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	b29b      	uxth	r3, r3
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f8b6 	bl	8006b08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800699c:	e099      	b.n	8006ad2 <HAL_UART_IRQHandler+0x50e>
 800699e:	bf00      	nop
 80069a0:	08006d3f 	.word	0x08006d3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 808b 	beq.w	8006ad6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80069c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 8086 	beq.w	8006ad6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	330c      	adds	r3, #12
 80069d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	330c      	adds	r3, #12
 80069ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80069ee:	647a      	str	r2, [r7, #68]	; 0x44
 80069f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069f6:	e841 2300 	strex	r3, r2, [r1]
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1e3      	bne.n	80069ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3314      	adds	r3, #20
 8006a08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	623b      	str	r3, [r7, #32]
   return(result);
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	f023 0301 	bic.w	r3, r3, #1
 8006a18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3314      	adds	r3, #20
 8006a22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a26:	633a      	str	r2, [r7, #48]	; 0x30
 8006a28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a2e:	e841 2300 	strex	r3, r2, [r1]
 8006a32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1e3      	bne.n	8006a02 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	330c      	adds	r3, #12
 8006a4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	e853 3f00 	ldrex	r3, [r3]
 8006a56:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f023 0310 	bic.w	r3, r3, #16
 8006a5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	330c      	adds	r3, #12
 8006a68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006a6c:	61fa      	str	r2, [r7, #28]
 8006a6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	69b9      	ldr	r1, [r7, #24]
 8006a72:	69fa      	ldr	r2, [r7, #28]
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	617b      	str	r3, [r7, #20]
   return(result);
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e3      	bne.n	8006a48 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f83e 	bl	8006b08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a8c:	e023      	b.n	8006ad6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d009      	beq.n	8006aae <HAL_UART_IRQHandler+0x4ea>
 8006a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f95d 	bl	8006d66 <UART_Transmit_IT>
    return;
 8006aac:	e014      	b.n	8006ad8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00e      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x514>
 8006aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d008      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f99d 	bl	8006e06 <UART_EndTransmit_IT>
    return;
 8006acc:	e004      	b.n	8006ad8 <HAL_UART_IRQHandler+0x514>
    return;
 8006ace:	bf00      	nop
 8006ad0:	e002      	b.n	8006ad8 <HAL_UART_IRQHandler+0x514>
      return;
 8006ad2:	bf00      	nop
 8006ad4:	e000      	b.n	8006ad8 <HAL_UART_IRQHandler+0x514>
      return;
 8006ad6:	bf00      	nop
  }
}
 8006ad8:	37e8      	adds	r7, #232	; 0xe8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop

08006ae0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b090      	sub	sp, #64	; 0x40
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	603b      	str	r3, [r7, #0]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b30:	e050      	b.n	8006bd4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b38:	d04c      	beq.n	8006bd4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d007      	beq.n	8006b50 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b40:	f7fc fc52 	bl	80033e8 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d241      	bcs.n	8006bd4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	330c      	adds	r3, #12
 8006b56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5a:	e853 3f00 	ldrex	r3, [r3]
 8006b5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	330c      	adds	r3, #12
 8006b6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b70:	637a      	str	r2, [r7, #52]	; 0x34
 8006b72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b78:	e841 2300 	strex	r3, r2, [r1]
 8006b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e5      	bne.n	8006b50 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3314      	adds	r3, #20
 8006b8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	e853 3f00 	ldrex	r3, [r3]
 8006b92:	613b      	str	r3, [r7, #16]
   return(result);
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f023 0301 	bic.w	r3, r3, #1
 8006b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3314      	adds	r3, #20
 8006ba2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ba4:	623a      	str	r2, [r7, #32]
 8006ba6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	69f9      	ldr	r1, [r7, #28]
 8006baa:	6a3a      	ldr	r2, [r7, #32]
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e5      	bne.n	8006b84 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e00f      	b.n	8006bf4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	4013      	ands	r3, r2
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	bf0c      	ite	eq
 8006be4:	2301      	moveq	r3, #1
 8006be6:	2300      	movne	r3, #0
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	461a      	mov	r2, r3
 8006bec:	79fb      	ldrb	r3, [r7, #7]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d09f      	beq.n	8006b32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3740      	adds	r7, #64	; 0x40
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	4613      	mov	r3, r2
 8006c08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	88fa      	ldrh	r2, [r7, #6]
 8006c14:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	88fa      	ldrh	r2, [r7, #6]
 8006c1a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2222      	movs	r2, #34	; 0x22
 8006c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d007      	beq.n	8006c4a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c48:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	695a      	ldr	r2, [r3, #20]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f042 0201 	orr.w	r2, r2, #1
 8006c58:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68da      	ldr	r2, [r3, #12]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f042 0220 	orr.w	r2, r2, #32
 8006c68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b095      	sub	sp, #84	; 0x54
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	330c      	adds	r3, #12
 8006c86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8a:	e853 3f00 	ldrex	r3, [r3]
 8006c8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	330c      	adds	r3, #12
 8006c9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ca0:	643a      	str	r2, [r7, #64]	; 0x40
 8006ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ca6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ca8:	e841 2300 	strex	r3, r2, [r1]
 8006cac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1e5      	bne.n	8006c80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3314      	adds	r3, #20
 8006cba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	e853 3f00 	ldrex	r3, [r3]
 8006cc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	f023 0301 	bic.w	r3, r3, #1
 8006cca:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	3314      	adds	r3, #20
 8006cd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cdc:	e841 2300 	strex	r3, r2, [r1]
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e5      	bne.n	8006cb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d119      	bne.n	8006d24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	330c      	adds	r3, #12
 8006cf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	e853 3f00 	ldrex	r3, [r3]
 8006cfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	f023 0310 	bic.w	r3, r3, #16
 8006d06:	647b      	str	r3, [r7, #68]	; 0x44
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	330c      	adds	r3, #12
 8006d0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d10:	61ba      	str	r2, [r7, #24]
 8006d12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d14:	6979      	ldr	r1, [r7, #20]
 8006d16:	69ba      	ldr	r2, [r7, #24]
 8006d18:	e841 2300 	strex	r3, r2, [r1]
 8006d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e5      	bne.n	8006cf0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2220      	movs	r2, #32
 8006d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d32:	bf00      	nop
 8006d34:	3754      	adds	r7, #84	; 0x54
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b084      	sub	sp, #16
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f7ff fecb 	bl	8006af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d5e:	bf00      	nop
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b085      	sub	sp, #20
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b21      	cmp	r3, #33	; 0x21
 8006d78:	d13e      	bne.n	8006df8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d82:	d114      	bne.n	8006dae <UART_Transmit_IT+0x48>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d110      	bne.n	8006dae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006da0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	1c9a      	adds	r2, r3, #2
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	621a      	str	r2, [r3, #32]
 8006dac:	e008      	b.n	8006dc0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	1c59      	adds	r1, r3, #1
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	6211      	str	r1, [r2, #32]
 8006db8:	781a      	ldrb	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10f      	bne.n	8006df4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006de2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006df2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	e000      	b.n	8006dfa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006df8:	2302      	movs	r3, #2
  }
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b082      	sub	sp, #8
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7ff fe5a 	bl	8006ae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b08c      	sub	sp, #48	; 0x30
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b22      	cmp	r3, #34	; 0x22
 8006e48:	f040 80ab 	bne.w	8006fa2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e54:	d117      	bne.n	8006e86 <UART_Receive_IT+0x50>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d113      	bne.n	8006e86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e66:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7e:	1c9a      	adds	r2, r3, #2
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	629a      	str	r2, [r3, #40]	; 0x28
 8006e84:	e026      	b.n	8006ed4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e98:	d007      	beq.n	8006eaa <UART_Receive_IT+0x74>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10a      	bne.n	8006eb8 <UART_Receive_IT+0x82>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d106      	bne.n	8006eb8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb4:	701a      	strb	r2, [r3, #0]
 8006eb6:	e008      	b.n	8006eca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	3b01      	subs	r3, #1
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d15a      	bne.n	8006f9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68da      	ldr	r2, [r3, #12]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f022 0220 	bic.w	r2, r2, #32
 8006ef6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68da      	ldr	r2, [r3, #12]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	695a      	ldr	r2, [r3, #20]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f022 0201 	bic.w	r2, r2, #1
 8006f16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d135      	bne.n	8006f94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	330c      	adds	r3, #12
 8006f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	f023 0310 	bic.w	r3, r3, #16
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	330c      	adds	r3, #12
 8006f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f4e:	623a      	str	r2, [r7, #32]
 8006f50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	69f9      	ldr	r1, [r7, #28]
 8006f54:	6a3a      	ldr	r2, [r7, #32]
 8006f56:	e841 2300 	strex	r3, r2, [r1]
 8006f5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1e5      	bne.n	8006f2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0310 	and.w	r3, r3, #16
 8006f6c:	2b10      	cmp	r3, #16
 8006f6e:	d10a      	bne.n	8006f86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f70:	2300      	movs	r3, #0
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff fdbb 	bl	8006b08 <HAL_UARTEx_RxEventCallback>
 8006f92:	e002      	b.n	8006f9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7fa fc3f 	bl	8001818 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e002      	b.n	8006fa4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	e000      	b.n	8006fa4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006fa2:	2302      	movs	r3, #2
  }
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3730      	adds	r7, #48	; 0x30
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fb0:	b0c0      	sub	sp, #256	; 0x100
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc8:	68d9      	ldr	r1, [r3, #12]
 8006fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	ea40 0301 	orr.w	r3, r0, r1
 8006fd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fda:	689a      	ldr	r2, [r3, #8]
 8006fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	431a      	orrs	r2, r3
 8006fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007004:	f021 010c 	bic.w	r1, r1, #12
 8007008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007012:	430b      	orrs	r3, r1
 8007014:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007026:	6999      	ldr	r1, [r3, #24]
 8007028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	ea40 0301 	orr.w	r3, r0, r1
 8007032:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	4b8f      	ldr	r3, [pc, #572]	; (8007278 <UART_SetConfig+0x2cc>)
 800703c:	429a      	cmp	r2, r3
 800703e:	d005      	beq.n	800704c <UART_SetConfig+0xa0>
 8007040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	4b8d      	ldr	r3, [pc, #564]	; (800727c <UART_SetConfig+0x2d0>)
 8007048:	429a      	cmp	r2, r3
 800704a:	d104      	bne.n	8007056 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800704c:	f7fe f98a 	bl	8005364 <HAL_RCC_GetPCLK2Freq>
 8007050:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007054:	e003      	b.n	800705e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007056:	f7fe f971 	bl	800533c <HAL_RCC_GetPCLK1Freq>
 800705a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800705e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007068:	f040 810c 	bne.w	8007284 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800706c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007070:	2200      	movs	r2, #0
 8007072:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007076:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800707a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800707e:	4622      	mov	r2, r4
 8007080:	462b      	mov	r3, r5
 8007082:	1891      	adds	r1, r2, r2
 8007084:	65b9      	str	r1, [r7, #88]	; 0x58
 8007086:	415b      	adcs	r3, r3
 8007088:	65fb      	str	r3, [r7, #92]	; 0x5c
 800708a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800708e:	4621      	mov	r1, r4
 8007090:	eb12 0801 	adds.w	r8, r2, r1
 8007094:	4629      	mov	r1, r5
 8007096:	eb43 0901 	adc.w	r9, r3, r1
 800709a:	f04f 0200 	mov.w	r2, #0
 800709e:	f04f 0300 	mov.w	r3, #0
 80070a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070ae:	4690      	mov	r8, r2
 80070b0:	4699      	mov	r9, r3
 80070b2:	4623      	mov	r3, r4
 80070b4:	eb18 0303 	adds.w	r3, r8, r3
 80070b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070bc:	462b      	mov	r3, r5
 80070be:	eb49 0303 	adc.w	r3, r9, r3
 80070c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80070d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80070da:	460b      	mov	r3, r1
 80070dc:	18db      	adds	r3, r3, r3
 80070de:	653b      	str	r3, [r7, #80]	; 0x50
 80070e0:	4613      	mov	r3, r2
 80070e2:	eb42 0303 	adc.w	r3, r2, r3
 80070e6:	657b      	str	r3, [r7, #84]	; 0x54
 80070e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80070ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80070f0:	f7f9 fd4c 	bl	8000b8c <__aeabi_uldivmod>
 80070f4:	4602      	mov	r2, r0
 80070f6:	460b      	mov	r3, r1
 80070f8:	4b61      	ldr	r3, [pc, #388]	; (8007280 <UART_SetConfig+0x2d4>)
 80070fa:	fba3 2302 	umull	r2, r3, r3, r2
 80070fe:	095b      	lsrs	r3, r3, #5
 8007100:	011c      	lsls	r4, r3, #4
 8007102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007106:	2200      	movs	r2, #0
 8007108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800710c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007110:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007114:	4642      	mov	r2, r8
 8007116:	464b      	mov	r3, r9
 8007118:	1891      	adds	r1, r2, r2
 800711a:	64b9      	str	r1, [r7, #72]	; 0x48
 800711c:	415b      	adcs	r3, r3
 800711e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007120:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007124:	4641      	mov	r1, r8
 8007126:	eb12 0a01 	adds.w	sl, r2, r1
 800712a:	4649      	mov	r1, r9
 800712c:	eb43 0b01 	adc.w	fp, r3, r1
 8007130:	f04f 0200 	mov.w	r2, #0
 8007134:	f04f 0300 	mov.w	r3, #0
 8007138:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800713c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007140:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007144:	4692      	mov	sl, r2
 8007146:	469b      	mov	fp, r3
 8007148:	4643      	mov	r3, r8
 800714a:	eb1a 0303 	adds.w	r3, sl, r3
 800714e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007152:	464b      	mov	r3, r9
 8007154:	eb4b 0303 	adc.w	r3, fp, r3
 8007158:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800715c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007168:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800716c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007170:	460b      	mov	r3, r1
 8007172:	18db      	adds	r3, r3, r3
 8007174:	643b      	str	r3, [r7, #64]	; 0x40
 8007176:	4613      	mov	r3, r2
 8007178:	eb42 0303 	adc.w	r3, r2, r3
 800717c:	647b      	str	r3, [r7, #68]	; 0x44
 800717e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007182:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007186:	f7f9 fd01 	bl	8000b8c <__aeabi_uldivmod>
 800718a:	4602      	mov	r2, r0
 800718c:	460b      	mov	r3, r1
 800718e:	4611      	mov	r1, r2
 8007190:	4b3b      	ldr	r3, [pc, #236]	; (8007280 <UART_SetConfig+0x2d4>)
 8007192:	fba3 2301 	umull	r2, r3, r3, r1
 8007196:	095b      	lsrs	r3, r3, #5
 8007198:	2264      	movs	r2, #100	; 0x64
 800719a:	fb02 f303 	mul.w	r3, r2, r3
 800719e:	1acb      	subs	r3, r1, r3
 80071a0:	00db      	lsls	r3, r3, #3
 80071a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80071a6:	4b36      	ldr	r3, [pc, #216]	; (8007280 <UART_SetConfig+0x2d4>)
 80071a8:	fba3 2302 	umull	r2, r3, r3, r2
 80071ac:	095b      	lsrs	r3, r3, #5
 80071ae:	005b      	lsls	r3, r3, #1
 80071b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071b4:	441c      	add	r4, r3
 80071b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071ba:	2200      	movs	r2, #0
 80071bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80071c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80071c8:	4642      	mov	r2, r8
 80071ca:	464b      	mov	r3, r9
 80071cc:	1891      	adds	r1, r2, r2
 80071ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80071d0:	415b      	adcs	r3, r3
 80071d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071d8:	4641      	mov	r1, r8
 80071da:	1851      	adds	r1, r2, r1
 80071dc:	6339      	str	r1, [r7, #48]	; 0x30
 80071de:	4649      	mov	r1, r9
 80071e0:	414b      	adcs	r3, r1
 80071e2:	637b      	str	r3, [r7, #52]	; 0x34
 80071e4:	f04f 0200 	mov.w	r2, #0
 80071e8:	f04f 0300 	mov.w	r3, #0
 80071ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80071f0:	4659      	mov	r1, fp
 80071f2:	00cb      	lsls	r3, r1, #3
 80071f4:	4651      	mov	r1, sl
 80071f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071fa:	4651      	mov	r1, sl
 80071fc:	00ca      	lsls	r2, r1, #3
 80071fe:	4610      	mov	r0, r2
 8007200:	4619      	mov	r1, r3
 8007202:	4603      	mov	r3, r0
 8007204:	4642      	mov	r2, r8
 8007206:	189b      	adds	r3, r3, r2
 8007208:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800720c:	464b      	mov	r3, r9
 800720e:	460a      	mov	r2, r1
 8007210:	eb42 0303 	adc.w	r3, r2, r3
 8007214:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007224:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007228:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800722c:	460b      	mov	r3, r1
 800722e:	18db      	adds	r3, r3, r3
 8007230:	62bb      	str	r3, [r7, #40]	; 0x28
 8007232:	4613      	mov	r3, r2
 8007234:	eb42 0303 	adc.w	r3, r2, r3
 8007238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800723a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800723e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007242:	f7f9 fca3 	bl	8000b8c <__aeabi_uldivmod>
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	4b0d      	ldr	r3, [pc, #52]	; (8007280 <UART_SetConfig+0x2d4>)
 800724c:	fba3 1302 	umull	r1, r3, r3, r2
 8007250:	095b      	lsrs	r3, r3, #5
 8007252:	2164      	movs	r1, #100	; 0x64
 8007254:	fb01 f303 	mul.w	r3, r1, r3
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	3332      	adds	r3, #50	; 0x32
 800725e:	4a08      	ldr	r2, [pc, #32]	; (8007280 <UART_SetConfig+0x2d4>)
 8007260:	fba2 2303 	umull	r2, r3, r2, r3
 8007264:	095b      	lsrs	r3, r3, #5
 8007266:	f003 0207 	and.w	r2, r3, #7
 800726a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4422      	add	r2, r4
 8007272:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007274:	e105      	b.n	8007482 <UART_SetConfig+0x4d6>
 8007276:	bf00      	nop
 8007278:	40011000 	.word	0x40011000
 800727c:	40011400 	.word	0x40011400
 8007280:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007288:	2200      	movs	r2, #0
 800728a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800728e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007292:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007296:	4642      	mov	r2, r8
 8007298:	464b      	mov	r3, r9
 800729a:	1891      	adds	r1, r2, r2
 800729c:	6239      	str	r1, [r7, #32]
 800729e:	415b      	adcs	r3, r3
 80072a0:	627b      	str	r3, [r7, #36]	; 0x24
 80072a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072a6:	4641      	mov	r1, r8
 80072a8:	1854      	adds	r4, r2, r1
 80072aa:	4649      	mov	r1, r9
 80072ac:	eb43 0501 	adc.w	r5, r3, r1
 80072b0:	f04f 0200 	mov.w	r2, #0
 80072b4:	f04f 0300 	mov.w	r3, #0
 80072b8:	00eb      	lsls	r3, r5, #3
 80072ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072be:	00e2      	lsls	r2, r4, #3
 80072c0:	4614      	mov	r4, r2
 80072c2:	461d      	mov	r5, r3
 80072c4:	4643      	mov	r3, r8
 80072c6:	18e3      	adds	r3, r4, r3
 80072c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80072cc:	464b      	mov	r3, r9
 80072ce:	eb45 0303 	adc.w	r3, r5, r3
 80072d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80072d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072e6:	f04f 0200 	mov.w	r2, #0
 80072ea:	f04f 0300 	mov.w	r3, #0
 80072ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80072f2:	4629      	mov	r1, r5
 80072f4:	008b      	lsls	r3, r1, #2
 80072f6:	4621      	mov	r1, r4
 80072f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072fc:	4621      	mov	r1, r4
 80072fe:	008a      	lsls	r2, r1, #2
 8007300:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007304:	f7f9 fc42 	bl	8000b8c <__aeabi_uldivmod>
 8007308:	4602      	mov	r2, r0
 800730a:	460b      	mov	r3, r1
 800730c:	4b60      	ldr	r3, [pc, #384]	; (8007490 <UART_SetConfig+0x4e4>)
 800730e:	fba3 2302 	umull	r2, r3, r3, r2
 8007312:	095b      	lsrs	r3, r3, #5
 8007314:	011c      	lsls	r4, r3, #4
 8007316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800731a:	2200      	movs	r2, #0
 800731c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007320:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007324:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007328:	4642      	mov	r2, r8
 800732a:	464b      	mov	r3, r9
 800732c:	1891      	adds	r1, r2, r2
 800732e:	61b9      	str	r1, [r7, #24]
 8007330:	415b      	adcs	r3, r3
 8007332:	61fb      	str	r3, [r7, #28]
 8007334:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007338:	4641      	mov	r1, r8
 800733a:	1851      	adds	r1, r2, r1
 800733c:	6139      	str	r1, [r7, #16]
 800733e:	4649      	mov	r1, r9
 8007340:	414b      	adcs	r3, r1
 8007342:	617b      	str	r3, [r7, #20]
 8007344:	f04f 0200 	mov.w	r2, #0
 8007348:	f04f 0300 	mov.w	r3, #0
 800734c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007350:	4659      	mov	r1, fp
 8007352:	00cb      	lsls	r3, r1, #3
 8007354:	4651      	mov	r1, sl
 8007356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800735a:	4651      	mov	r1, sl
 800735c:	00ca      	lsls	r2, r1, #3
 800735e:	4610      	mov	r0, r2
 8007360:	4619      	mov	r1, r3
 8007362:	4603      	mov	r3, r0
 8007364:	4642      	mov	r2, r8
 8007366:	189b      	adds	r3, r3, r2
 8007368:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800736c:	464b      	mov	r3, r9
 800736e:	460a      	mov	r2, r1
 8007370:	eb42 0303 	adc.w	r3, r2, r3
 8007374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	67bb      	str	r3, [r7, #120]	; 0x78
 8007382:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	f04f 0300 	mov.w	r3, #0
 800738c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007390:	4649      	mov	r1, r9
 8007392:	008b      	lsls	r3, r1, #2
 8007394:	4641      	mov	r1, r8
 8007396:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800739a:	4641      	mov	r1, r8
 800739c:	008a      	lsls	r2, r1, #2
 800739e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80073a2:	f7f9 fbf3 	bl	8000b8c <__aeabi_uldivmod>
 80073a6:	4602      	mov	r2, r0
 80073a8:	460b      	mov	r3, r1
 80073aa:	4b39      	ldr	r3, [pc, #228]	; (8007490 <UART_SetConfig+0x4e4>)
 80073ac:	fba3 1302 	umull	r1, r3, r3, r2
 80073b0:	095b      	lsrs	r3, r3, #5
 80073b2:	2164      	movs	r1, #100	; 0x64
 80073b4:	fb01 f303 	mul.w	r3, r1, r3
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	011b      	lsls	r3, r3, #4
 80073bc:	3332      	adds	r3, #50	; 0x32
 80073be:	4a34      	ldr	r2, [pc, #208]	; (8007490 <UART_SetConfig+0x4e4>)
 80073c0:	fba2 2303 	umull	r2, r3, r2, r3
 80073c4:	095b      	lsrs	r3, r3, #5
 80073c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073ca:	441c      	add	r4, r3
 80073cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073d0:	2200      	movs	r2, #0
 80073d2:	673b      	str	r3, [r7, #112]	; 0x70
 80073d4:	677a      	str	r2, [r7, #116]	; 0x74
 80073d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80073da:	4642      	mov	r2, r8
 80073dc:	464b      	mov	r3, r9
 80073de:	1891      	adds	r1, r2, r2
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	415b      	adcs	r3, r3
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073ea:	4641      	mov	r1, r8
 80073ec:	1851      	adds	r1, r2, r1
 80073ee:	6039      	str	r1, [r7, #0]
 80073f0:	4649      	mov	r1, r9
 80073f2:	414b      	adcs	r3, r1
 80073f4:	607b      	str	r3, [r7, #4]
 80073f6:	f04f 0200 	mov.w	r2, #0
 80073fa:	f04f 0300 	mov.w	r3, #0
 80073fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007402:	4659      	mov	r1, fp
 8007404:	00cb      	lsls	r3, r1, #3
 8007406:	4651      	mov	r1, sl
 8007408:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800740c:	4651      	mov	r1, sl
 800740e:	00ca      	lsls	r2, r1, #3
 8007410:	4610      	mov	r0, r2
 8007412:	4619      	mov	r1, r3
 8007414:	4603      	mov	r3, r0
 8007416:	4642      	mov	r2, r8
 8007418:	189b      	adds	r3, r3, r2
 800741a:	66bb      	str	r3, [r7, #104]	; 0x68
 800741c:	464b      	mov	r3, r9
 800741e:	460a      	mov	r2, r1
 8007420:	eb42 0303 	adc.w	r3, r2, r3
 8007424:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	663b      	str	r3, [r7, #96]	; 0x60
 8007430:	667a      	str	r2, [r7, #100]	; 0x64
 8007432:	f04f 0200 	mov.w	r2, #0
 8007436:	f04f 0300 	mov.w	r3, #0
 800743a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800743e:	4649      	mov	r1, r9
 8007440:	008b      	lsls	r3, r1, #2
 8007442:	4641      	mov	r1, r8
 8007444:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007448:	4641      	mov	r1, r8
 800744a:	008a      	lsls	r2, r1, #2
 800744c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007450:	f7f9 fb9c 	bl	8000b8c <__aeabi_uldivmod>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	4b0d      	ldr	r3, [pc, #52]	; (8007490 <UART_SetConfig+0x4e4>)
 800745a:	fba3 1302 	umull	r1, r3, r3, r2
 800745e:	095b      	lsrs	r3, r3, #5
 8007460:	2164      	movs	r1, #100	; 0x64
 8007462:	fb01 f303 	mul.w	r3, r1, r3
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	3332      	adds	r3, #50	; 0x32
 800746c:	4a08      	ldr	r2, [pc, #32]	; (8007490 <UART_SetConfig+0x4e4>)
 800746e:	fba2 2303 	umull	r2, r3, r2, r3
 8007472:	095b      	lsrs	r3, r3, #5
 8007474:	f003 020f 	and.w	r2, r3, #15
 8007478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4422      	add	r2, r4
 8007480:	609a      	str	r2, [r3, #8]
}
 8007482:	bf00      	nop
 8007484:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007488:	46bd      	mov	sp, r7
 800748a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800748e:	bf00      	nop
 8007490:	51eb851f 	.word	0x51eb851f

08007494 <__NVIC_SetPriority>:
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	6039      	str	r1, [r7, #0]
 800749e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	db0a      	blt.n	80074be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	490c      	ldr	r1, [pc, #48]	; (80074e0 <__NVIC_SetPriority+0x4c>)
 80074ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074b2:	0112      	lsls	r2, r2, #4
 80074b4:	b2d2      	uxtb	r2, r2
 80074b6:	440b      	add	r3, r1
 80074b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80074bc:	e00a      	b.n	80074d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	4908      	ldr	r1, [pc, #32]	; (80074e4 <__NVIC_SetPriority+0x50>)
 80074c4:	79fb      	ldrb	r3, [r7, #7]
 80074c6:	f003 030f 	and.w	r3, r3, #15
 80074ca:	3b04      	subs	r3, #4
 80074cc:	0112      	lsls	r2, r2, #4
 80074ce:	b2d2      	uxtb	r2, r2
 80074d0:	440b      	add	r3, r1
 80074d2:	761a      	strb	r2, [r3, #24]
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	e000e100 	.word	0xe000e100
 80074e4:	e000ed00 	.word	0xe000ed00

080074e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80074ec:	2100      	movs	r1, #0
 80074ee:	f06f 0004 	mvn.w	r0, #4
 80074f2:	f7ff ffcf 	bl	8007494 <__NVIC_SetPriority>
#endif
}
 80074f6:	bf00      	nop
 80074f8:	bd80      	pop	{r7, pc}
	...

080074fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007502:	f3ef 8305 	mrs	r3, IPSR
 8007506:	603b      	str	r3, [r7, #0]
  return(result);
 8007508:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800750a:	2b00      	cmp	r3, #0
 800750c:	d003      	beq.n	8007516 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800750e:	f06f 0305 	mvn.w	r3, #5
 8007512:	607b      	str	r3, [r7, #4]
 8007514:	e00c      	b.n	8007530 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007516:	4b0a      	ldr	r3, [pc, #40]	; (8007540 <osKernelInitialize+0x44>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d105      	bne.n	800752a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800751e:	4b08      	ldr	r3, [pc, #32]	; (8007540 <osKernelInitialize+0x44>)
 8007520:	2201      	movs	r2, #1
 8007522:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007524:	2300      	movs	r3, #0
 8007526:	607b      	str	r3, [r7, #4]
 8007528:	e002      	b.n	8007530 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800752a:	f04f 33ff 	mov.w	r3, #4294967295
 800752e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007530:	687b      	ldr	r3, [r7, #4]
}
 8007532:	4618      	mov	r0, r3
 8007534:	370c      	adds	r7, #12
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	200002cc 	.word	0x200002cc

08007544 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800754a:	f3ef 8305 	mrs	r3, IPSR
 800754e:	603b      	str	r3, [r7, #0]
  return(result);
 8007550:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007556:	f06f 0305 	mvn.w	r3, #5
 800755a:	607b      	str	r3, [r7, #4]
 800755c:	e010      	b.n	8007580 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800755e:	4b0b      	ldr	r3, [pc, #44]	; (800758c <osKernelStart+0x48>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d109      	bne.n	800757a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007566:	f7ff ffbf 	bl	80074e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800756a:	4b08      	ldr	r3, [pc, #32]	; (800758c <osKernelStart+0x48>)
 800756c:	2202      	movs	r2, #2
 800756e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007570:	f001 f926 	bl	80087c0 <vTaskStartScheduler>
      stat = osOK;
 8007574:	2300      	movs	r3, #0
 8007576:	607b      	str	r3, [r7, #4]
 8007578:	e002      	b.n	8007580 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800757a:	f04f 33ff 	mov.w	r3, #4294967295
 800757e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007580:	687b      	ldr	r3, [r7, #4]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	200002cc 	.word	0x200002cc

08007590 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007590:	b580      	push	{r7, lr}
 8007592:	b08e      	sub	sp, #56	; 0x38
 8007594:	af04      	add	r7, sp, #16
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800759c:	2300      	movs	r3, #0
 800759e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075a0:	f3ef 8305 	mrs	r3, IPSR
 80075a4:	617b      	str	r3, [r7, #20]
  return(result);
 80075a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d17e      	bne.n	80076aa <osThreadNew+0x11a>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d07b      	beq.n	80076aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80075b2:	2380      	movs	r3, #128	; 0x80
 80075b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80075b6:	2318      	movs	r3, #24
 80075b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80075ba:	2300      	movs	r3, #0
 80075bc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80075be:	f04f 33ff 	mov.w	r3, #4294967295
 80075c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d045      	beq.n	8007656 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <osThreadNew+0x48>
        name = attr->name;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d008      	beq.n	80075fe <osThreadNew+0x6e>
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	2b38      	cmp	r3, #56	; 0x38
 80075f0:	d805      	bhi.n	80075fe <osThreadNew+0x6e>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <osThreadNew+0x72>
        return (NULL);
 80075fe:	2300      	movs	r3, #0
 8007600:	e054      	b.n	80076ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	089b      	lsrs	r3, r3, #2
 8007610:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00e      	beq.n	8007638 <osThreadNew+0xa8>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	2bbb      	cmp	r3, #187	; 0xbb
 8007620:	d90a      	bls.n	8007638 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007626:	2b00      	cmp	r3, #0
 8007628:	d006      	beq.n	8007638 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d002      	beq.n	8007638 <osThreadNew+0xa8>
        mem = 1;
 8007632:	2301      	movs	r3, #1
 8007634:	61bb      	str	r3, [r7, #24]
 8007636:	e010      	b.n	800765a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10c      	bne.n	800765a <osThreadNew+0xca>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d108      	bne.n	800765a <osThreadNew+0xca>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d104      	bne.n	800765a <osThreadNew+0xca>
          mem = 0;
 8007650:	2300      	movs	r3, #0
 8007652:	61bb      	str	r3, [r7, #24]
 8007654:	e001      	b.n	800765a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007656:	2300      	movs	r3, #0
 8007658:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d110      	bne.n	8007682 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007668:	9202      	str	r2, [sp, #8]
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	6a3a      	ldr	r2, [r7, #32]
 8007674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 fe38 	bl	80082ec <xTaskCreateStatic>
 800767c:	4603      	mov	r3, r0
 800767e:	613b      	str	r3, [r7, #16]
 8007680:	e013      	b.n	80076aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d110      	bne.n	80076aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	b29a      	uxth	r2, r3
 800768c:	f107 0310 	add.w	r3, r7, #16
 8007690:	9301      	str	r3, [sp, #4]
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f000 fe83 	bl	80083a6 <xTaskCreate>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d001      	beq.n	80076aa <osThreadNew+0x11a>
            hTask = NULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80076aa:	693b      	ldr	r3, [r7, #16]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3728      	adds	r7, #40	; 0x28
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076bc:	f3ef 8305 	mrs	r3, IPSR
 80076c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80076c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <osDelay+0x1c>
    stat = osErrorISR;
 80076c8:	f06f 0305 	mvn.w	r3, #5
 80076cc:	60fb      	str	r3, [r7, #12]
 80076ce:	e007      	b.n	80076e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f001 f83c 	bl	8008758 <vTaskDelay>
    }
  }

  return (stat);
 80076e0:	68fb      	ldr	r3, [r7, #12]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b086      	sub	sp, #24
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076f2:	f3ef 8305 	mrs	r3, IPSR
 80076f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80076f8:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <osDelayUntil+0x1c>
    stat = osErrorISR;
 80076fe:	f06f 0305 	mvn.w	r3, #5
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	e019      	b.n	800773a <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8007706:	2300      	movs	r3, #0
 8007708:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800770a:	f001 f975 	bl	80089f8 <xTaskGetTickCount>
 800770e:	4603      	mov	r3, r0
 8007710:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d009      	beq.n	8007734 <osDelayUntil+0x4a>
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	db06      	blt.n	8007734 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8007726:	f107 0308 	add.w	r3, r7, #8
 800772a:	6939      	ldr	r1, [r7, #16]
 800772c:	4618      	mov	r0, r3
 800772e:	f000 ff95 	bl	800865c <vTaskDelayUntil>
 8007732:	e002      	b.n	800773a <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8007734:	f06f 0303 	mvn.w	r3, #3
 8007738:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800773a:	697b      	ldr	r3, [r7, #20]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3718      	adds	r7, #24
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4a07      	ldr	r2, [pc, #28]	; (8007770 <vApplicationGetIdleTaskMemory+0x2c>)
 8007754:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	4a06      	ldr	r2, [pc, #24]	; (8007774 <vApplicationGetIdleTaskMemory+0x30>)
 800775a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2280      	movs	r2, #128	; 0x80
 8007760:	601a      	str	r2, [r3, #0]
}
 8007762:	bf00      	nop
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	200002d0 	.word	0x200002d0
 8007774:	2000038c 	.word	0x2000038c

08007778 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4a07      	ldr	r2, [pc, #28]	; (80077a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007788:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	4a06      	ldr	r2, [pc, #24]	; (80077a8 <vApplicationGetTimerTaskMemory+0x30>)
 800778e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007796:	601a      	str	r2, [r3, #0]
}
 8007798:	bf00      	nop
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	2000058c 	.word	0x2000058c
 80077a8:	20000648 	.word	0x20000648

080077ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f103 0208 	add.w	r2, r3, #8
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f04f 32ff 	mov.w	r2, #4294967295
 80077c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f103 0208 	add.w	r2, r3, #8
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f103 0208 	add.w	r2, r3, #8
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077fa:	bf00      	nop
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007806:	b480      	push	{r7}
 8007808:	b085      	sub	sp, #20
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	689a      	ldr	r2, [r3, #8]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	1c5a      	adds	r2, r3, #1
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	601a      	str	r2, [r3, #0]
}
 8007842:	bf00      	nop
 8007844:	3714      	adds	r7, #20
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800784e:	b480      	push	{r7}
 8007850:	b085      	sub	sp, #20
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007864:	d103      	bne.n	800786e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	e00c      	b.n	8007888 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	3308      	adds	r3, #8
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	e002      	b.n	800787c <vListInsert+0x2e>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	429a      	cmp	r2, r3
 8007886:	d2f6      	bcs.n	8007876 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	601a      	str	r2, [r3, #0]
}
 80078b4:	bf00      	nop
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	6892      	ldr	r2, [r2, #8]
 80078d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	6852      	ldr	r2, [r2, #4]
 80078e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d103      	bne.n	80078f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	689a      	ldr	r2, [r3, #8]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	1e5a      	subs	r2, r3, #1
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10a      	bne.n	800793e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800793a:	bf00      	nop
 800793c:	e7fe      	b.n	800793c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800793e:	f002 f8f9 	bl	8009b34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794a:	68f9      	ldr	r1, [r7, #12]
 800794c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800794e:	fb01 f303 	mul.w	r3, r1, r3
 8007952:	441a      	add	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800796e:	3b01      	subs	r3, #1
 8007970:	68f9      	ldr	r1, [r7, #12]
 8007972:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007974:	fb01 f303 	mul.w	r3, r1, r3
 8007978:	441a      	add	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	22ff      	movs	r2, #255	; 0xff
 8007982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	22ff      	movs	r2, #255	; 0xff
 800798a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d114      	bne.n	80079be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d01a      	beq.n	80079d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	3310      	adds	r3, #16
 80079a0:	4618      	mov	r0, r3
 80079a2:	f001 f9a7 	bl	8008cf4 <xTaskRemoveFromEventList>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d012      	beq.n	80079d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079ac:	4b0c      	ldr	r3, [pc, #48]	; (80079e0 <xQueueGenericReset+0xcc>)
 80079ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	e009      	b.n	80079d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	3310      	adds	r3, #16
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7ff fef2 	bl	80077ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3324      	adds	r3, #36	; 0x24
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7ff feed 	bl	80077ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079d2:	f002 f8df 	bl	8009b94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079d6:	2301      	movs	r3, #1
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	e000ed04 	.word	0xe000ed04

080079e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b08e      	sub	sp, #56	; 0x38
 80079e8:	af02      	add	r7, sp, #8
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
 80079f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10a      	bne.n	8007a0e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a0a:	bf00      	nop
 8007a0c:	e7fe      	b.n	8007a0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10a      	bne.n	8007a2a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a26:	bf00      	nop
 8007a28:	e7fe      	b.n	8007a28 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <xQueueGenericCreateStatic+0x52>
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <xQueueGenericCreateStatic+0x56>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <xQueueGenericCreateStatic+0x58>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10a      	bne.n	8007a56 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	623b      	str	r3, [r7, #32]
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d102      	bne.n	8007a62 <xQueueGenericCreateStatic+0x7e>
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d101      	bne.n	8007a66 <xQueueGenericCreateStatic+0x82>
 8007a62:	2301      	movs	r3, #1
 8007a64:	e000      	b.n	8007a68 <xQueueGenericCreateStatic+0x84>
 8007a66:	2300      	movs	r3, #0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10a      	bne.n	8007a82 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a70:	f383 8811 	msr	BASEPRI, r3
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	61fb      	str	r3, [r7, #28]
}
 8007a7e:	bf00      	nop
 8007a80:	e7fe      	b.n	8007a80 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a82:	2350      	movs	r3, #80	; 0x50
 8007a84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	2b50      	cmp	r3, #80	; 0x50
 8007a8a:	d00a      	beq.n	8007aa2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	61bb      	str	r3, [r7, #24]
}
 8007a9e:	bf00      	nop
 8007aa0:	e7fe      	b.n	8007aa0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007aa2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00d      	beq.n	8007aca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ab6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	68b9      	ldr	r1, [r7, #8]
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 f805 	bl	8007ad4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3730      	adds	r7, #48	; 0x30
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d103      	bne.n	8007af0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	e002      	b.n	8007af6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b02:	2101      	movs	r1, #1
 8007b04:	69b8      	ldr	r0, [r7, #24]
 8007b06:	f7ff ff05 	bl	8007914 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	78fa      	ldrb	r2, [r7, #3]
 8007b0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b12:	bf00      	nop
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
	...

08007b1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08e      	sub	sp, #56	; 0x38
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10a      	bne.n	8007b4e <xQueueGenericSend+0x32>
	__asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b4a:	bf00      	nop
 8007b4c:	e7fe      	b.n	8007b4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d103      	bne.n	8007b5c <xQueueGenericSend+0x40>
 8007b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d101      	bne.n	8007b60 <xQueueGenericSend+0x44>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e000      	b.n	8007b62 <xQueueGenericSend+0x46>
 8007b60:	2300      	movs	r3, #0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10a      	bne.n	8007b7c <xQueueGenericSend+0x60>
	__asm volatile
 8007b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b78:	bf00      	nop
 8007b7a:	e7fe      	b.n	8007b7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d103      	bne.n	8007b8a <xQueueGenericSend+0x6e>
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d101      	bne.n	8007b8e <xQueueGenericSend+0x72>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e000      	b.n	8007b90 <xQueueGenericSend+0x74>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <xQueueGenericSend+0x8e>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	623b      	str	r3, [r7, #32]
}
 8007ba6:	bf00      	nop
 8007ba8:	e7fe      	b.n	8007ba8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007baa:	f001 fa65 	bl	8009078 <xTaskGetSchedulerState>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d102      	bne.n	8007bba <xQueueGenericSend+0x9e>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <xQueueGenericSend+0xa2>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e000      	b.n	8007bc0 <xQueueGenericSend+0xa4>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10a      	bne.n	8007bda <xQueueGenericSend+0xbe>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	61fb      	str	r3, [r7, #28]
}
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bda:	f001 ffab 	bl	8009b34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d302      	bcc.n	8007bf0 <xQueueGenericSend+0xd4>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d129      	bne.n	8007c44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	68b9      	ldr	r1, [r7, #8]
 8007bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bf6:	f000 fa0b 	bl	8008010 <prvCopyDataToQueue>
 8007bfa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d010      	beq.n	8007c26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c06:	3324      	adds	r3, #36	; 0x24
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f001 f873 	bl	8008cf4 <xTaskRemoveFromEventList>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d013      	beq.n	8007c3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007c14:	4b3f      	ldr	r3, [pc, #252]	; (8007d14 <xQueueGenericSend+0x1f8>)
 8007c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c1a:	601a      	str	r2, [r3, #0]
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	f3bf 8f6f 	isb	sy
 8007c24:	e00a      	b.n	8007c3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d007      	beq.n	8007c3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007c2c:	4b39      	ldr	r3, [pc, #228]	; (8007d14 <xQueueGenericSend+0x1f8>)
 8007c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007c3c:	f001 ffaa 	bl	8009b94 <vPortExitCritical>
				return pdPASS;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e063      	b.n	8007d0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d103      	bne.n	8007c52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c4a:	f001 ffa3 	bl	8009b94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	e05c      	b.n	8007d0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d106      	bne.n	8007c66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c58:	f107 0314 	add.w	r3, r7, #20
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f001 f8ad 	bl	8008dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c62:	2301      	movs	r3, #1
 8007c64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c66:	f001 ff95 	bl	8009b94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c6a:	f000 fe19 	bl	80088a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c6e:	f001 ff61 	bl	8009b34 <vPortEnterCritical>
 8007c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c78:	b25b      	sxtb	r3, r3
 8007c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7e:	d103      	bne.n	8007c88 <xQueueGenericSend+0x16c>
 8007c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c8e:	b25b      	sxtb	r3, r3
 8007c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c94:	d103      	bne.n	8007c9e <xQueueGenericSend+0x182>
 8007c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c9e:	f001 ff79 	bl	8009b94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ca2:	1d3a      	adds	r2, r7, #4
 8007ca4:	f107 0314 	add.w	r3, r7, #20
 8007ca8:	4611      	mov	r1, r2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f001 f89c 	bl	8008de8 <xTaskCheckForTimeOut>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d124      	bne.n	8007d00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007cb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cb8:	f000 faa2 	bl	8008200 <prvIsQueueFull>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d018      	beq.n	8007cf4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc4:	3310      	adds	r3, #16
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	4611      	mov	r1, r2
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 ffc2 	bl	8008c54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cd2:	f000 fa2d 	bl	8008130 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007cd6:	f000 fdf1 	bl	80088bc <xTaskResumeAll>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f47f af7c 	bne.w	8007bda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007ce2:	4b0c      	ldr	r3, [pc, #48]	; (8007d14 <xQueueGenericSend+0x1f8>)
 8007ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	e772      	b.n	8007bda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cf6:	f000 fa1b 	bl	8008130 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cfa:	f000 fddf 	bl	80088bc <xTaskResumeAll>
 8007cfe:	e76c      	b.n	8007bda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d02:	f000 fa15 	bl	8008130 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d06:	f000 fdd9 	bl	80088bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007d0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3738      	adds	r7, #56	; 0x38
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	e000ed04 	.word	0xe000ed04

08007d18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b090      	sub	sp, #64	; 0x40
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
 8007d24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10a      	bne.n	8007d46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d42:	bf00      	nop
 8007d44:	e7fe      	b.n	8007d44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d103      	bne.n	8007d54 <xQueueGenericSendFromISR+0x3c>
 8007d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <xQueueGenericSendFromISR+0x40>
 8007d54:	2301      	movs	r3, #1
 8007d56:	e000      	b.n	8007d5a <xQueueGenericSendFromISR+0x42>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10a      	bne.n	8007d74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d103      	bne.n	8007d82 <xQueueGenericSendFromISR+0x6a>
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d101      	bne.n	8007d86 <xQueueGenericSendFromISR+0x6e>
 8007d82:	2301      	movs	r3, #1
 8007d84:	e000      	b.n	8007d88 <xQueueGenericSendFromISR+0x70>
 8007d86:	2300      	movs	r3, #0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10a      	bne.n	8007da2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	623b      	str	r3, [r7, #32]
}
 8007d9e:	bf00      	nop
 8007da0:	e7fe      	b.n	8007da0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007da2:	f001 ffa9 	bl	8009cf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007da6:	f3ef 8211 	mrs	r2, BASEPRI
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	61fa      	str	r2, [r7, #28]
 8007dbc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007dbe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007dc0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d302      	bcc.n	8007dd4 <xQueueGenericSendFromISR+0xbc>
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d12f      	bne.n	8007e34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007de4:	683a      	ldr	r2, [r7, #0]
 8007de6:	68b9      	ldr	r1, [r7, #8]
 8007de8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007dea:	f000 f911 	bl	8008010 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007dee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df6:	d112      	bne.n	8007e1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d016      	beq.n	8007e2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e02:	3324      	adds	r3, #36	; 0x24
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 ff75 	bl	8008cf4 <xTaskRemoveFromEventList>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00e      	beq.n	8007e2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00b      	beq.n	8007e2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	e007      	b.n	8007e2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007e22:	3301      	adds	r3, #1
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	b25a      	sxtb	r2, r3
 8007e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007e32:	e001      	b.n	8007e38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e34:	2300      	movs	r3, #0
 8007e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3740      	adds	r7, #64	; 0x40
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08c      	sub	sp, #48	; 0x30
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10a      	bne.n	8007e80 <xQueueReceive+0x30>
	__asm volatile
 8007e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	623b      	str	r3, [r7, #32]
}
 8007e7c:	bf00      	nop
 8007e7e:	e7fe      	b.n	8007e7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d103      	bne.n	8007e8e <xQueueReceive+0x3e>
 8007e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <xQueueReceive+0x42>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e000      	b.n	8007e94 <xQueueReceive+0x44>
 8007e92:	2300      	movs	r3, #0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10a      	bne.n	8007eae <xQueueReceive+0x5e>
	__asm volatile
 8007e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	61fb      	str	r3, [r7, #28]
}
 8007eaa:	bf00      	nop
 8007eac:	e7fe      	b.n	8007eac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007eae:	f001 f8e3 	bl	8009078 <xTaskGetSchedulerState>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d102      	bne.n	8007ebe <xQueueReceive+0x6e>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <xQueueReceive+0x72>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e000      	b.n	8007ec4 <xQueueReceive+0x74>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10a      	bne.n	8007ede <xQueueReceive+0x8e>
	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	61bb      	str	r3, [r7, #24]
}
 8007eda:	bf00      	nop
 8007edc:	e7fe      	b.n	8007edc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ede:	f001 fe29 	bl	8009b34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d01f      	beq.n	8007f2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007eee:	68b9      	ldr	r1, [r7, #8]
 8007ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ef2:	f000 f8f7 	bl	80080e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	1e5a      	subs	r2, r3, #1
 8007efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00f      	beq.n	8007f26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f08:	3310      	adds	r3, #16
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 fef2 	bl	8008cf4 <xTaskRemoveFromEventList>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d007      	beq.n	8007f26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f16:	4b3d      	ldr	r3, [pc, #244]	; (800800c <xQueueReceive+0x1bc>)
 8007f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f26:	f001 fe35 	bl	8009b94 <vPortExitCritical>
				return pdPASS;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e069      	b.n	8008002 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d103      	bne.n	8007f3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f34:	f001 fe2e 	bl	8009b94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	e062      	b.n	8008002 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d106      	bne.n	8007f50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f42:	f107 0310 	add.w	r3, r7, #16
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 ff38 	bl	8008dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f50:	f001 fe20 	bl	8009b94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f54:	f000 fca4 	bl	80088a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f58:	f001 fdec 	bl	8009b34 <vPortEnterCritical>
 8007f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f62:	b25b      	sxtb	r3, r3
 8007f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f68:	d103      	bne.n	8007f72 <xQueueReceive+0x122>
 8007f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f78:	b25b      	sxtb	r3, r3
 8007f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7e:	d103      	bne.n	8007f88 <xQueueReceive+0x138>
 8007f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f88:	f001 fe04 	bl	8009b94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f8c:	1d3a      	adds	r2, r7, #4
 8007f8e:	f107 0310 	add.w	r3, r7, #16
 8007f92:	4611      	mov	r1, r2
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 ff27 	bl	8008de8 <xTaskCheckForTimeOut>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d123      	bne.n	8007fe8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fa2:	f000 f917 	bl	80081d4 <prvIsQueueEmpty>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d017      	beq.n	8007fdc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fae:	3324      	adds	r3, #36	; 0x24
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 fe4d 	bl	8008c54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fbc:	f000 f8b8 	bl	8008130 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fc0:	f000 fc7c 	bl	80088bc <xTaskResumeAll>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d189      	bne.n	8007ede <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007fca:	4b10      	ldr	r3, [pc, #64]	; (800800c <xQueueReceive+0x1bc>)
 8007fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	e780      	b.n	8007ede <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fde:	f000 f8a7 	bl	8008130 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fe2:	f000 fc6b 	bl	80088bc <xTaskResumeAll>
 8007fe6:	e77a      	b.n	8007ede <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fea:	f000 f8a1 	bl	8008130 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fee:	f000 fc65 	bl	80088bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ff4:	f000 f8ee 	bl	80081d4 <prvIsQueueEmpty>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f43f af6f 	beq.w	8007ede <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008000:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008002:	4618      	mov	r0, r3
 8008004:	3730      	adds	r7, #48	; 0x30
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	e000ed04 	.word	0xe000ed04

08008010 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800801c:	2300      	movs	r3, #0
 800801e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008024:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10d      	bne.n	800804a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d14d      	bne.n	80080d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	4618      	mov	r0, r3
 800803c:	f001 f83a 	bl	80090b4 <xTaskPriorityDisinherit>
 8008040:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	609a      	str	r2, [r3, #8]
 8008048:	e043      	b.n	80080d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d119      	bne.n	8008084 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6858      	ldr	r0, [r3, #4]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008058:	461a      	mov	r2, r3
 800805a:	68b9      	ldr	r1, [r7, #8]
 800805c:	f002 fbcb 	bl	800a7f6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	685a      	ldr	r2, [r3, #4]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008068:	441a      	add	r2, r3
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	429a      	cmp	r2, r3
 8008078:	d32b      	bcc.n	80080d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	605a      	str	r2, [r3, #4]
 8008082:	e026      	b.n	80080d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	68d8      	ldr	r0, [r3, #12]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808c:	461a      	mov	r2, r3
 800808e:	68b9      	ldr	r1, [r7, #8]
 8008090:	f002 fbb1 	bl	800a7f6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809c:	425b      	negs	r3, r3
 800809e:	441a      	add	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	68da      	ldr	r2, [r3, #12]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d207      	bcs.n	80080c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b8:	425b      	negs	r3, r3
 80080ba:	441a      	add	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d105      	bne.n	80080d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	3b01      	subs	r3, #1
 80080d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	1c5a      	adds	r2, r3, #1
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80080da:	697b      	ldr	r3, [r7, #20]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d018      	beq.n	8008128 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fe:	441a      	add	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68da      	ldr	r2, [r3, #12]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	429a      	cmp	r2, r3
 800810e:	d303      	bcc.n	8008118 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	68d9      	ldr	r1, [r3, #12]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008120:	461a      	mov	r2, r3
 8008122:	6838      	ldr	r0, [r7, #0]
 8008124:	f002 fb67 	bl	800a7f6 <memcpy>
	}
}
 8008128:	bf00      	nop
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008138:	f001 fcfc 	bl	8009b34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008142:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008144:	e011      	b.n	800816a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814a:	2b00      	cmp	r3, #0
 800814c:	d012      	beq.n	8008174 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3324      	adds	r3, #36	; 0x24
 8008152:	4618      	mov	r0, r3
 8008154:	f000 fdce 	bl	8008cf4 <xTaskRemoveFromEventList>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800815e:	f000 fea5 	bl	8008eac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008162:	7bfb      	ldrb	r3, [r7, #15]
 8008164:	3b01      	subs	r3, #1
 8008166:	b2db      	uxtb	r3, r3
 8008168:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800816a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800816e:	2b00      	cmp	r3, #0
 8008170:	dce9      	bgt.n	8008146 <prvUnlockQueue+0x16>
 8008172:	e000      	b.n	8008176 <prvUnlockQueue+0x46>
					break;
 8008174:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	22ff      	movs	r2, #255	; 0xff
 800817a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800817e:	f001 fd09 	bl	8009b94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008182:	f001 fcd7 	bl	8009b34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800818c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800818e:	e011      	b.n	80081b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d012      	beq.n	80081be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	3310      	adds	r3, #16
 800819c:	4618      	mov	r0, r3
 800819e:	f000 fda9 	bl	8008cf4 <xTaskRemoveFromEventList>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80081a8:	f000 fe80 	bl	8008eac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	3b01      	subs	r3, #1
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	dce9      	bgt.n	8008190 <prvUnlockQueue+0x60>
 80081bc:	e000      	b.n	80081c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80081be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	22ff      	movs	r2, #255	; 0xff
 80081c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80081c8:	f001 fce4 	bl	8009b94 <vPortExitCritical>
}
 80081cc:	bf00      	nop
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081dc:	f001 fcaa 	bl	8009b34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d102      	bne.n	80081ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80081e8:	2301      	movs	r3, #1
 80081ea:	60fb      	str	r3, [r7, #12]
 80081ec:	e001      	b.n	80081f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80081ee:	2300      	movs	r3, #0
 80081f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081f2:	f001 fccf 	bl	8009b94 <vPortExitCritical>

	return xReturn;
 80081f6:	68fb      	ldr	r3, [r7, #12]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008208:	f001 fc94 	bl	8009b34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008214:	429a      	cmp	r2, r3
 8008216:	d102      	bne.n	800821e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008218:	2301      	movs	r3, #1
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	e001      	b.n	8008222 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800821e:	2300      	movs	r3, #0
 8008220:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008222:	f001 fcb7 	bl	8009b94 <vPortExitCritical>

	return xReturn;
 8008226:	68fb      	ldr	r3, [r7, #12]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800823a:	2300      	movs	r3, #0
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	e014      	b.n	800826a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008240:	4a0f      	ldr	r2, [pc, #60]	; (8008280 <vQueueAddToRegistry+0x50>)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10b      	bne.n	8008264 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800824c:	490c      	ldr	r1, [pc, #48]	; (8008280 <vQueueAddToRegistry+0x50>)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008256:	4a0a      	ldr	r2, [pc, #40]	; (8008280 <vQueueAddToRegistry+0x50>)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	00db      	lsls	r3, r3, #3
 800825c:	4413      	add	r3, r2
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008262:	e006      	b.n	8008272 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	3301      	adds	r3, #1
 8008268:	60fb      	str	r3, [r7, #12]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2b07      	cmp	r3, #7
 800826e:	d9e7      	bls.n	8008240 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008270:	bf00      	nop
 8008272:	bf00      	nop
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	20000a48 	.word	0x20000a48

08008284 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008294:	f001 fc4e 	bl	8009b34 <vPortEnterCritical>
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800829e:	b25b      	sxtb	r3, r3
 80082a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a4:	d103      	bne.n	80082ae <vQueueWaitForMessageRestricted+0x2a>
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082b4:	b25b      	sxtb	r3, r3
 80082b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ba:	d103      	bne.n	80082c4 <vQueueWaitForMessageRestricted+0x40>
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082c4:	f001 fc66 	bl	8009b94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d106      	bne.n	80082de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	3324      	adds	r3, #36	; 0x24
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	68b9      	ldr	r1, [r7, #8]
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 fcdf 	bl	8008c9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80082de:	6978      	ldr	r0, [r7, #20]
 80082e0:	f7ff ff26 	bl	8008130 <prvUnlockQueue>
	}
 80082e4:	bf00      	nop
 80082e6:	3718      	adds	r7, #24
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08e      	sub	sp, #56	; 0x38
 80082f0:	af04      	add	r7, sp, #16
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
 80082f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80082fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d10a      	bne.n	8008316 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	623b      	str	r3, [r7, #32]
}
 8008312:	bf00      	nop
 8008314:	e7fe      	b.n	8008314 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10a      	bne.n	8008332 <xTaskCreateStatic+0x46>
	__asm volatile
 800831c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008320:	f383 8811 	msr	BASEPRI, r3
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	61fb      	str	r3, [r7, #28]
}
 800832e:	bf00      	nop
 8008330:	e7fe      	b.n	8008330 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008332:	23bc      	movs	r3, #188	; 0xbc
 8008334:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	2bbc      	cmp	r3, #188	; 0xbc
 800833a:	d00a      	beq.n	8008352 <xTaskCreateStatic+0x66>
	__asm volatile
 800833c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008340:	f383 8811 	msr	BASEPRI, r3
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	61bb      	str	r3, [r7, #24]
}
 800834e:	bf00      	nop
 8008350:	e7fe      	b.n	8008350 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008352:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	2b00      	cmp	r3, #0
 8008358:	d01e      	beq.n	8008398 <xTaskCreateStatic+0xac>
 800835a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800835c:	2b00      	cmp	r3, #0
 800835e:	d01b      	beq.n	8008398 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008362:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008368:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	2202      	movs	r2, #2
 800836e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008372:	2300      	movs	r3, #0
 8008374:	9303      	str	r3, [sp, #12]
 8008376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008378:	9302      	str	r3, [sp, #8]
 800837a:	f107 0314 	add.w	r3, r7, #20
 800837e:	9301      	str	r3, [sp, #4]
 8008380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	68b9      	ldr	r1, [r7, #8]
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 f850 	bl	8008430 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008390:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008392:	f000 f8f3 	bl	800857c <prvAddNewTaskToReadyList>
 8008396:	e001      	b.n	800839c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008398:	2300      	movs	r3, #0
 800839a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800839c:	697b      	ldr	r3, [r7, #20]
	}
 800839e:	4618      	mov	r0, r3
 80083a0:	3728      	adds	r7, #40	; 0x28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b08c      	sub	sp, #48	; 0x30
 80083aa:	af04      	add	r7, sp, #16
 80083ac:	60f8      	str	r0, [r7, #12]
 80083ae:	60b9      	str	r1, [r7, #8]
 80083b0:	603b      	str	r3, [r7, #0]
 80083b2:	4613      	mov	r3, r2
 80083b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80083b6:	88fb      	ldrh	r3, [r7, #6]
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4618      	mov	r0, r3
 80083bc:	f001 fcdc 	bl	8009d78 <pvPortMalloc>
 80083c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00e      	beq.n	80083e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80083c8:	20bc      	movs	r0, #188	; 0xbc
 80083ca:	f001 fcd5 	bl	8009d78 <pvPortMalloc>
 80083ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	697a      	ldr	r2, [r7, #20]
 80083da:	631a      	str	r2, [r3, #48]	; 0x30
 80083dc:	e005      	b.n	80083ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80083de:	6978      	ldr	r0, [r7, #20]
 80083e0:	f001 fd96 	bl	8009f10 <vPortFree>
 80083e4:	e001      	b.n	80083ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80083e6:	2300      	movs	r3, #0
 80083e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d017      	beq.n	8008420 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80083f8:	88fa      	ldrh	r2, [r7, #6]
 80083fa:	2300      	movs	r3, #0
 80083fc:	9303      	str	r3, [sp, #12]
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	9302      	str	r3, [sp, #8]
 8008402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008404:	9301      	str	r3, [sp, #4]
 8008406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	68b9      	ldr	r1, [r7, #8]
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f000 f80e 	bl	8008430 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008414:	69f8      	ldr	r0, [r7, #28]
 8008416:	f000 f8b1 	bl	800857c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800841a:	2301      	movs	r3, #1
 800841c:	61bb      	str	r3, [r7, #24]
 800841e:	e002      	b.n	8008426 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008420:	f04f 33ff 	mov.w	r3, #4294967295
 8008424:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008426:	69bb      	ldr	r3, [r7, #24]
	}
 8008428:	4618      	mov	r0, r3
 800842a:	3720      	adds	r7, #32
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b088      	sub	sp, #32
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	461a      	mov	r2, r3
 8008448:	21a5      	movs	r1, #165	; 0xa5
 800844a:	f002 f9e2 	bl	800a812 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008458:	3b01      	subs	r3, #1
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4413      	add	r3, r2
 800845e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	f023 0307 	bic.w	r3, r3, #7
 8008466:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	f003 0307 	and.w	r3, r3, #7
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00a      	beq.n	8008488 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008476:	f383 8811 	msr	BASEPRI, r3
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	617b      	str	r3, [r7, #20]
}
 8008484:	bf00      	nop
 8008486:	e7fe      	b.n	8008486 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d01f      	beq.n	80084ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800848e:	2300      	movs	r3, #0
 8008490:	61fb      	str	r3, [r7, #28]
 8008492:	e012      	b.n	80084ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	4413      	add	r3, r2
 800849a:	7819      	ldrb	r1, [r3, #0]
 800849c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	4413      	add	r3, r2
 80084a2:	3334      	adds	r3, #52	; 0x34
 80084a4:	460a      	mov	r2, r1
 80084a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	4413      	add	r3, r2
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d006      	beq.n	80084c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	3301      	adds	r3, #1
 80084b8:	61fb      	str	r3, [r7, #28]
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	2b0f      	cmp	r3, #15
 80084be:	d9e9      	bls.n	8008494 <prvInitialiseNewTask+0x64>
 80084c0:	e000      	b.n	80084c4 <prvInitialiseNewTask+0x94>
			{
				break;
 80084c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084cc:	e003      	b.n	80084d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d8:	2b37      	cmp	r3, #55	; 0x37
 80084da:	d901      	bls.n	80084e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80084dc:	2337      	movs	r3, #55	; 0x37
 80084de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80084e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80084e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80084ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ee:	2200      	movs	r2, #0
 80084f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f4:	3304      	adds	r3, #4
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff f978 	bl	80077ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80084fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fe:	3318      	adds	r3, #24
 8008500:	4618      	mov	r0, r3
 8008502:	f7ff f973 	bl	80077ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800850a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800850c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008514:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800851a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	2200      	movs	r2, #0
 8008520:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008526:	2200      	movs	r2, #0
 8008528:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800852c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852e:	3354      	adds	r3, #84	; 0x54
 8008530:	2260      	movs	r2, #96	; 0x60
 8008532:	2100      	movs	r1, #0
 8008534:	4618      	mov	r0, r3
 8008536:	f002 f96c 	bl	800a812 <memset>
 800853a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853c:	4a0c      	ldr	r2, [pc, #48]	; (8008570 <prvInitialiseNewTask+0x140>)
 800853e:	659a      	str	r2, [r3, #88]	; 0x58
 8008540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008542:	4a0c      	ldr	r2, [pc, #48]	; (8008574 <prvInitialiseNewTask+0x144>)
 8008544:	65da      	str	r2, [r3, #92]	; 0x5c
 8008546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008548:	4a0b      	ldr	r2, [pc, #44]	; (8008578 <prvInitialiseNewTask+0x148>)
 800854a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	68f9      	ldr	r1, [r7, #12]
 8008550:	69b8      	ldr	r0, [r7, #24]
 8008552:	f001 f9bf 	bl	80098d4 <pxPortInitialiseStack>
 8008556:	4602      	mov	r2, r0
 8008558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800855c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008566:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008568:	bf00      	nop
 800856a:	3720      	adds	r7, #32
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	0800c6e0 	.word	0x0800c6e0
 8008574:	0800c700 	.word	0x0800c700
 8008578:	0800c6c0 	.word	0x0800c6c0

0800857c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008584:	f001 fad6 	bl	8009b34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008588:	4b2d      	ldr	r3, [pc, #180]	; (8008640 <prvAddNewTaskToReadyList+0xc4>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	3301      	adds	r3, #1
 800858e:	4a2c      	ldr	r2, [pc, #176]	; (8008640 <prvAddNewTaskToReadyList+0xc4>)
 8008590:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008592:	4b2c      	ldr	r3, [pc, #176]	; (8008644 <prvAddNewTaskToReadyList+0xc8>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d109      	bne.n	80085ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800859a:	4a2a      	ldr	r2, [pc, #168]	; (8008644 <prvAddNewTaskToReadyList+0xc8>)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085a0:	4b27      	ldr	r3, [pc, #156]	; (8008640 <prvAddNewTaskToReadyList+0xc4>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d110      	bne.n	80085ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80085a8:	f000 fca4 	bl	8008ef4 <prvInitialiseTaskLists>
 80085ac:	e00d      	b.n	80085ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80085ae:	4b26      	ldr	r3, [pc, #152]	; (8008648 <prvAddNewTaskToReadyList+0xcc>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d109      	bne.n	80085ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085b6:	4b23      	ldr	r3, [pc, #140]	; (8008644 <prvAddNewTaskToReadyList+0xc8>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d802      	bhi.n	80085ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80085c4:	4a1f      	ldr	r2, [pc, #124]	; (8008644 <prvAddNewTaskToReadyList+0xc8>)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80085ca:	4b20      	ldr	r3, [pc, #128]	; (800864c <prvAddNewTaskToReadyList+0xd0>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	3301      	adds	r3, #1
 80085d0:	4a1e      	ldr	r2, [pc, #120]	; (800864c <prvAddNewTaskToReadyList+0xd0>)
 80085d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80085d4:	4b1d      	ldr	r3, [pc, #116]	; (800864c <prvAddNewTaskToReadyList+0xd0>)
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e0:	4b1b      	ldr	r3, [pc, #108]	; (8008650 <prvAddNewTaskToReadyList+0xd4>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d903      	bls.n	80085f0 <prvAddNewTaskToReadyList+0x74>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	4a18      	ldr	r2, [pc, #96]	; (8008650 <prvAddNewTaskToReadyList+0xd4>)
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f4:	4613      	mov	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4413      	add	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4a15      	ldr	r2, [pc, #84]	; (8008654 <prvAddNewTaskToReadyList+0xd8>)
 80085fe:	441a      	add	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	3304      	adds	r3, #4
 8008604:	4619      	mov	r1, r3
 8008606:	4610      	mov	r0, r2
 8008608:	f7ff f8fd 	bl	8007806 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800860c:	f001 fac2 	bl	8009b94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008610:	4b0d      	ldr	r3, [pc, #52]	; (8008648 <prvAddNewTaskToReadyList+0xcc>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00e      	beq.n	8008636 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008618:	4b0a      	ldr	r3, [pc, #40]	; (8008644 <prvAddNewTaskToReadyList+0xc8>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008622:	429a      	cmp	r2, r3
 8008624:	d207      	bcs.n	8008636 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008626:	4b0c      	ldr	r3, [pc, #48]	; (8008658 <prvAddNewTaskToReadyList+0xdc>)
 8008628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008636:	bf00      	nop
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	20000f5c 	.word	0x20000f5c
 8008644:	20000a88 	.word	0x20000a88
 8008648:	20000f68 	.word	0x20000f68
 800864c:	20000f78 	.word	0x20000f78
 8008650:	20000f64 	.word	0x20000f64
 8008654:	20000a8c 	.word	0x20000a8c
 8008658:	e000ed04 	.word	0xe000ed04

0800865c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800865c:	b580      	push	{r7, lr}
 800865e:	b08a      	sub	sp, #40	; 0x28
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008666:	2300      	movs	r3, #0
 8008668:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10a      	bne.n	8008686 <vTaskDelayUntil+0x2a>
	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	617b      	str	r3, [r7, #20]
}
 8008682:	bf00      	nop
 8008684:	e7fe      	b.n	8008684 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10a      	bne.n	80086a2 <vTaskDelayUntil+0x46>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	613b      	str	r3, [r7, #16]
}
 800869e:	bf00      	nop
 80086a0:	e7fe      	b.n	80086a0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80086a2:	4b2a      	ldr	r3, [pc, #168]	; (800874c <vTaskDelayUntil+0xf0>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <vTaskDelayUntil+0x64>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	60fb      	str	r3, [r7, #12]
}
 80086bc:	bf00      	nop
 80086be:	e7fe      	b.n	80086be <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80086c0:	f000 f8ee 	bl	80088a0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80086c4:	4b22      	ldr	r3, [pc, #136]	; (8008750 <vTaskDelayUntil+0xf4>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	4413      	add	r3, r2
 80086d2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6a3a      	ldr	r2, [r7, #32]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d20b      	bcs.n	80086f6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	69fa      	ldr	r2, [r7, #28]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d211      	bcs.n	800870c <vTaskDelayUntil+0xb0>
 80086e8:	69fa      	ldr	r2, [r7, #28]
 80086ea:	6a3b      	ldr	r3, [r7, #32]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d90d      	bls.n	800870c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80086f0:	2301      	movs	r3, #1
 80086f2:	627b      	str	r3, [r7, #36]	; 0x24
 80086f4:	e00a      	b.n	800870c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	69fa      	ldr	r2, [r7, #28]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d303      	bcc.n	8008708 <vTaskDelayUntil+0xac>
 8008700:	69fa      	ldr	r2, [r7, #28]
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	429a      	cmp	r2, r3
 8008706:	d901      	bls.n	800870c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008708:	2301      	movs	r3, #1
 800870a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	69fa      	ldr	r2, [r7, #28]
 8008710:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008714:	2b00      	cmp	r3, #0
 8008716:	d006      	beq.n	8008726 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008718:	69fa      	ldr	r2, [r7, #28]
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	2100      	movs	r1, #0
 8008720:	4618      	mov	r0, r3
 8008722:	f000 fd35 	bl	8009190 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008726:	f000 f8c9 	bl	80088bc <xTaskResumeAll>
 800872a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d107      	bne.n	8008742 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8008732:	4b08      	ldr	r3, [pc, #32]	; (8008754 <vTaskDelayUntil+0xf8>)
 8008734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008738:	601a      	str	r2, [r3, #0]
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008742:	bf00      	nop
 8008744:	3728      	adds	r7, #40	; 0x28
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	20000f84 	.word	0x20000f84
 8008750:	20000f60 	.word	0x20000f60
 8008754:	e000ed04 	.word	0xe000ed04

08008758 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008760:	2300      	movs	r3, #0
 8008762:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d017      	beq.n	800879a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800876a:	4b13      	ldr	r3, [pc, #76]	; (80087b8 <vTaskDelay+0x60>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00a      	beq.n	8008788 <vTaskDelay+0x30>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	60bb      	str	r3, [r7, #8]
}
 8008784:	bf00      	nop
 8008786:	e7fe      	b.n	8008786 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008788:	f000 f88a 	bl	80088a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800878c:	2100      	movs	r1, #0
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fcfe 	bl	8009190 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008794:	f000 f892 	bl	80088bc <xTaskResumeAll>
 8008798:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d107      	bne.n	80087b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80087a0:	4b06      	ldr	r3, [pc, #24]	; (80087bc <vTaskDelay+0x64>)
 80087a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087b0:	bf00      	nop
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	20000f84 	.word	0x20000f84
 80087bc:	e000ed04 	.word	0xe000ed04

080087c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b08a      	sub	sp, #40	; 0x28
 80087c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087c6:	2300      	movs	r3, #0
 80087c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087ca:	2300      	movs	r3, #0
 80087cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087ce:	463a      	mov	r2, r7
 80087d0:	1d39      	adds	r1, r7, #4
 80087d2:	f107 0308 	add.w	r3, r7, #8
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fe ffb4 	bl	8007744 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	9202      	str	r2, [sp, #8]
 80087e4:	9301      	str	r3, [sp, #4]
 80087e6:	2300      	movs	r3, #0
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	2300      	movs	r3, #0
 80087ec:	460a      	mov	r2, r1
 80087ee:	4924      	ldr	r1, [pc, #144]	; (8008880 <vTaskStartScheduler+0xc0>)
 80087f0:	4824      	ldr	r0, [pc, #144]	; (8008884 <vTaskStartScheduler+0xc4>)
 80087f2:	f7ff fd7b 	bl	80082ec <xTaskCreateStatic>
 80087f6:	4603      	mov	r3, r0
 80087f8:	4a23      	ldr	r2, [pc, #140]	; (8008888 <vTaskStartScheduler+0xc8>)
 80087fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80087fc:	4b22      	ldr	r3, [pc, #136]	; (8008888 <vTaskStartScheduler+0xc8>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d002      	beq.n	800880a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008804:	2301      	movs	r3, #1
 8008806:	617b      	str	r3, [r7, #20]
 8008808:	e001      	b.n	800880e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800880a:	2300      	movs	r3, #0
 800880c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d102      	bne.n	800881a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008814:	f000 fd10 	bl	8009238 <xTimerCreateTimerTask>
 8008818:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d11b      	bne.n	8008858 <vTaskStartScheduler+0x98>
	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	613b      	str	r3, [r7, #16]
}
 8008832:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008834:	4b15      	ldr	r3, [pc, #84]	; (800888c <vTaskStartScheduler+0xcc>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	3354      	adds	r3, #84	; 0x54
 800883a:	4a15      	ldr	r2, [pc, #84]	; (8008890 <vTaskStartScheduler+0xd0>)
 800883c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800883e:	4b15      	ldr	r3, [pc, #84]	; (8008894 <vTaskStartScheduler+0xd4>)
 8008840:	f04f 32ff 	mov.w	r2, #4294967295
 8008844:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008846:	4b14      	ldr	r3, [pc, #80]	; (8008898 <vTaskStartScheduler+0xd8>)
 8008848:	2201      	movs	r2, #1
 800884a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800884c:	4b13      	ldr	r3, [pc, #76]	; (800889c <vTaskStartScheduler+0xdc>)
 800884e:	2200      	movs	r2, #0
 8008850:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008852:	f001 f8cd 	bl	80099f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008856:	e00e      	b.n	8008876 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885e:	d10a      	bne.n	8008876 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008864:	f383 8811 	msr	BASEPRI, r3
 8008868:	f3bf 8f6f 	isb	sy
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	60fb      	str	r3, [r7, #12]
}
 8008872:	bf00      	nop
 8008874:	e7fe      	b.n	8008874 <vTaskStartScheduler+0xb4>
}
 8008876:	bf00      	nop
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	0800bb78 	.word	0x0800bb78
 8008884:	08008ec5 	.word	0x08008ec5
 8008888:	20000f80 	.word	0x20000f80
 800888c:	20000a88 	.word	0x20000a88
 8008890:	2000001c 	.word	0x2000001c
 8008894:	20000f7c 	.word	0x20000f7c
 8008898:	20000f68 	.word	0x20000f68
 800889c:	20000f60 	.word	0x20000f60

080088a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088a0:	b480      	push	{r7}
 80088a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80088a4:	4b04      	ldr	r3, [pc, #16]	; (80088b8 <vTaskSuspendAll+0x18>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3301      	adds	r3, #1
 80088aa:	4a03      	ldr	r2, [pc, #12]	; (80088b8 <vTaskSuspendAll+0x18>)
 80088ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80088ae:	bf00      	nop
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr
 80088b8:	20000f84 	.word	0x20000f84

080088bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088c6:	2300      	movs	r3, #0
 80088c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088ca:	4b42      	ldr	r3, [pc, #264]	; (80089d4 <xTaskResumeAll+0x118>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10a      	bne.n	80088e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	603b      	str	r3, [r7, #0]
}
 80088e4:	bf00      	nop
 80088e6:	e7fe      	b.n	80088e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088e8:	f001 f924 	bl	8009b34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088ec:	4b39      	ldr	r3, [pc, #228]	; (80089d4 <xTaskResumeAll+0x118>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	4a38      	ldr	r2, [pc, #224]	; (80089d4 <xTaskResumeAll+0x118>)
 80088f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088f6:	4b37      	ldr	r3, [pc, #220]	; (80089d4 <xTaskResumeAll+0x118>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d162      	bne.n	80089c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088fe:	4b36      	ldr	r3, [pc, #216]	; (80089d8 <xTaskResumeAll+0x11c>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d05e      	beq.n	80089c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008906:	e02f      	b.n	8008968 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008908:	4b34      	ldr	r3, [pc, #208]	; (80089dc <xTaskResumeAll+0x120>)
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	3318      	adds	r3, #24
 8008914:	4618      	mov	r0, r3
 8008916:	f7fe ffd3 	bl	80078c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3304      	adds	r3, #4
 800891e:	4618      	mov	r0, r3
 8008920:	f7fe ffce 	bl	80078c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008928:	4b2d      	ldr	r3, [pc, #180]	; (80089e0 <xTaskResumeAll+0x124>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	429a      	cmp	r2, r3
 800892e:	d903      	bls.n	8008938 <xTaskResumeAll+0x7c>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008934:	4a2a      	ldr	r2, [pc, #168]	; (80089e0 <xTaskResumeAll+0x124>)
 8008936:	6013      	str	r3, [r2, #0]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893c:	4613      	mov	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4a27      	ldr	r2, [pc, #156]	; (80089e4 <xTaskResumeAll+0x128>)
 8008946:	441a      	add	r2, r3
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	3304      	adds	r3, #4
 800894c:	4619      	mov	r1, r3
 800894e:	4610      	mov	r0, r2
 8008950:	f7fe ff59 	bl	8007806 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008958:	4b23      	ldr	r3, [pc, #140]	; (80089e8 <xTaskResumeAll+0x12c>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895e:	429a      	cmp	r2, r3
 8008960:	d302      	bcc.n	8008968 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008962:	4b22      	ldr	r3, [pc, #136]	; (80089ec <xTaskResumeAll+0x130>)
 8008964:	2201      	movs	r2, #1
 8008966:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008968:	4b1c      	ldr	r3, [pc, #112]	; (80089dc <xTaskResumeAll+0x120>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1cb      	bne.n	8008908 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008976:	f000 fb5f 	bl	8009038 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800897a:	4b1d      	ldr	r3, [pc, #116]	; (80089f0 <xTaskResumeAll+0x134>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d010      	beq.n	80089a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008986:	f000 f847 	bl	8008a18 <xTaskIncrementTick>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d002      	beq.n	8008996 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008990:	4b16      	ldr	r3, [pc, #88]	; (80089ec <xTaskResumeAll+0x130>)
 8008992:	2201      	movs	r2, #1
 8008994:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	3b01      	subs	r3, #1
 800899a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1f1      	bne.n	8008986 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80089a2:	4b13      	ldr	r3, [pc, #76]	; (80089f0 <xTaskResumeAll+0x134>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089a8:	4b10      	ldr	r3, [pc, #64]	; (80089ec <xTaskResumeAll+0x130>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d009      	beq.n	80089c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089b0:	2301      	movs	r3, #1
 80089b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089b4:	4b0f      	ldr	r3, [pc, #60]	; (80089f4 <xTaskResumeAll+0x138>)
 80089b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ba:	601a      	str	r2, [r3, #0]
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089c4:	f001 f8e6 	bl	8009b94 <vPortExitCritical>

	return xAlreadyYielded;
 80089c8:	68bb      	ldr	r3, [r7, #8]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20000f84 	.word	0x20000f84
 80089d8:	20000f5c 	.word	0x20000f5c
 80089dc:	20000f1c 	.word	0x20000f1c
 80089e0:	20000f64 	.word	0x20000f64
 80089e4:	20000a8c 	.word	0x20000a8c
 80089e8:	20000a88 	.word	0x20000a88
 80089ec:	20000f70 	.word	0x20000f70
 80089f0:	20000f6c 	.word	0x20000f6c
 80089f4:	e000ed04 	.word	0xe000ed04

080089f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80089fe:	4b05      	ldr	r3, [pc, #20]	; (8008a14 <xTaskGetTickCount+0x1c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a04:	687b      	ldr	r3, [r7, #4]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	20000f60 	.word	0x20000f60

08008a18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a22:	4b4f      	ldr	r3, [pc, #316]	; (8008b60 <xTaskIncrementTick+0x148>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	f040 808f 	bne.w	8008b4a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a2c:	4b4d      	ldr	r3, [pc, #308]	; (8008b64 <xTaskIncrementTick+0x14c>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	3301      	adds	r3, #1
 8008a32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a34:	4a4b      	ldr	r2, [pc, #300]	; (8008b64 <xTaskIncrementTick+0x14c>)
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d120      	bne.n	8008a82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a40:	4b49      	ldr	r3, [pc, #292]	; (8008b68 <xTaskIncrementTick+0x150>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00a      	beq.n	8008a60 <xTaskIncrementTick+0x48>
	__asm volatile
 8008a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	603b      	str	r3, [r7, #0]
}
 8008a5c:	bf00      	nop
 8008a5e:	e7fe      	b.n	8008a5e <xTaskIncrementTick+0x46>
 8008a60:	4b41      	ldr	r3, [pc, #260]	; (8008b68 <xTaskIncrementTick+0x150>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	60fb      	str	r3, [r7, #12]
 8008a66:	4b41      	ldr	r3, [pc, #260]	; (8008b6c <xTaskIncrementTick+0x154>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a3f      	ldr	r2, [pc, #252]	; (8008b68 <xTaskIncrementTick+0x150>)
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	4a3f      	ldr	r2, [pc, #252]	; (8008b6c <xTaskIncrementTick+0x154>)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6013      	str	r3, [r2, #0]
 8008a74:	4b3e      	ldr	r3, [pc, #248]	; (8008b70 <xTaskIncrementTick+0x158>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	4a3d      	ldr	r2, [pc, #244]	; (8008b70 <xTaskIncrementTick+0x158>)
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	f000 fadb 	bl	8009038 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a82:	4b3c      	ldr	r3, [pc, #240]	; (8008b74 <xTaskIncrementTick+0x15c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d349      	bcc.n	8008b20 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a8c:	4b36      	ldr	r3, [pc, #216]	; (8008b68 <xTaskIncrementTick+0x150>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d104      	bne.n	8008aa0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a96:	4b37      	ldr	r3, [pc, #220]	; (8008b74 <xTaskIncrementTick+0x15c>)
 8008a98:	f04f 32ff 	mov.w	r2, #4294967295
 8008a9c:	601a      	str	r2, [r3, #0]
					break;
 8008a9e:	e03f      	b.n	8008b20 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aa0:	4b31      	ldr	r3, [pc, #196]	; (8008b68 <xTaskIncrementTick+0x150>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d203      	bcs.n	8008ac0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ab8:	4a2e      	ldr	r2, [pc, #184]	; (8008b74 <xTaskIncrementTick+0x15c>)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008abe:	e02f      	b.n	8008b20 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	3304      	adds	r3, #4
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7fe fefb 	bl	80078c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d004      	beq.n	8008adc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	3318      	adds	r3, #24
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe fef2 	bl	80078c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae0:	4b25      	ldr	r3, [pc, #148]	; (8008b78 <xTaskIncrementTick+0x160>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d903      	bls.n	8008af0 <xTaskIncrementTick+0xd8>
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aec:	4a22      	ldr	r2, [pc, #136]	; (8008b78 <xTaskIncrementTick+0x160>)
 8008aee:	6013      	str	r3, [r2, #0]
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af4:	4613      	mov	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4a1f      	ldr	r2, [pc, #124]	; (8008b7c <xTaskIncrementTick+0x164>)
 8008afe:	441a      	add	r2, r3
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	3304      	adds	r3, #4
 8008b04:	4619      	mov	r1, r3
 8008b06:	4610      	mov	r0, r2
 8008b08:	f7fe fe7d 	bl	8007806 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b10:	4b1b      	ldr	r3, [pc, #108]	; (8008b80 <xTaskIncrementTick+0x168>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d3b8      	bcc.n	8008a8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b1e:	e7b5      	b.n	8008a8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b20:	4b17      	ldr	r3, [pc, #92]	; (8008b80 <xTaskIncrementTick+0x168>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b26:	4915      	ldr	r1, [pc, #84]	; (8008b7c <xTaskIncrementTick+0x164>)
 8008b28:	4613      	mov	r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4413      	add	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	440b      	add	r3, r1
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d901      	bls.n	8008b3c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b3c:	4b11      	ldr	r3, [pc, #68]	; (8008b84 <xTaskIncrementTick+0x16c>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d007      	beq.n	8008b54 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008b44:	2301      	movs	r3, #1
 8008b46:	617b      	str	r3, [r7, #20]
 8008b48:	e004      	b.n	8008b54 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b4a:	4b0f      	ldr	r3, [pc, #60]	; (8008b88 <xTaskIncrementTick+0x170>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	4a0d      	ldr	r2, [pc, #52]	; (8008b88 <xTaskIncrementTick+0x170>)
 8008b52:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b54:	697b      	ldr	r3, [r7, #20]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3718      	adds	r7, #24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	20000f84 	.word	0x20000f84
 8008b64:	20000f60 	.word	0x20000f60
 8008b68:	20000f14 	.word	0x20000f14
 8008b6c:	20000f18 	.word	0x20000f18
 8008b70:	20000f74 	.word	0x20000f74
 8008b74:	20000f7c 	.word	0x20000f7c
 8008b78:	20000f64 	.word	0x20000f64
 8008b7c:	20000a8c 	.word	0x20000a8c
 8008b80:	20000a88 	.word	0x20000a88
 8008b84:	20000f70 	.word	0x20000f70
 8008b88:	20000f6c 	.word	0x20000f6c

08008b8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b92:	4b2a      	ldr	r3, [pc, #168]	; (8008c3c <vTaskSwitchContext+0xb0>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b9a:	4b29      	ldr	r3, [pc, #164]	; (8008c40 <vTaskSwitchContext+0xb4>)
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ba0:	e046      	b.n	8008c30 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008ba2:	4b27      	ldr	r3, [pc, #156]	; (8008c40 <vTaskSwitchContext+0xb4>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ba8:	4b26      	ldr	r3, [pc, #152]	; (8008c44 <vTaskSwitchContext+0xb8>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	60fb      	str	r3, [r7, #12]
 8008bae:	e010      	b.n	8008bd2 <vTaskSwitchContext+0x46>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10a      	bne.n	8008bcc <vTaskSwitchContext+0x40>
	__asm volatile
 8008bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bba:	f383 8811 	msr	BASEPRI, r3
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	607b      	str	r3, [r7, #4]
}
 8008bc8:	bf00      	nop
 8008bca:	e7fe      	b.n	8008bca <vTaskSwitchContext+0x3e>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	60fb      	str	r3, [r7, #12]
 8008bd2:	491d      	ldr	r1, [pc, #116]	; (8008c48 <vTaskSwitchContext+0xbc>)
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4413      	add	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	440b      	add	r3, r1
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d0e4      	beq.n	8008bb0 <vTaskSwitchContext+0x24>
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	4613      	mov	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4413      	add	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4a15      	ldr	r2, [pc, #84]	; (8008c48 <vTaskSwitchContext+0xbc>)
 8008bf2:	4413      	add	r3, r2
 8008bf4:	60bb      	str	r3, [r7, #8]
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	685a      	ldr	r2, [r3, #4]
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	605a      	str	r2, [r3, #4]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	3308      	adds	r3, #8
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d104      	bne.n	8008c16 <vTaskSwitchContext+0x8a>
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	685a      	ldr	r2, [r3, #4]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	605a      	str	r2, [r3, #4]
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	4a0b      	ldr	r2, [pc, #44]	; (8008c4c <vTaskSwitchContext+0xc0>)
 8008c1e:	6013      	str	r3, [r2, #0]
 8008c20:	4a08      	ldr	r2, [pc, #32]	; (8008c44 <vTaskSwitchContext+0xb8>)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c26:	4b09      	ldr	r3, [pc, #36]	; (8008c4c <vTaskSwitchContext+0xc0>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	3354      	adds	r3, #84	; 0x54
 8008c2c:	4a08      	ldr	r2, [pc, #32]	; (8008c50 <vTaskSwitchContext+0xc4>)
 8008c2e:	6013      	str	r3, [r2, #0]
}
 8008c30:	bf00      	nop
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	20000f84 	.word	0x20000f84
 8008c40:	20000f70 	.word	0x20000f70
 8008c44:	20000f64 	.word	0x20000f64
 8008c48:	20000a8c 	.word	0x20000a8c
 8008c4c:	20000a88 	.word	0x20000a88
 8008c50:	2000001c 	.word	0x2000001c

08008c54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10a      	bne.n	8008c7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	60fb      	str	r3, [r7, #12]
}
 8008c76:	bf00      	nop
 8008c78:	e7fe      	b.n	8008c78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c7a:	4b07      	ldr	r3, [pc, #28]	; (8008c98 <vTaskPlaceOnEventList+0x44>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3318      	adds	r3, #24
 8008c80:	4619      	mov	r1, r3
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7fe fde3 	bl	800784e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c88:	2101      	movs	r1, #1
 8008c8a:	6838      	ldr	r0, [r7, #0]
 8008c8c:	f000 fa80 	bl	8009190 <prvAddCurrentTaskToDelayedList>
}
 8008c90:	bf00      	nop
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	20000a88 	.word	0x20000a88

08008c9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b086      	sub	sp, #24
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10a      	bne.n	8008cc4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	617b      	str	r3, [r7, #20]
}
 8008cc0:	bf00      	nop
 8008cc2:	e7fe      	b.n	8008cc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cc4:	4b0a      	ldr	r3, [pc, #40]	; (8008cf0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3318      	adds	r3, #24
 8008cca:	4619      	mov	r1, r3
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f7fe fd9a 	bl	8007806 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d002      	beq.n	8008cde <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8008cdc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008cde:	6879      	ldr	r1, [r7, #4]
 8008ce0:	68b8      	ldr	r0, [r7, #8]
 8008ce2:	f000 fa55 	bl	8009190 <prvAddCurrentTaskToDelayedList>
	}
 8008ce6:	bf00      	nop
 8008ce8:	3718      	adds	r7, #24
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	20000a88 	.word	0x20000a88

08008cf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10a      	bne.n	8008d20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0e:	f383 8811 	msr	BASEPRI, r3
 8008d12:	f3bf 8f6f 	isb	sy
 8008d16:	f3bf 8f4f 	dsb	sy
 8008d1a:	60fb      	str	r3, [r7, #12]
}
 8008d1c:	bf00      	nop
 8008d1e:	e7fe      	b.n	8008d1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	3318      	adds	r3, #24
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7fe fdcb 	bl	80078c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d2a:	4b1e      	ldr	r3, [pc, #120]	; (8008da4 <xTaskRemoveFromEventList+0xb0>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d11d      	bne.n	8008d6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	3304      	adds	r3, #4
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fe fdc2 	bl	80078c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d40:	4b19      	ldr	r3, [pc, #100]	; (8008da8 <xTaskRemoveFromEventList+0xb4>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d903      	bls.n	8008d50 <xTaskRemoveFromEventList+0x5c>
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4c:	4a16      	ldr	r2, [pc, #88]	; (8008da8 <xTaskRemoveFromEventList+0xb4>)
 8008d4e:	6013      	str	r3, [r2, #0]
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d54:	4613      	mov	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	4413      	add	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4a13      	ldr	r2, [pc, #76]	; (8008dac <xTaskRemoveFromEventList+0xb8>)
 8008d5e:	441a      	add	r2, r3
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	3304      	adds	r3, #4
 8008d64:	4619      	mov	r1, r3
 8008d66:	4610      	mov	r0, r2
 8008d68:	f7fe fd4d 	bl	8007806 <vListInsertEnd>
 8008d6c:	e005      	b.n	8008d7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	3318      	adds	r3, #24
 8008d72:	4619      	mov	r1, r3
 8008d74:	480e      	ldr	r0, [pc, #56]	; (8008db0 <xTaskRemoveFromEventList+0xbc>)
 8008d76:	f7fe fd46 	bl	8007806 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7e:	4b0d      	ldr	r3, [pc, #52]	; (8008db4 <xTaskRemoveFromEventList+0xc0>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d905      	bls.n	8008d94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d8c:	4b0a      	ldr	r3, [pc, #40]	; (8008db8 <xTaskRemoveFromEventList+0xc4>)
 8008d8e:	2201      	movs	r2, #1
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	e001      	b.n	8008d98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008d94:	2300      	movs	r3, #0
 8008d96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d98:	697b      	ldr	r3, [r7, #20]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3718      	adds	r7, #24
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	20000f84 	.word	0x20000f84
 8008da8:	20000f64 	.word	0x20000f64
 8008dac:	20000a8c 	.word	0x20000a8c
 8008db0:	20000f1c 	.word	0x20000f1c
 8008db4:	20000a88 	.word	0x20000a88
 8008db8:	20000f70 	.word	0x20000f70

08008dbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008dc4:	4b06      	ldr	r3, [pc, #24]	; (8008de0 <vTaskInternalSetTimeOutState+0x24>)
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008dcc:	4b05      	ldr	r3, [pc, #20]	; (8008de4 <vTaskInternalSetTimeOutState+0x28>)
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	605a      	str	r2, [r3, #4]
}
 8008dd4:	bf00      	nop
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr
 8008de0:	20000f74 	.word	0x20000f74
 8008de4:	20000f60 	.word	0x20000f60

08008de8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b088      	sub	sp, #32
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10a      	bne.n	8008e0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfc:	f383 8811 	msr	BASEPRI, r3
 8008e00:	f3bf 8f6f 	isb	sy
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	613b      	str	r3, [r7, #16]
}
 8008e0a:	bf00      	nop
 8008e0c:	e7fe      	b.n	8008e0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10a      	bne.n	8008e2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	60fb      	str	r3, [r7, #12]
}
 8008e26:	bf00      	nop
 8008e28:	e7fe      	b.n	8008e28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008e2a:	f000 fe83 	bl	8009b34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e2e:	4b1d      	ldr	r3, [pc, #116]	; (8008ea4 <xTaskCheckForTimeOut+0xbc>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	69ba      	ldr	r2, [r7, #24]
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e46:	d102      	bne.n	8008e4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	61fb      	str	r3, [r7, #28]
 8008e4c:	e023      	b.n	8008e96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	4b15      	ldr	r3, [pc, #84]	; (8008ea8 <xTaskCheckForTimeOut+0xc0>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d007      	beq.n	8008e6a <xTaskCheckForTimeOut+0x82>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	69ba      	ldr	r2, [r7, #24]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d302      	bcc.n	8008e6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e64:	2301      	movs	r3, #1
 8008e66:	61fb      	str	r3, [r7, #28]
 8008e68:	e015      	b.n	8008e96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d20b      	bcs.n	8008e8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	1ad2      	subs	r2, r2, r3
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f7ff ff9b 	bl	8008dbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e86:	2300      	movs	r3, #0
 8008e88:	61fb      	str	r3, [r7, #28]
 8008e8a:	e004      	b.n	8008e96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e92:	2301      	movs	r3, #1
 8008e94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e96:	f000 fe7d 	bl	8009b94 <vPortExitCritical>

	return xReturn;
 8008e9a:	69fb      	ldr	r3, [r7, #28]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3720      	adds	r7, #32
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	20000f60 	.word	0x20000f60
 8008ea8:	20000f74 	.word	0x20000f74

08008eac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008eac:	b480      	push	{r7}
 8008eae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008eb0:	4b03      	ldr	r3, [pc, #12]	; (8008ec0 <vTaskMissedYield+0x14>)
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	601a      	str	r2, [r3, #0]
}
 8008eb6:	bf00      	nop
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	20000f70 	.word	0x20000f70

08008ec4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ecc:	f000 f852 	bl	8008f74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ed0:	4b06      	ldr	r3, [pc, #24]	; (8008eec <prvIdleTask+0x28>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d9f9      	bls.n	8008ecc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ed8:	4b05      	ldr	r3, [pc, #20]	; (8008ef0 <prvIdleTask+0x2c>)
 8008eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ee8:	e7f0      	b.n	8008ecc <prvIdleTask+0x8>
 8008eea:	bf00      	nop
 8008eec:	20000a8c 	.word	0x20000a8c
 8008ef0:	e000ed04 	.word	0xe000ed04

08008ef4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008efa:	2300      	movs	r3, #0
 8008efc:	607b      	str	r3, [r7, #4]
 8008efe:	e00c      	b.n	8008f1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	4613      	mov	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4a12      	ldr	r2, [pc, #72]	; (8008f54 <prvInitialiseTaskLists+0x60>)
 8008f0c:	4413      	add	r3, r2
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fe fc4c 	bl	80077ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	3301      	adds	r3, #1
 8008f18:	607b      	str	r3, [r7, #4]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2b37      	cmp	r3, #55	; 0x37
 8008f1e:	d9ef      	bls.n	8008f00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f20:	480d      	ldr	r0, [pc, #52]	; (8008f58 <prvInitialiseTaskLists+0x64>)
 8008f22:	f7fe fc43 	bl	80077ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f26:	480d      	ldr	r0, [pc, #52]	; (8008f5c <prvInitialiseTaskLists+0x68>)
 8008f28:	f7fe fc40 	bl	80077ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f2c:	480c      	ldr	r0, [pc, #48]	; (8008f60 <prvInitialiseTaskLists+0x6c>)
 8008f2e:	f7fe fc3d 	bl	80077ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f32:	480c      	ldr	r0, [pc, #48]	; (8008f64 <prvInitialiseTaskLists+0x70>)
 8008f34:	f7fe fc3a 	bl	80077ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f38:	480b      	ldr	r0, [pc, #44]	; (8008f68 <prvInitialiseTaskLists+0x74>)
 8008f3a:	f7fe fc37 	bl	80077ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f3e:	4b0b      	ldr	r3, [pc, #44]	; (8008f6c <prvInitialiseTaskLists+0x78>)
 8008f40:	4a05      	ldr	r2, [pc, #20]	; (8008f58 <prvInitialiseTaskLists+0x64>)
 8008f42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f44:	4b0a      	ldr	r3, [pc, #40]	; (8008f70 <prvInitialiseTaskLists+0x7c>)
 8008f46:	4a05      	ldr	r2, [pc, #20]	; (8008f5c <prvInitialiseTaskLists+0x68>)
 8008f48:	601a      	str	r2, [r3, #0]
}
 8008f4a:	bf00      	nop
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	20000a8c 	.word	0x20000a8c
 8008f58:	20000eec 	.word	0x20000eec
 8008f5c:	20000f00 	.word	0x20000f00
 8008f60:	20000f1c 	.word	0x20000f1c
 8008f64:	20000f30 	.word	0x20000f30
 8008f68:	20000f48 	.word	0x20000f48
 8008f6c:	20000f14 	.word	0x20000f14
 8008f70:	20000f18 	.word	0x20000f18

08008f74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f7a:	e019      	b.n	8008fb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f7c:	f000 fdda 	bl	8009b34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f80:	4b10      	ldr	r3, [pc, #64]	; (8008fc4 <prvCheckTasksWaitingTermination+0x50>)
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fe fc97 	bl	80078c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f92:	4b0d      	ldr	r3, [pc, #52]	; (8008fc8 <prvCheckTasksWaitingTermination+0x54>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	3b01      	subs	r3, #1
 8008f98:	4a0b      	ldr	r2, [pc, #44]	; (8008fc8 <prvCheckTasksWaitingTermination+0x54>)
 8008f9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f9c:	4b0b      	ldr	r3, [pc, #44]	; (8008fcc <prvCheckTasksWaitingTermination+0x58>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	4a0a      	ldr	r2, [pc, #40]	; (8008fcc <prvCheckTasksWaitingTermination+0x58>)
 8008fa4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008fa6:	f000 fdf5 	bl	8009b94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f810 	bl	8008fd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fb0:	4b06      	ldr	r3, [pc, #24]	; (8008fcc <prvCheckTasksWaitingTermination+0x58>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1e1      	bne.n	8008f7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008fb8:	bf00      	nop
 8008fba:	bf00      	nop
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	20000f30 	.word	0x20000f30
 8008fc8:	20000f5c 	.word	0x20000f5c
 8008fcc:	20000f44 	.word	0x20000f44

08008fd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	3354      	adds	r3, #84	; 0x54
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f001 fcdb 	bl	800a998 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d108      	bne.n	8008ffe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f000 ff8d 	bl	8009f10 <vPortFree>
				vPortFree( pxTCB );
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 ff8a 	bl	8009f10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ffc:	e018      	b.n	8009030 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009004:	2b01      	cmp	r3, #1
 8009006:	d103      	bne.n	8009010 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 ff81 	bl	8009f10 <vPortFree>
	}
 800900e:	e00f      	b.n	8009030 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009016:	2b02      	cmp	r3, #2
 8009018:	d00a      	beq.n	8009030 <prvDeleteTCB+0x60>
	__asm volatile
 800901a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	60fb      	str	r3, [r7, #12]
}
 800902c:	bf00      	nop
 800902e:	e7fe      	b.n	800902e <prvDeleteTCB+0x5e>
	}
 8009030:	bf00      	nop
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800903e:	4b0c      	ldr	r3, [pc, #48]	; (8009070 <prvResetNextTaskUnblockTime+0x38>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d104      	bne.n	8009052 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009048:	4b0a      	ldr	r3, [pc, #40]	; (8009074 <prvResetNextTaskUnblockTime+0x3c>)
 800904a:	f04f 32ff 	mov.w	r2, #4294967295
 800904e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009050:	e008      	b.n	8009064 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009052:	4b07      	ldr	r3, [pc, #28]	; (8009070 <prvResetNextTaskUnblockTime+0x38>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	4a04      	ldr	r2, [pc, #16]	; (8009074 <prvResetNextTaskUnblockTime+0x3c>)
 8009062:	6013      	str	r3, [r2, #0]
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	20000f14 	.word	0x20000f14
 8009074:	20000f7c 	.word	0x20000f7c

08009078 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800907e:	4b0b      	ldr	r3, [pc, #44]	; (80090ac <xTaskGetSchedulerState+0x34>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d102      	bne.n	800908c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009086:	2301      	movs	r3, #1
 8009088:	607b      	str	r3, [r7, #4]
 800908a:	e008      	b.n	800909e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800908c:	4b08      	ldr	r3, [pc, #32]	; (80090b0 <xTaskGetSchedulerState+0x38>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d102      	bne.n	800909a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009094:	2302      	movs	r3, #2
 8009096:	607b      	str	r3, [r7, #4]
 8009098:	e001      	b.n	800909e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800909a:	2300      	movs	r3, #0
 800909c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800909e:	687b      	ldr	r3, [r7, #4]
	}
 80090a0:	4618      	mov	r0, r3
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	20000f68 	.word	0x20000f68
 80090b0:	20000f84 	.word	0x20000f84

080090b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80090c0:	2300      	movs	r3, #0
 80090c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d056      	beq.n	8009178 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80090ca:	4b2e      	ldr	r3, [pc, #184]	; (8009184 <xTaskPriorityDisinherit+0xd0>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d00a      	beq.n	80090ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80090d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	60fb      	str	r3, [r7, #12]
}
 80090e6:	bf00      	nop
 80090e8:	e7fe      	b.n	80090e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10a      	bne.n	8009108 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	60bb      	str	r3, [r7, #8]
}
 8009104:	bf00      	nop
 8009106:	e7fe      	b.n	8009106 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800910c:	1e5a      	subs	r2, r3, #1
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800911a:	429a      	cmp	r2, r3
 800911c:	d02c      	beq.n	8009178 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009122:	2b00      	cmp	r3, #0
 8009124:	d128      	bne.n	8009178 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	3304      	adds	r3, #4
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe fbc8 	bl	80078c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009148:	4b0f      	ldr	r3, [pc, #60]	; (8009188 <xTaskPriorityDisinherit+0xd4>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	429a      	cmp	r2, r3
 800914e:	d903      	bls.n	8009158 <xTaskPriorityDisinherit+0xa4>
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009154:	4a0c      	ldr	r2, [pc, #48]	; (8009188 <xTaskPriorityDisinherit+0xd4>)
 8009156:	6013      	str	r3, [r2, #0]
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800915c:	4613      	mov	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4a09      	ldr	r2, [pc, #36]	; (800918c <xTaskPriorityDisinherit+0xd8>)
 8009166:	441a      	add	r2, r3
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	3304      	adds	r3, #4
 800916c:	4619      	mov	r1, r3
 800916e:	4610      	mov	r0, r2
 8009170:	f7fe fb49 	bl	8007806 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009174:	2301      	movs	r3, #1
 8009176:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009178:	697b      	ldr	r3, [r7, #20]
	}
 800917a:	4618      	mov	r0, r3
 800917c:	3718      	adds	r7, #24
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	20000a88 	.word	0x20000a88
 8009188:	20000f64 	.word	0x20000f64
 800918c:	20000a8c 	.word	0x20000a8c

08009190 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800919a:	4b21      	ldr	r3, [pc, #132]	; (8009220 <prvAddCurrentTaskToDelayedList+0x90>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091a0:	4b20      	ldr	r3, [pc, #128]	; (8009224 <prvAddCurrentTaskToDelayedList+0x94>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3304      	adds	r3, #4
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fe fb8a 	bl	80078c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b2:	d10a      	bne.n	80091ca <prvAddCurrentTaskToDelayedList+0x3a>
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d007      	beq.n	80091ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091ba:	4b1a      	ldr	r3, [pc, #104]	; (8009224 <prvAddCurrentTaskToDelayedList+0x94>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3304      	adds	r3, #4
 80091c0:	4619      	mov	r1, r3
 80091c2:	4819      	ldr	r0, [pc, #100]	; (8009228 <prvAddCurrentTaskToDelayedList+0x98>)
 80091c4:	f7fe fb1f 	bl	8007806 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80091c8:	e026      	b.n	8009218 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4413      	add	r3, r2
 80091d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80091d2:	4b14      	ldr	r3, [pc, #80]	; (8009224 <prvAddCurrentTaskToDelayedList+0x94>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d209      	bcs.n	80091f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091e2:	4b12      	ldr	r3, [pc, #72]	; (800922c <prvAddCurrentTaskToDelayedList+0x9c>)
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	4b0f      	ldr	r3, [pc, #60]	; (8009224 <prvAddCurrentTaskToDelayedList+0x94>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3304      	adds	r3, #4
 80091ec:	4619      	mov	r1, r3
 80091ee:	4610      	mov	r0, r2
 80091f0:	f7fe fb2d 	bl	800784e <vListInsert>
}
 80091f4:	e010      	b.n	8009218 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091f6:	4b0e      	ldr	r3, [pc, #56]	; (8009230 <prvAddCurrentTaskToDelayedList+0xa0>)
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	4b0a      	ldr	r3, [pc, #40]	; (8009224 <prvAddCurrentTaskToDelayedList+0x94>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	3304      	adds	r3, #4
 8009200:	4619      	mov	r1, r3
 8009202:	4610      	mov	r0, r2
 8009204:	f7fe fb23 	bl	800784e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009208:	4b0a      	ldr	r3, [pc, #40]	; (8009234 <prvAddCurrentTaskToDelayedList+0xa4>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	429a      	cmp	r2, r3
 8009210:	d202      	bcs.n	8009218 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009212:	4a08      	ldr	r2, [pc, #32]	; (8009234 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	6013      	str	r3, [r2, #0]
}
 8009218:	bf00      	nop
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	20000f60 	.word	0x20000f60
 8009224:	20000a88 	.word	0x20000a88
 8009228:	20000f48 	.word	0x20000f48
 800922c:	20000f18 	.word	0x20000f18
 8009230:	20000f14 	.word	0x20000f14
 8009234:	20000f7c 	.word	0x20000f7c

08009238 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08a      	sub	sp, #40	; 0x28
 800923c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800923e:	2300      	movs	r3, #0
 8009240:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009242:	f000 fb07 	bl	8009854 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009246:	4b1c      	ldr	r3, [pc, #112]	; (80092b8 <xTimerCreateTimerTask+0x80>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d021      	beq.n	8009292 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800924e:	2300      	movs	r3, #0
 8009250:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009252:	2300      	movs	r3, #0
 8009254:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009256:	1d3a      	adds	r2, r7, #4
 8009258:	f107 0108 	add.w	r1, r7, #8
 800925c:	f107 030c 	add.w	r3, r7, #12
 8009260:	4618      	mov	r0, r3
 8009262:	f7fe fa89 	bl	8007778 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009266:	6879      	ldr	r1, [r7, #4]
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	9202      	str	r2, [sp, #8]
 800926e:	9301      	str	r3, [sp, #4]
 8009270:	2302      	movs	r3, #2
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	2300      	movs	r3, #0
 8009276:	460a      	mov	r2, r1
 8009278:	4910      	ldr	r1, [pc, #64]	; (80092bc <xTimerCreateTimerTask+0x84>)
 800927a:	4811      	ldr	r0, [pc, #68]	; (80092c0 <xTimerCreateTimerTask+0x88>)
 800927c:	f7ff f836 	bl	80082ec <xTaskCreateStatic>
 8009280:	4603      	mov	r3, r0
 8009282:	4a10      	ldr	r2, [pc, #64]	; (80092c4 <xTimerCreateTimerTask+0x8c>)
 8009284:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009286:	4b0f      	ldr	r3, [pc, #60]	; (80092c4 <xTimerCreateTimerTask+0x8c>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800928e:	2301      	movs	r3, #1
 8009290:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10a      	bne.n	80092ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929c:	f383 8811 	msr	BASEPRI, r3
 80092a0:	f3bf 8f6f 	isb	sy
 80092a4:	f3bf 8f4f 	dsb	sy
 80092a8:	613b      	str	r3, [r7, #16]
}
 80092aa:	bf00      	nop
 80092ac:	e7fe      	b.n	80092ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80092ae:	697b      	ldr	r3, [r7, #20]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3718      	adds	r7, #24
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	20000fb8 	.word	0x20000fb8
 80092bc:	0800bb80 	.word	0x0800bb80
 80092c0:	080093fd 	.word	0x080093fd
 80092c4:	20000fbc 	.word	0x20000fbc

080092c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b08a      	sub	sp, #40	; 0x28
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]
 80092d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80092d6:	2300      	movs	r3, #0
 80092d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10a      	bne.n	80092f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80092e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	623b      	str	r3, [r7, #32]
}
 80092f2:	bf00      	nop
 80092f4:	e7fe      	b.n	80092f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80092f6:	4b1a      	ldr	r3, [pc, #104]	; (8009360 <xTimerGenericCommand+0x98>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d02a      	beq.n	8009354 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	2b05      	cmp	r3, #5
 800930e:	dc18      	bgt.n	8009342 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009310:	f7ff feb2 	bl	8009078 <xTaskGetSchedulerState>
 8009314:	4603      	mov	r3, r0
 8009316:	2b02      	cmp	r3, #2
 8009318:	d109      	bne.n	800932e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800931a:	4b11      	ldr	r3, [pc, #68]	; (8009360 <xTimerGenericCommand+0x98>)
 800931c:	6818      	ldr	r0, [r3, #0]
 800931e:	f107 0110 	add.w	r1, r7, #16
 8009322:	2300      	movs	r3, #0
 8009324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009326:	f7fe fbf9 	bl	8007b1c <xQueueGenericSend>
 800932a:	6278      	str	r0, [r7, #36]	; 0x24
 800932c:	e012      	b.n	8009354 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800932e:	4b0c      	ldr	r3, [pc, #48]	; (8009360 <xTimerGenericCommand+0x98>)
 8009330:	6818      	ldr	r0, [r3, #0]
 8009332:	f107 0110 	add.w	r1, r7, #16
 8009336:	2300      	movs	r3, #0
 8009338:	2200      	movs	r2, #0
 800933a:	f7fe fbef 	bl	8007b1c <xQueueGenericSend>
 800933e:	6278      	str	r0, [r7, #36]	; 0x24
 8009340:	e008      	b.n	8009354 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009342:	4b07      	ldr	r3, [pc, #28]	; (8009360 <xTimerGenericCommand+0x98>)
 8009344:	6818      	ldr	r0, [r3, #0]
 8009346:	f107 0110 	add.w	r1, r7, #16
 800934a:	2300      	movs	r3, #0
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	f7fe fce3 	bl	8007d18 <xQueueGenericSendFromISR>
 8009352:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009356:	4618      	mov	r0, r3
 8009358:	3728      	adds	r7, #40	; 0x28
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	20000fb8 	.word	0x20000fb8

08009364 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b088      	sub	sp, #32
 8009368:	af02      	add	r7, sp, #8
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800936e:	4b22      	ldr	r3, [pc, #136]	; (80093f8 <prvProcessExpiredTimer+0x94>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	3304      	adds	r3, #4
 800937c:	4618      	mov	r0, r3
 800937e:	f7fe fa9f 	bl	80078c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009388:	f003 0304 	and.w	r3, r3, #4
 800938c:	2b00      	cmp	r3, #0
 800938e:	d022      	beq.n	80093d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	699a      	ldr	r2, [r3, #24]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	18d1      	adds	r1, r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	6978      	ldr	r0, [r7, #20]
 800939e:	f000 f8d1 	bl	8009544 <prvInsertTimerInActiveList>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d01f      	beq.n	80093e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093a8:	2300      	movs	r3, #0
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	2300      	movs	r3, #0
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	2100      	movs	r1, #0
 80093b2:	6978      	ldr	r0, [r7, #20]
 80093b4:	f7ff ff88 	bl	80092c8 <xTimerGenericCommand>
 80093b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d113      	bne.n	80093e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	60fb      	str	r3, [r7, #12]
}
 80093d2:	bf00      	nop
 80093d4:	e7fe      	b.n	80093d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093dc:	f023 0301 	bic.w	r3, r3, #1
 80093e0:	b2da      	uxtb	r2, r3
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	6a1b      	ldr	r3, [r3, #32]
 80093ec:	6978      	ldr	r0, [r7, #20]
 80093ee:	4798      	blx	r3
}
 80093f0:	bf00      	nop
 80093f2:	3718      	adds	r7, #24
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	20000fb0 	.word	0x20000fb0

080093fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009404:	f107 0308 	add.w	r3, r7, #8
 8009408:	4618      	mov	r0, r3
 800940a:	f000 f857 	bl	80094bc <prvGetNextExpireTime>
 800940e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	4619      	mov	r1, r3
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f000 f803 	bl	8009420 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800941a:	f000 f8d5 	bl	80095c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800941e:	e7f1      	b.n	8009404 <prvTimerTask+0x8>

08009420 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800942a:	f7ff fa39 	bl	80088a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800942e:	f107 0308 	add.w	r3, r7, #8
 8009432:	4618      	mov	r0, r3
 8009434:	f000 f866 	bl	8009504 <prvSampleTimeNow>
 8009438:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d130      	bne.n	80094a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10a      	bne.n	800945c <prvProcessTimerOrBlockTask+0x3c>
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	429a      	cmp	r2, r3
 800944c:	d806      	bhi.n	800945c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800944e:	f7ff fa35 	bl	80088bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009452:	68f9      	ldr	r1, [r7, #12]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7ff ff85 	bl	8009364 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800945a:	e024      	b.n	80094a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d008      	beq.n	8009474 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009462:	4b13      	ldr	r3, [pc, #76]	; (80094b0 <prvProcessTimerOrBlockTask+0x90>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d101      	bne.n	8009470 <prvProcessTimerOrBlockTask+0x50>
 800946c:	2301      	movs	r3, #1
 800946e:	e000      	b.n	8009472 <prvProcessTimerOrBlockTask+0x52>
 8009470:	2300      	movs	r3, #0
 8009472:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009474:	4b0f      	ldr	r3, [pc, #60]	; (80094b4 <prvProcessTimerOrBlockTask+0x94>)
 8009476:	6818      	ldr	r0, [r3, #0]
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	4619      	mov	r1, r3
 8009482:	f7fe feff 	bl	8008284 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009486:	f7ff fa19 	bl	80088bc <xTaskResumeAll>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10a      	bne.n	80094a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009490:	4b09      	ldr	r3, [pc, #36]	; (80094b8 <prvProcessTimerOrBlockTask+0x98>)
 8009492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	f3bf 8f6f 	isb	sy
}
 80094a0:	e001      	b.n	80094a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80094a2:	f7ff fa0b 	bl	80088bc <xTaskResumeAll>
}
 80094a6:	bf00      	nop
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	20000fb4 	.word	0x20000fb4
 80094b4:	20000fb8 	.word	0x20000fb8
 80094b8:	e000ed04 	.word	0xe000ed04

080094bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094c4:	4b0e      	ldr	r3, [pc, #56]	; (8009500 <prvGetNextExpireTime+0x44>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d101      	bne.n	80094d2 <prvGetNextExpireTime+0x16>
 80094ce:	2201      	movs	r2, #1
 80094d0:	e000      	b.n	80094d4 <prvGetNextExpireTime+0x18>
 80094d2:	2200      	movs	r2, #0
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d105      	bne.n	80094ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094e0:	4b07      	ldr	r3, [pc, #28]	; (8009500 <prvGetNextExpireTime+0x44>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	60fb      	str	r3, [r7, #12]
 80094ea:	e001      	b.n	80094f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80094ec:	2300      	movs	r3, #0
 80094ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80094f0:	68fb      	ldr	r3, [r7, #12]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3714      	adds	r7, #20
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	20000fb0 	.word	0x20000fb0

08009504 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800950c:	f7ff fa74 	bl	80089f8 <xTaskGetTickCount>
 8009510:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009512:	4b0b      	ldr	r3, [pc, #44]	; (8009540 <prvSampleTimeNow+0x3c>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	429a      	cmp	r2, r3
 800951a:	d205      	bcs.n	8009528 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800951c:	f000 f936 	bl	800978c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	601a      	str	r2, [r3, #0]
 8009526:	e002      	b.n	800952e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800952e:	4a04      	ldr	r2, [pc, #16]	; (8009540 <prvSampleTimeNow+0x3c>)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009534:	68fb      	ldr	r3, [r7, #12]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	20000fc0 	.word	0x20000fc0

08009544 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]
 8009550:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009552:	2300      	movs	r3, #0
 8009554:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	429a      	cmp	r2, r3
 8009568:	d812      	bhi.n	8009590 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	1ad2      	subs	r2, r2, r3
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	699b      	ldr	r3, [r3, #24]
 8009574:	429a      	cmp	r2, r3
 8009576:	d302      	bcc.n	800957e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009578:	2301      	movs	r3, #1
 800957a:	617b      	str	r3, [r7, #20]
 800957c:	e01b      	b.n	80095b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800957e:	4b10      	ldr	r3, [pc, #64]	; (80095c0 <prvInsertTimerInActiveList+0x7c>)
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3304      	adds	r3, #4
 8009586:	4619      	mov	r1, r3
 8009588:	4610      	mov	r0, r2
 800958a:	f7fe f960 	bl	800784e <vListInsert>
 800958e:	e012      	b.n	80095b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	429a      	cmp	r2, r3
 8009596:	d206      	bcs.n	80095a6 <prvInsertTimerInActiveList+0x62>
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	429a      	cmp	r2, r3
 800959e:	d302      	bcc.n	80095a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80095a0:	2301      	movs	r3, #1
 80095a2:	617b      	str	r3, [r7, #20]
 80095a4:	e007      	b.n	80095b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095a6:	4b07      	ldr	r3, [pc, #28]	; (80095c4 <prvInsertTimerInActiveList+0x80>)
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	3304      	adds	r3, #4
 80095ae:	4619      	mov	r1, r3
 80095b0:	4610      	mov	r0, r2
 80095b2:	f7fe f94c 	bl	800784e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80095b6:	697b      	ldr	r3, [r7, #20]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3718      	adds	r7, #24
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	20000fb4 	.word	0x20000fb4
 80095c4:	20000fb0 	.word	0x20000fb0

080095c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b08e      	sub	sp, #56	; 0x38
 80095cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095ce:	e0ca      	b.n	8009766 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	da18      	bge.n	8009608 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80095d6:	1d3b      	adds	r3, r7, #4
 80095d8:	3304      	adds	r3, #4
 80095da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80095dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d10a      	bne.n	80095f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80095e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e6:	f383 8811 	msr	BASEPRI, r3
 80095ea:	f3bf 8f6f 	isb	sy
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	61fb      	str	r3, [r7, #28]
}
 80095f4:	bf00      	nop
 80095f6:	e7fe      	b.n	80095f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80095f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095fe:	6850      	ldr	r0, [r2, #4]
 8009600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009602:	6892      	ldr	r2, [r2, #8]
 8009604:	4611      	mov	r1, r2
 8009606:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2b00      	cmp	r3, #0
 800960c:	f2c0 80aa 	blt.w	8009764 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009616:	695b      	ldr	r3, [r3, #20]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d004      	beq.n	8009626 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961e:	3304      	adds	r3, #4
 8009620:	4618      	mov	r0, r3
 8009622:	f7fe f94d 	bl	80078c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009626:	463b      	mov	r3, r7
 8009628:	4618      	mov	r0, r3
 800962a:	f7ff ff6b 	bl	8009504 <prvSampleTimeNow>
 800962e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b09      	cmp	r3, #9
 8009634:	f200 8097 	bhi.w	8009766 <prvProcessReceivedCommands+0x19e>
 8009638:	a201      	add	r2, pc, #4	; (adr r2, 8009640 <prvProcessReceivedCommands+0x78>)
 800963a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963e:	bf00      	nop
 8009640:	08009669 	.word	0x08009669
 8009644:	08009669 	.word	0x08009669
 8009648:	08009669 	.word	0x08009669
 800964c:	080096dd 	.word	0x080096dd
 8009650:	080096f1 	.word	0x080096f1
 8009654:	0800973b 	.word	0x0800973b
 8009658:	08009669 	.word	0x08009669
 800965c:	08009669 	.word	0x08009669
 8009660:	080096dd 	.word	0x080096dd
 8009664:	080096f1 	.word	0x080096f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800966e:	f043 0301 	orr.w	r3, r3, #1
 8009672:	b2da      	uxtb	r2, r3
 8009674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	18d1      	adds	r1, r2, r3
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009688:	f7ff ff5c 	bl	8009544 <prvInsertTimerInActiveList>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d069      	beq.n	8009766 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009698:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096a0:	f003 0304 	and.w	r3, r3, #4
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d05e      	beq.n	8009766 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ac:	699b      	ldr	r3, [r3, #24]
 80096ae:	441a      	add	r2, r3
 80096b0:	2300      	movs	r3, #0
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	2300      	movs	r3, #0
 80096b6:	2100      	movs	r1, #0
 80096b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ba:	f7ff fe05 	bl	80092c8 <xTimerGenericCommand>
 80096be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80096c0:	6a3b      	ldr	r3, [r7, #32]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d14f      	bne.n	8009766 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80096c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	61bb      	str	r3, [r7, #24]
}
 80096d8:	bf00      	nop
 80096da:	e7fe      	b.n	80096da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096e2:	f023 0301 	bic.w	r3, r3, #1
 80096e6:	b2da      	uxtb	r2, r3
 80096e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80096ee:	e03a      	b.n	8009766 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096f6:	f043 0301 	orr.w	r3, r3, #1
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009706:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10a      	bne.n	8009726 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009714:	f383 8811 	msr	BASEPRI, r3
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	617b      	str	r3, [r7, #20]
}
 8009722:	bf00      	nop
 8009724:	e7fe      	b.n	8009724 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009728:	699a      	ldr	r2, [r3, #24]
 800972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972c:	18d1      	adds	r1, r2, r3
 800972e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009734:	f7ff ff06 	bl	8009544 <prvInsertTimerInActiveList>
					break;
 8009738:	e015      	b.n	8009766 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800973a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009740:	f003 0302 	and.w	r3, r3, #2
 8009744:	2b00      	cmp	r3, #0
 8009746:	d103      	bne.n	8009750 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800974a:	f000 fbe1 	bl	8009f10 <vPortFree>
 800974e:	e00a      	b.n	8009766 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009756:	f023 0301 	bic.w	r3, r3, #1
 800975a:	b2da      	uxtb	r2, r3
 800975c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009762:	e000      	b.n	8009766 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009764:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009766:	4b08      	ldr	r3, [pc, #32]	; (8009788 <prvProcessReceivedCommands+0x1c0>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	1d39      	adds	r1, r7, #4
 800976c:	2200      	movs	r2, #0
 800976e:	4618      	mov	r0, r3
 8009770:	f7fe fb6e 	bl	8007e50 <xQueueReceive>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	f47f af2a 	bne.w	80095d0 <prvProcessReceivedCommands+0x8>
	}
}
 800977c:	bf00      	nop
 800977e:	bf00      	nop
 8009780:	3730      	adds	r7, #48	; 0x30
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	20000fb8 	.word	0x20000fb8

0800978c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b088      	sub	sp, #32
 8009790:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009792:	e048      	b.n	8009826 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009794:	4b2d      	ldr	r3, [pc, #180]	; (800984c <prvSwitchTimerLists+0xc0>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800979e:	4b2b      	ldr	r3, [pc, #172]	; (800984c <prvSwitchTimerLists+0xc0>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	3304      	adds	r3, #4
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7fe f887 	bl	80078c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6a1b      	ldr	r3, [r3, #32]
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097c0:	f003 0304 	and.w	r3, r3, #4
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d02e      	beq.n	8009826 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	4413      	add	r3, r2
 80097d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80097d2:	68ba      	ldr	r2, [r7, #8]
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d90e      	bls.n	80097f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097e6:	4b19      	ldr	r3, [pc, #100]	; (800984c <prvSwitchTimerLists+0xc0>)
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	3304      	adds	r3, #4
 80097ee:	4619      	mov	r1, r3
 80097f0:	4610      	mov	r0, r2
 80097f2:	f7fe f82c 	bl	800784e <vListInsert>
 80097f6:	e016      	b.n	8009826 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097f8:	2300      	movs	r3, #0
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	2300      	movs	r3, #0
 80097fe:	693a      	ldr	r2, [r7, #16]
 8009800:	2100      	movs	r1, #0
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f7ff fd60 	bl	80092c8 <xTimerGenericCommand>
 8009808:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10a      	bne.n	8009826 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	603b      	str	r3, [r7, #0]
}
 8009822:	bf00      	nop
 8009824:	e7fe      	b.n	8009824 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009826:	4b09      	ldr	r3, [pc, #36]	; (800984c <prvSwitchTimerLists+0xc0>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1b1      	bne.n	8009794 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009830:	4b06      	ldr	r3, [pc, #24]	; (800984c <prvSwitchTimerLists+0xc0>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009836:	4b06      	ldr	r3, [pc, #24]	; (8009850 <prvSwitchTimerLists+0xc4>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a04      	ldr	r2, [pc, #16]	; (800984c <prvSwitchTimerLists+0xc0>)
 800983c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800983e:	4a04      	ldr	r2, [pc, #16]	; (8009850 <prvSwitchTimerLists+0xc4>)
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	6013      	str	r3, [r2, #0]
}
 8009844:	bf00      	nop
 8009846:	3718      	adds	r7, #24
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	20000fb0 	.word	0x20000fb0
 8009850:	20000fb4 	.word	0x20000fb4

08009854 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800985a:	f000 f96b 	bl	8009b34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800985e:	4b15      	ldr	r3, [pc, #84]	; (80098b4 <prvCheckForValidListAndQueue+0x60>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d120      	bne.n	80098a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009866:	4814      	ldr	r0, [pc, #80]	; (80098b8 <prvCheckForValidListAndQueue+0x64>)
 8009868:	f7fd ffa0 	bl	80077ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800986c:	4813      	ldr	r0, [pc, #76]	; (80098bc <prvCheckForValidListAndQueue+0x68>)
 800986e:	f7fd ff9d 	bl	80077ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009872:	4b13      	ldr	r3, [pc, #76]	; (80098c0 <prvCheckForValidListAndQueue+0x6c>)
 8009874:	4a10      	ldr	r2, [pc, #64]	; (80098b8 <prvCheckForValidListAndQueue+0x64>)
 8009876:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009878:	4b12      	ldr	r3, [pc, #72]	; (80098c4 <prvCheckForValidListAndQueue+0x70>)
 800987a:	4a10      	ldr	r2, [pc, #64]	; (80098bc <prvCheckForValidListAndQueue+0x68>)
 800987c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800987e:	2300      	movs	r3, #0
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	4b11      	ldr	r3, [pc, #68]	; (80098c8 <prvCheckForValidListAndQueue+0x74>)
 8009884:	4a11      	ldr	r2, [pc, #68]	; (80098cc <prvCheckForValidListAndQueue+0x78>)
 8009886:	2110      	movs	r1, #16
 8009888:	200a      	movs	r0, #10
 800988a:	f7fe f8ab 	bl	80079e4 <xQueueGenericCreateStatic>
 800988e:	4603      	mov	r3, r0
 8009890:	4a08      	ldr	r2, [pc, #32]	; (80098b4 <prvCheckForValidListAndQueue+0x60>)
 8009892:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009894:	4b07      	ldr	r3, [pc, #28]	; (80098b4 <prvCheckForValidListAndQueue+0x60>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d005      	beq.n	80098a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800989c:	4b05      	ldr	r3, [pc, #20]	; (80098b4 <prvCheckForValidListAndQueue+0x60>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	490b      	ldr	r1, [pc, #44]	; (80098d0 <prvCheckForValidListAndQueue+0x7c>)
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fe fcc4 	bl	8008230 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098a8:	f000 f974 	bl	8009b94 <vPortExitCritical>
}
 80098ac:	bf00      	nop
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	20000fb8 	.word	0x20000fb8
 80098b8:	20000f88 	.word	0x20000f88
 80098bc:	20000f9c 	.word	0x20000f9c
 80098c0:	20000fb0 	.word	0x20000fb0
 80098c4:	20000fb4 	.word	0x20000fb4
 80098c8:	20001064 	.word	0x20001064
 80098cc:	20000fc4 	.word	0x20000fc4
 80098d0:	0800bb88 	.word	0x0800bb88

080098d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	3b04      	subs	r3, #4
 80098e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80098ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	3b04      	subs	r3, #4
 80098f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	f023 0201 	bic.w	r2, r3, #1
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	3b04      	subs	r3, #4
 8009902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009904:	4a0c      	ldr	r2, [pc, #48]	; (8009938 <pxPortInitialiseStack+0x64>)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	3b14      	subs	r3, #20
 800990e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	3b04      	subs	r3, #4
 800991a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f06f 0202 	mvn.w	r2, #2
 8009922:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	3b20      	subs	r3, #32
 8009928:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800992a:	68fb      	ldr	r3, [r7, #12]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3714      	adds	r7, #20
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	0800993d 	.word	0x0800993d

0800993c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009942:	2300      	movs	r3, #0
 8009944:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009946:	4b12      	ldr	r3, [pc, #72]	; (8009990 <prvTaskExitError+0x54>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994e:	d00a      	beq.n	8009966 <prvTaskExitError+0x2a>
	__asm volatile
 8009950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009954:	f383 8811 	msr	BASEPRI, r3
 8009958:	f3bf 8f6f 	isb	sy
 800995c:	f3bf 8f4f 	dsb	sy
 8009960:	60fb      	str	r3, [r7, #12]
}
 8009962:	bf00      	nop
 8009964:	e7fe      	b.n	8009964 <prvTaskExitError+0x28>
	__asm volatile
 8009966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	60bb      	str	r3, [r7, #8]
}
 8009978:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800997a:	bf00      	nop
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d0fc      	beq.n	800997c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009982:	bf00      	nop
 8009984:	bf00      	nop
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr
 8009990:	20000018 	.word	0x20000018
	...

080099a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80099a0:	4b07      	ldr	r3, [pc, #28]	; (80099c0 <pxCurrentTCBConst2>)
 80099a2:	6819      	ldr	r1, [r3, #0]
 80099a4:	6808      	ldr	r0, [r1, #0]
 80099a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099aa:	f380 8809 	msr	PSP, r0
 80099ae:	f3bf 8f6f 	isb	sy
 80099b2:	f04f 0000 	mov.w	r0, #0
 80099b6:	f380 8811 	msr	BASEPRI, r0
 80099ba:	4770      	bx	lr
 80099bc:	f3af 8000 	nop.w

080099c0 <pxCurrentTCBConst2>:
 80099c0:	20000a88 	.word	0x20000a88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099c4:	bf00      	nop
 80099c6:	bf00      	nop

080099c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099c8:	4808      	ldr	r0, [pc, #32]	; (80099ec <prvPortStartFirstTask+0x24>)
 80099ca:	6800      	ldr	r0, [r0, #0]
 80099cc:	6800      	ldr	r0, [r0, #0]
 80099ce:	f380 8808 	msr	MSP, r0
 80099d2:	f04f 0000 	mov.w	r0, #0
 80099d6:	f380 8814 	msr	CONTROL, r0
 80099da:	b662      	cpsie	i
 80099dc:	b661      	cpsie	f
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	df00      	svc	0
 80099e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099ea:	bf00      	nop
 80099ec:	e000ed08 	.word	0xe000ed08

080099f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80099f6:	4b46      	ldr	r3, [pc, #280]	; (8009b10 <xPortStartScheduler+0x120>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a46      	ldr	r2, [pc, #280]	; (8009b14 <xPortStartScheduler+0x124>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d10a      	bne.n	8009a16 <xPortStartScheduler+0x26>
	__asm volatile
 8009a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	613b      	str	r3, [r7, #16]
}
 8009a12:	bf00      	nop
 8009a14:	e7fe      	b.n	8009a14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a16:	4b3e      	ldr	r3, [pc, #248]	; (8009b10 <xPortStartScheduler+0x120>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a3f      	ldr	r2, [pc, #252]	; (8009b18 <xPortStartScheduler+0x128>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d10a      	bne.n	8009a36 <xPortStartScheduler+0x46>
	__asm volatile
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	60fb      	str	r3, [r7, #12]
}
 8009a32:	bf00      	nop
 8009a34:	e7fe      	b.n	8009a34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a36:	4b39      	ldr	r3, [pc, #228]	; (8009b1c <xPortStartScheduler+0x12c>)
 8009a38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	22ff      	movs	r2, #255	; 0xff
 8009a46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a50:	78fb      	ldrb	r3, [r7, #3]
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a58:	b2da      	uxtb	r2, r3
 8009a5a:	4b31      	ldr	r3, [pc, #196]	; (8009b20 <xPortStartScheduler+0x130>)
 8009a5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a5e:	4b31      	ldr	r3, [pc, #196]	; (8009b24 <xPortStartScheduler+0x134>)
 8009a60:	2207      	movs	r2, #7
 8009a62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a64:	e009      	b.n	8009a7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009a66:	4b2f      	ldr	r3, [pc, #188]	; (8009b24 <xPortStartScheduler+0x134>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	4a2d      	ldr	r2, [pc, #180]	; (8009b24 <xPortStartScheduler+0x134>)
 8009a6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a70:	78fb      	ldrb	r3, [r7, #3]
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	005b      	lsls	r3, r3, #1
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a7a:	78fb      	ldrb	r3, [r7, #3]
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a82:	2b80      	cmp	r3, #128	; 0x80
 8009a84:	d0ef      	beq.n	8009a66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a86:	4b27      	ldr	r3, [pc, #156]	; (8009b24 <xPortStartScheduler+0x134>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f1c3 0307 	rsb	r3, r3, #7
 8009a8e:	2b04      	cmp	r3, #4
 8009a90:	d00a      	beq.n	8009aa8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a96:	f383 8811 	msr	BASEPRI, r3
 8009a9a:	f3bf 8f6f 	isb	sy
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	60bb      	str	r3, [r7, #8]
}
 8009aa4:	bf00      	nop
 8009aa6:	e7fe      	b.n	8009aa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009aa8:	4b1e      	ldr	r3, [pc, #120]	; (8009b24 <xPortStartScheduler+0x134>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	021b      	lsls	r3, r3, #8
 8009aae:	4a1d      	ldr	r2, [pc, #116]	; (8009b24 <xPortStartScheduler+0x134>)
 8009ab0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ab2:	4b1c      	ldr	r3, [pc, #112]	; (8009b24 <xPortStartScheduler+0x134>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009aba:	4a1a      	ldr	r2, [pc, #104]	; (8009b24 <xPortStartScheduler+0x134>)
 8009abc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ac6:	4b18      	ldr	r3, [pc, #96]	; (8009b28 <xPortStartScheduler+0x138>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a17      	ldr	r2, [pc, #92]	; (8009b28 <xPortStartScheduler+0x138>)
 8009acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ad2:	4b15      	ldr	r3, [pc, #84]	; (8009b28 <xPortStartScheduler+0x138>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a14      	ldr	r2, [pc, #80]	; (8009b28 <xPortStartScheduler+0x138>)
 8009ad8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009adc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ade:	f000 f8dd 	bl	8009c9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ae2:	4b12      	ldr	r3, [pc, #72]	; (8009b2c <xPortStartScheduler+0x13c>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ae8:	f000 f8fc 	bl	8009ce4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009aec:	4b10      	ldr	r3, [pc, #64]	; (8009b30 <xPortStartScheduler+0x140>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a0f      	ldr	r2, [pc, #60]	; (8009b30 <xPortStartScheduler+0x140>)
 8009af2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009af6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009af8:	f7ff ff66 	bl	80099c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009afc:	f7ff f846 	bl	8008b8c <vTaskSwitchContext>
	prvTaskExitError();
 8009b00:	f7ff ff1c 	bl	800993c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3718      	adds	r7, #24
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	e000ed00 	.word	0xe000ed00
 8009b14:	410fc271 	.word	0x410fc271
 8009b18:	410fc270 	.word	0x410fc270
 8009b1c:	e000e400 	.word	0xe000e400
 8009b20:	200010b4 	.word	0x200010b4
 8009b24:	200010b8 	.word	0x200010b8
 8009b28:	e000ed20 	.word	0xe000ed20
 8009b2c:	20000018 	.word	0x20000018
 8009b30:	e000ef34 	.word	0xe000ef34

08009b34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
	__asm volatile
 8009b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3e:	f383 8811 	msr	BASEPRI, r3
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	607b      	str	r3, [r7, #4]
}
 8009b4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b4e:	4b0f      	ldr	r3, [pc, #60]	; (8009b8c <vPortEnterCritical+0x58>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3301      	adds	r3, #1
 8009b54:	4a0d      	ldr	r2, [pc, #52]	; (8009b8c <vPortEnterCritical+0x58>)
 8009b56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b58:	4b0c      	ldr	r3, [pc, #48]	; (8009b8c <vPortEnterCritical+0x58>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d10f      	bne.n	8009b80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b60:	4b0b      	ldr	r3, [pc, #44]	; (8009b90 <vPortEnterCritical+0x5c>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00a      	beq.n	8009b80 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	603b      	str	r3, [r7, #0]
}
 8009b7c:	bf00      	nop
 8009b7e:	e7fe      	b.n	8009b7e <vPortEnterCritical+0x4a>
	}
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	20000018 	.word	0x20000018
 8009b90:	e000ed04 	.word	0xe000ed04

08009b94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b9a:	4b12      	ldr	r3, [pc, #72]	; (8009be4 <vPortExitCritical+0x50>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10a      	bne.n	8009bb8 <vPortExitCritical+0x24>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	607b      	str	r3, [r7, #4]
}
 8009bb4:	bf00      	nop
 8009bb6:	e7fe      	b.n	8009bb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009bb8:	4b0a      	ldr	r3, [pc, #40]	; (8009be4 <vPortExitCritical+0x50>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	4a09      	ldr	r2, [pc, #36]	; (8009be4 <vPortExitCritical+0x50>)
 8009bc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009bc2:	4b08      	ldr	r3, [pc, #32]	; (8009be4 <vPortExitCritical+0x50>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d105      	bne.n	8009bd6 <vPortExitCritical+0x42>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	f383 8811 	msr	BASEPRI, r3
}
 8009bd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009bd6:	bf00      	nop
 8009bd8:	370c      	adds	r7, #12
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	20000018 	.word	0x20000018
	...

08009bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009bf0:	f3ef 8009 	mrs	r0, PSP
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	4b15      	ldr	r3, [pc, #84]	; (8009c50 <pxCurrentTCBConst>)
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	f01e 0f10 	tst.w	lr, #16
 8009c00:	bf08      	it	eq
 8009c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c0a:	6010      	str	r0, [r2, #0]
 8009c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c14:	f380 8811 	msr	BASEPRI, r0
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	f7fe ffb4 	bl	8008b8c <vTaskSwitchContext>
 8009c24:	f04f 0000 	mov.w	r0, #0
 8009c28:	f380 8811 	msr	BASEPRI, r0
 8009c2c:	bc09      	pop	{r0, r3}
 8009c2e:	6819      	ldr	r1, [r3, #0]
 8009c30:	6808      	ldr	r0, [r1, #0]
 8009c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c36:	f01e 0f10 	tst.w	lr, #16
 8009c3a:	bf08      	it	eq
 8009c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c40:	f380 8809 	msr	PSP, r0
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	f3af 8000 	nop.w

08009c50 <pxCurrentTCBConst>:
 8009c50:	20000a88 	.word	0x20000a88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c54:	bf00      	nop
 8009c56:	bf00      	nop

08009c58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	607b      	str	r3, [r7, #4]
}
 8009c70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c72:	f7fe fed1 	bl	8008a18 <xTaskIncrementTick>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d003      	beq.n	8009c84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c7c:	4b06      	ldr	r3, [pc, #24]	; (8009c98 <xPortSysTickHandler+0x40>)
 8009c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c82:	601a      	str	r2, [r3, #0]
 8009c84:	2300      	movs	r3, #0
 8009c86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	f383 8811 	msr	BASEPRI, r3
}
 8009c8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c90:	bf00      	nop
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	e000ed04 	.word	0xe000ed04

08009c9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ca0:	4b0b      	ldr	r3, [pc, #44]	; (8009cd0 <vPortSetupTimerInterrupt+0x34>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ca6:	4b0b      	ldr	r3, [pc, #44]	; (8009cd4 <vPortSetupTimerInterrupt+0x38>)
 8009ca8:	2200      	movs	r2, #0
 8009caa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009cac:	4b0a      	ldr	r3, [pc, #40]	; (8009cd8 <vPortSetupTimerInterrupt+0x3c>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a0a      	ldr	r2, [pc, #40]	; (8009cdc <vPortSetupTimerInterrupt+0x40>)
 8009cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cb6:	099b      	lsrs	r3, r3, #6
 8009cb8:	4a09      	ldr	r2, [pc, #36]	; (8009ce0 <vPortSetupTimerInterrupt+0x44>)
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cbe:	4b04      	ldr	r3, [pc, #16]	; (8009cd0 <vPortSetupTimerInterrupt+0x34>)
 8009cc0:	2207      	movs	r2, #7
 8009cc2:	601a      	str	r2, [r3, #0]
}
 8009cc4:	bf00      	nop
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	e000e010 	.word	0xe000e010
 8009cd4:	e000e018 	.word	0xe000e018
 8009cd8:	2000000c 	.word	0x2000000c
 8009cdc:	10624dd3 	.word	0x10624dd3
 8009ce0:	e000e014 	.word	0xe000e014

08009ce4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ce4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009cf4 <vPortEnableVFP+0x10>
 8009ce8:	6801      	ldr	r1, [r0, #0]
 8009cea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009cee:	6001      	str	r1, [r0, #0]
 8009cf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009cf2:	bf00      	nop
 8009cf4:	e000ed88 	.word	0xe000ed88

08009cf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cfe:	f3ef 8305 	mrs	r3, IPSR
 8009d02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2b0f      	cmp	r3, #15
 8009d08:	d914      	bls.n	8009d34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d0a:	4a17      	ldr	r2, [pc, #92]	; (8009d68 <vPortValidateInterruptPriority+0x70>)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4413      	add	r3, r2
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d14:	4b15      	ldr	r3, [pc, #84]	; (8009d6c <vPortValidateInterruptPriority+0x74>)
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	7afa      	ldrb	r2, [r7, #11]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d20a      	bcs.n	8009d34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	607b      	str	r3, [r7, #4]
}
 8009d30:	bf00      	nop
 8009d32:	e7fe      	b.n	8009d32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d34:	4b0e      	ldr	r3, [pc, #56]	; (8009d70 <vPortValidateInterruptPriority+0x78>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d3c:	4b0d      	ldr	r3, [pc, #52]	; (8009d74 <vPortValidateInterruptPriority+0x7c>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d90a      	bls.n	8009d5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d48:	f383 8811 	msr	BASEPRI, r3
 8009d4c:	f3bf 8f6f 	isb	sy
 8009d50:	f3bf 8f4f 	dsb	sy
 8009d54:	603b      	str	r3, [r7, #0]
}
 8009d56:	bf00      	nop
 8009d58:	e7fe      	b.n	8009d58 <vPortValidateInterruptPriority+0x60>
	}
 8009d5a:	bf00      	nop
 8009d5c:	3714      	adds	r7, #20
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	e000e3f0 	.word	0xe000e3f0
 8009d6c:	200010b4 	.word	0x200010b4
 8009d70:	e000ed0c 	.word	0xe000ed0c
 8009d74:	200010b8 	.word	0x200010b8

08009d78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b08a      	sub	sp, #40	; 0x28
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d80:	2300      	movs	r3, #0
 8009d82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d84:	f7fe fd8c 	bl	80088a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d88:	4b5b      	ldr	r3, [pc, #364]	; (8009ef8 <pvPortMalloc+0x180>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d101      	bne.n	8009d94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d90:	f000 f920 	bl	8009fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d94:	4b59      	ldr	r3, [pc, #356]	; (8009efc <pvPortMalloc+0x184>)
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4013      	ands	r3, r2
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f040 8093 	bne.w	8009ec8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d01d      	beq.n	8009de4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009da8:	2208      	movs	r2, #8
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4413      	add	r3, r2
 8009dae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f003 0307 	and.w	r3, r3, #7
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d014      	beq.n	8009de4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f023 0307 	bic.w	r3, r3, #7
 8009dc0:	3308      	adds	r3, #8
 8009dc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f003 0307 	and.w	r3, r3, #7
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00a      	beq.n	8009de4 <pvPortMalloc+0x6c>
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	617b      	str	r3, [r7, #20]
}
 8009de0:	bf00      	nop
 8009de2:	e7fe      	b.n	8009de2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d06e      	beq.n	8009ec8 <pvPortMalloc+0x150>
 8009dea:	4b45      	ldr	r3, [pc, #276]	; (8009f00 <pvPortMalloc+0x188>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d869      	bhi.n	8009ec8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009df4:	4b43      	ldr	r3, [pc, #268]	; (8009f04 <pvPortMalloc+0x18c>)
 8009df6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009df8:	4b42      	ldr	r3, [pc, #264]	; (8009f04 <pvPortMalloc+0x18c>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dfe:	e004      	b.n	8009e0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d903      	bls.n	8009e1c <pvPortMalloc+0xa4>
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1f1      	bne.n	8009e00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e1c:	4b36      	ldr	r3, [pc, #216]	; (8009ef8 <pvPortMalloc+0x180>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d050      	beq.n	8009ec8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e26:	6a3b      	ldr	r3, [r7, #32]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2208      	movs	r2, #8
 8009e2c:	4413      	add	r3, r2
 8009e2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	6a3b      	ldr	r3, [r7, #32]
 8009e36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	1ad2      	subs	r2, r2, r3
 8009e40:	2308      	movs	r3, #8
 8009e42:	005b      	lsls	r3, r3, #1
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d91f      	bls.n	8009e88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	f003 0307 	and.w	r3, r3, #7
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00a      	beq.n	8009e70 <pvPortMalloc+0xf8>
	__asm volatile
 8009e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5e:	f383 8811 	msr	BASEPRI, r3
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	613b      	str	r3, [r7, #16]
}
 8009e6c:	bf00      	nop
 8009e6e:	e7fe      	b.n	8009e6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	685a      	ldr	r2, [r3, #4]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	1ad2      	subs	r2, r2, r3
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e82:	69b8      	ldr	r0, [r7, #24]
 8009e84:	f000 f908 	bl	800a098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e88:	4b1d      	ldr	r3, [pc, #116]	; (8009f00 <pvPortMalloc+0x188>)
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	4a1b      	ldr	r2, [pc, #108]	; (8009f00 <pvPortMalloc+0x188>)
 8009e94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e96:	4b1a      	ldr	r3, [pc, #104]	; (8009f00 <pvPortMalloc+0x188>)
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	4b1b      	ldr	r3, [pc, #108]	; (8009f08 <pvPortMalloc+0x190>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d203      	bcs.n	8009eaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ea2:	4b17      	ldr	r3, [pc, #92]	; (8009f00 <pvPortMalloc+0x188>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a18      	ldr	r2, [pc, #96]	; (8009f08 <pvPortMalloc+0x190>)
 8009ea8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	685a      	ldr	r2, [r3, #4]
 8009eae:	4b13      	ldr	r3, [pc, #76]	; (8009efc <pvPortMalloc+0x184>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	2200      	movs	r2, #0
 8009ebc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009ebe:	4b13      	ldr	r3, [pc, #76]	; (8009f0c <pvPortMalloc+0x194>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	4a11      	ldr	r2, [pc, #68]	; (8009f0c <pvPortMalloc+0x194>)
 8009ec6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ec8:	f7fe fcf8 	bl	80088bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	f003 0307 	and.w	r3, r3, #7
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00a      	beq.n	8009eec <pvPortMalloc+0x174>
	__asm volatile
 8009ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eda:	f383 8811 	msr	BASEPRI, r3
 8009ede:	f3bf 8f6f 	isb	sy
 8009ee2:	f3bf 8f4f 	dsb	sy
 8009ee6:	60fb      	str	r3, [r7, #12]
}
 8009ee8:	bf00      	nop
 8009eea:	e7fe      	b.n	8009eea <pvPortMalloc+0x172>
	return pvReturn;
 8009eec:	69fb      	ldr	r3, [r7, #28]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3728      	adds	r7, #40	; 0x28
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	20004cc4 	.word	0x20004cc4
 8009efc:	20004cd8 	.word	0x20004cd8
 8009f00:	20004cc8 	.word	0x20004cc8
 8009f04:	20004cbc 	.word	0x20004cbc
 8009f08:	20004ccc 	.word	0x20004ccc
 8009f0c:	20004cd0 	.word	0x20004cd0

08009f10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d04d      	beq.n	8009fbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f22:	2308      	movs	r3, #8
 8009f24:	425b      	negs	r3, r3
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	4413      	add	r3, r2
 8009f2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	685a      	ldr	r2, [r3, #4]
 8009f34:	4b24      	ldr	r3, [pc, #144]	; (8009fc8 <vPortFree+0xb8>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4013      	ands	r3, r2
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10a      	bne.n	8009f54 <vPortFree+0x44>
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	60fb      	str	r3, [r7, #12]
}
 8009f50:	bf00      	nop
 8009f52:	e7fe      	b.n	8009f52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00a      	beq.n	8009f72 <vPortFree+0x62>
	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	60bb      	str	r3, [r7, #8]
}
 8009f6e:	bf00      	nop
 8009f70:	e7fe      	b.n	8009f70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	685a      	ldr	r2, [r3, #4]
 8009f76:	4b14      	ldr	r3, [pc, #80]	; (8009fc8 <vPortFree+0xb8>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d01e      	beq.n	8009fbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d11a      	bne.n	8009fbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	4b0e      	ldr	r3, [pc, #56]	; (8009fc8 <vPortFree+0xb8>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	43db      	mvns	r3, r3
 8009f92:	401a      	ands	r2, r3
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f98:	f7fe fc82 	bl	80088a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	685a      	ldr	r2, [r3, #4]
 8009fa0:	4b0a      	ldr	r3, [pc, #40]	; (8009fcc <vPortFree+0xbc>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	4a09      	ldr	r2, [pc, #36]	; (8009fcc <vPortFree+0xbc>)
 8009fa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009faa:	6938      	ldr	r0, [r7, #16]
 8009fac:	f000 f874 	bl	800a098 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009fb0:	4b07      	ldr	r3, [pc, #28]	; (8009fd0 <vPortFree+0xc0>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	4a06      	ldr	r2, [pc, #24]	; (8009fd0 <vPortFree+0xc0>)
 8009fb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009fba:	f7fe fc7f 	bl	80088bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009fbe:	bf00      	nop
 8009fc0:	3718      	adds	r7, #24
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	20004cd8 	.word	0x20004cd8
 8009fcc:	20004cc8 	.word	0x20004cc8
 8009fd0:	20004cd4 	.word	0x20004cd4

08009fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009fda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009fde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fe0:	4b27      	ldr	r3, [pc, #156]	; (800a080 <prvHeapInit+0xac>)
 8009fe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f003 0307 	and.w	r3, r3, #7
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00c      	beq.n	800a008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3307      	adds	r3, #7
 8009ff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f023 0307 	bic.w	r3, r3, #7
 8009ffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	4a1f      	ldr	r2, [pc, #124]	; (800a080 <prvHeapInit+0xac>)
 800a004:	4413      	add	r3, r2
 800a006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a00c:	4a1d      	ldr	r2, [pc, #116]	; (800a084 <prvHeapInit+0xb0>)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a012:	4b1c      	ldr	r3, [pc, #112]	; (800a084 <prvHeapInit+0xb0>)
 800a014:	2200      	movs	r2, #0
 800a016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	4413      	add	r3, r2
 800a01e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a020:	2208      	movs	r2, #8
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	1a9b      	subs	r3, r3, r2
 800a026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f023 0307 	bic.w	r3, r3, #7
 800a02e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	4a15      	ldr	r2, [pc, #84]	; (800a088 <prvHeapInit+0xb4>)
 800a034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a036:	4b14      	ldr	r3, [pc, #80]	; (800a088 <prvHeapInit+0xb4>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2200      	movs	r2, #0
 800a03c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a03e:	4b12      	ldr	r3, [pc, #72]	; (800a088 <prvHeapInit+0xb4>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	1ad2      	subs	r2, r2, r3
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a054:	4b0c      	ldr	r3, [pc, #48]	; (800a088 <prvHeapInit+0xb4>)
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	4a0a      	ldr	r2, [pc, #40]	; (800a08c <prvHeapInit+0xb8>)
 800a062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	4a09      	ldr	r2, [pc, #36]	; (800a090 <prvHeapInit+0xbc>)
 800a06a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a06c:	4b09      	ldr	r3, [pc, #36]	; (800a094 <prvHeapInit+0xc0>)
 800a06e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a072:	601a      	str	r2, [r3, #0]
}
 800a074:	bf00      	nop
 800a076:	3714      	adds	r7, #20
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr
 800a080:	200010bc 	.word	0x200010bc
 800a084:	20004cbc 	.word	0x20004cbc
 800a088:	20004cc4 	.word	0x20004cc4
 800a08c:	20004ccc 	.word	0x20004ccc
 800a090:	20004cc8 	.word	0x20004cc8
 800a094:	20004cd8 	.word	0x20004cd8

0800a098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a0a0:	4b28      	ldr	r3, [pc, #160]	; (800a144 <prvInsertBlockIntoFreeList+0xac>)
 800a0a2:	60fb      	str	r3, [r7, #12]
 800a0a4:	e002      	b.n	800a0ac <prvInsertBlockIntoFreeList+0x14>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	60fb      	str	r3, [r7, #12]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d8f7      	bhi.n	800a0a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d108      	bne.n	800a0da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	685a      	ldr	r2, [r3, #4]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	441a      	add	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	441a      	add	r2, r3
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d118      	bne.n	800a120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	4b15      	ldr	r3, [pc, #84]	; (800a148 <prvInsertBlockIntoFreeList+0xb0>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d00d      	beq.n	800a116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	685a      	ldr	r2, [r3, #4]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	441a      	add	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	e008      	b.n	800a128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a116:	4b0c      	ldr	r3, [pc, #48]	; (800a148 <prvInsertBlockIntoFreeList+0xb0>)
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	601a      	str	r2, [r3, #0]
 800a11e:	e003      	b.n	800a128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d002      	beq.n	800a136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a136:	bf00      	nop
 800a138:	3714      	adds	r7, #20
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	20004cbc 	.word	0x20004cbc
 800a148:	20004cc4 	.word	0x20004cc4

0800a14c <OLED_Refresh_Gram>:

#include "oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800a152:	2300      	movs	r3, #0
 800a154:	71fb      	strb	r3, [r7, #7]
 800a156:	e026      	b.n	800a1a6 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800a158:	79fb      	ldrb	r3, [r7, #7]
 800a15a:	3b50      	subs	r3, #80	; 0x50
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	2100      	movs	r1, #0
 800a160:	4618      	mov	r0, r3
 800a162:	f000 f82b 	bl	800a1bc <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800a166:	2100      	movs	r1, #0
 800a168:	2000      	movs	r0, #0
 800a16a:	f000 f827 	bl	800a1bc <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800a16e:	2100      	movs	r1, #0
 800a170:	2010      	movs	r0, #16
 800a172:	f000 f823 	bl	800a1bc <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800a176:	2300      	movs	r3, #0
 800a178:	71bb      	strb	r3, [r7, #6]
 800a17a:	e00d      	b.n	800a198 <OLED_Refresh_Gram+0x4c>
 800a17c:	79ba      	ldrb	r2, [r7, #6]
 800a17e:	79fb      	ldrb	r3, [r7, #7]
 800a180:	490d      	ldr	r1, [pc, #52]	; (800a1b8 <OLED_Refresh_Gram+0x6c>)
 800a182:	00d2      	lsls	r2, r2, #3
 800a184:	440a      	add	r2, r1
 800a186:	4413      	add	r3, r2
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	2101      	movs	r1, #1
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 f815 	bl	800a1bc <OLED_WR_Byte>
 800a192:	79bb      	ldrb	r3, [r7, #6]
 800a194:	3301      	adds	r3, #1
 800a196:	71bb      	strb	r3, [r7, #6]
 800a198:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	daed      	bge.n	800a17c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800a1a0:	79fb      	ldrb	r3, [r7, #7]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	71fb      	strb	r3, [r7, #7]
 800a1a6:	79fb      	ldrb	r3, [r7, #7]
 800a1a8:	2b07      	cmp	r3, #7
 800a1aa:	d9d5      	bls.n	800a158 <OLED_Refresh_Gram+0xc>
	}   
}
 800a1ac:	bf00      	nop
 800a1ae:	bf00      	nop
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	20004cdc 	.word	0x20004cdc

0800a1bc <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	460a      	mov	r2, r1
 800a1c6:	71fb      	strb	r3, [r7, #7]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800a1cc:	79bb      	ldrb	r3, [r7, #6]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d006      	beq.n	800a1e0 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a1d8:	481c      	ldr	r0, [pc, #112]	; (800a24c <OLED_WR_Byte+0x90>)
 800a1da:	f7f9 fc8d 	bl	8003af8 <HAL_GPIO_WritePin>
 800a1de:	e005      	b.n	800a1ec <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a1e6:	4819      	ldr	r0, [pc, #100]	; (800a24c <OLED_WR_Byte+0x90>)
 800a1e8:	f7f9 fc86 	bl	8003af8 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	73fb      	strb	r3, [r7, #15]
 800a1f0:	e01e      	b.n	800a230 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2120      	movs	r1, #32
 800a1f6:	4815      	ldr	r0, [pc, #84]	; (800a24c <OLED_WR_Byte+0x90>)
 800a1f8:	f7f9 fc7e 	bl	8003af8 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800a1fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a200:	2b00      	cmp	r3, #0
 800a202:	da05      	bge.n	800a210 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800a204:	2201      	movs	r2, #1
 800a206:	2140      	movs	r1, #64	; 0x40
 800a208:	4810      	ldr	r0, [pc, #64]	; (800a24c <OLED_WR_Byte+0x90>)
 800a20a:	f7f9 fc75 	bl	8003af8 <HAL_GPIO_WritePin>
 800a20e:	e004      	b.n	800a21a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800a210:	2200      	movs	r2, #0
 800a212:	2140      	movs	r1, #64	; 0x40
 800a214:	480d      	ldr	r0, [pc, #52]	; (800a24c <OLED_WR_Byte+0x90>)
 800a216:	f7f9 fc6f 	bl	8003af8 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800a21a:	2201      	movs	r2, #1
 800a21c:	2120      	movs	r1, #32
 800a21e:	480b      	ldr	r0, [pc, #44]	; (800a24c <OLED_WR_Byte+0x90>)
 800a220:	f7f9 fc6a 	bl	8003af8 <HAL_GPIO_WritePin>
		dat<<=1;   
 800a224:	79fb      	ldrb	r3, [r7, #7]
 800a226:	005b      	lsls	r3, r3, #1
 800a228:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800a22a:	7bfb      	ldrb	r3, [r7, #15]
 800a22c:	3301      	adds	r3, #1
 800a22e:	73fb      	strb	r3, [r7, #15]
 800a230:	7bfb      	ldrb	r3, [r7, #15]
 800a232:	2b07      	cmp	r3, #7
 800a234:	d9dd      	bls.n	800a1f2 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800a236:	2201      	movs	r2, #1
 800a238:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a23c:	4803      	ldr	r0, [pc, #12]	; (800a24c <OLED_WR_Byte+0x90>)
 800a23e:	f7f9 fc5b 	bl	8003af8 <HAL_GPIO_WritePin>
} 
 800a242:	bf00      	nop
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	40021000 	.word	0x40021000

0800a250 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800a256:	2300      	movs	r3, #0
 800a258:	71fb      	strb	r3, [r7, #7]
 800a25a:	e014      	b.n	800a286 <OLED_Clear+0x36>
 800a25c:	2300      	movs	r3, #0
 800a25e:	71bb      	strb	r3, [r7, #6]
 800a260:	e00a      	b.n	800a278 <OLED_Clear+0x28>
 800a262:	79ba      	ldrb	r2, [r7, #6]
 800a264:	79fb      	ldrb	r3, [r7, #7]
 800a266:	490c      	ldr	r1, [pc, #48]	; (800a298 <OLED_Clear+0x48>)
 800a268:	00d2      	lsls	r2, r2, #3
 800a26a:	440a      	add	r2, r1
 800a26c:	4413      	add	r3, r2
 800a26e:	2200      	movs	r2, #0
 800a270:	701a      	strb	r2, [r3, #0]
 800a272:	79bb      	ldrb	r3, [r7, #6]
 800a274:	3301      	adds	r3, #1
 800a276:	71bb      	strb	r3, [r7, #6]
 800a278:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	daf0      	bge.n	800a262 <OLED_Clear+0x12>
 800a280:	79fb      	ldrb	r3, [r7, #7]
 800a282:	3301      	adds	r3, #1
 800a284:	71fb      	strb	r3, [r7, #7]
 800a286:	79fb      	ldrb	r3, [r7, #7]
 800a288:	2b07      	cmp	r3, #7
 800a28a:	d9e7      	bls.n	800a25c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800a28c:	f7ff ff5e 	bl	800a14c <OLED_Refresh_Gram>
}
 800a290:	bf00      	nop
 800a292:	3708      	adds	r7, #8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	20004cdc 	.word	0x20004cdc

0800a29c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	71fb      	strb	r3, [r7, #7]
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	71bb      	strb	r3, [r7, #6]
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800a2b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	db41      	blt.n	800a33e <OLED_DrawPoint+0xa2>
 800a2ba:	79bb      	ldrb	r3, [r7, #6]
 800a2bc:	2b3f      	cmp	r3, #63	; 0x3f
 800a2be:	d83e      	bhi.n	800a33e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800a2c0:	79bb      	ldrb	r3, [r7, #6]
 800a2c2:	08db      	lsrs	r3, r3, #3
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	f1c3 0307 	rsb	r3, r3, #7
 800a2ca:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800a2cc:	79bb      	ldrb	r3, [r7, #6]
 800a2ce:	f003 0307 	and.w	r3, r3, #7
 800a2d2:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800a2d4:	7b7b      	ldrb	r3, [r7, #13]
 800a2d6:	f1c3 0307 	rsb	r3, r3, #7
 800a2da:	2201      	movs	r2, #1
 800a2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e0:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800a2e2:	797b      	ldrb	r3, [r7, #5]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d012      	beq.n	800a30e <OLED_DrawPoint+0x72>
 800a2e8:	79fa      	ldrb	r2, [r7, #7]
 800a2ea:	7bbb      	ldrb	r3, [r7, #14]
 800a2ec:	4917      	ldr	r1, [pc, #92]	; (800a34c <OLED_DrawPoint+0xb0>)
 800a2ee:	00d2      	lsls	r2, r2, #3
 800a2f0:	440a      	add	r2, r1
 800a2f2:	4413      	add	r3, r2
 800a2f4:	7818      	ldrb	r0, [r3, #0]
 800a2f6:	79fa      	ldrb	r2, [r7, #7]
 800a2f8:	7bbb      	ldrb	r3, [r7, #14]
 800a2fa:	7bf9      	ldrb	r1, [r7, #15]
 800a2fc:	4301      	orrs	r1, r0
 800a2fe:	b2c8      	uxtb	r0, r1
 800a300:	4912      	ldr	r1, [pc, #72]	; (800a34c <OLED_DrawPoint+0xb0>)
 800a302:	00d2      	lsls	r2, r2, #3
 800a304:	440a      	add	r2, r1
 800a306:	4413      	add	r3, r2
 800a308:	4602      	mov	r2, r0
 800a30a:	701a      	strb	r2, [r3, #0]
 800a30c:	e018      	b.n	800a340 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800a30e:	79fa      	ldrb	r2, [r7, #7]
 800a310:	7bbb      	ldrb	r3, [r7, #14]
 800a312:	490e      	ldr	r1, [pc, #56]	; (800a34c <OLED_DrawPoint+0xb0>)
 800a314:	00d2      	lsls	r2, r2, #3
 800a316:	440a      	add	r2, r1
 800a318:	4413      	add	r3, r2
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	b25a      	sxtb	r2, r3
 800a31e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a322:	43db      	mvns	r3, r3
 800a324:	b25b      	sxtb	r3, r3
 800a326:	4013      	ands	r3, r2
 800a328:	b259      	sxtb	r1, r3
 800a32a:	79fa      	ldrb	r2, [r7, #7]
 800a32c:	7bbb      	ldrb	r3, [r7, #14]
 800a32e:	b2c8      	uxtb	r0, r1
 800a330:	4906      	ldr	r1, [pc, #24]	; (800a34c <OLED_DrawPoint+0xb0>)
 800a332:	00d2      	lsls	r2, r2, #3
 800a334:	440a      	add	r2, r1
 800a336:	4413      	add	r3, r2
 800a338:	4602      	mov	r2, r0
 800a33a:	701a      	strb	r2, [r3, #0]
 800a33c:	e000      	b.n	800a340 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800a33e:	bf00      	nop
}
 800a340:	3714      	adds	r7, #20
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	20004cdc 	.word	0x20004cdc

0800a350 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800a350:	b590      	push	{r4, r7, lr}
 800a352:	b085      	sub	sp, #20
 800a354:	af00      	add	r7, sp, #0
 800a356:	4604      	mov	r4, r0
 800a358:	4608      	mov	r0, r1
 800a35a:	4611      	mov	r1, r2
 800a35c:	461a      	mov	r2, r3
 800a35e:	4623      	mov	r3, r4
 800a360:	71fb      	strb	r3, [r7, #7]
 800a362:	4603      	mov	r3, r0
 800a364:	71bb      	strb	r3, [r7, #6]
 800a366:	460b      	mov	r3, r1
 800a368:	717b      	strb	r3, [r7, #5]
 800a36a:	4613      	mov	r3, r2
 800a36c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800a36e:	79bb      	ldrb	r3, [r7, #6]
 800a370:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800a372:	797b      	ldrb	r3, [r7, #5]
 800a374:	3b20      	subs	r3, #32
 800a376:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800a378:	2300      	movs	r3, #0
 800a37a:	73bb      	strb	r3, [r7, #14]
 800a37c:	e04d      	b.n	800a41a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800a37e:	793b      	ldrb	r3, [r7, #4]
 800a380:	2b0c      	cmp	r3, #12
 800a382:	d10b      	bne.n	800a39c <OLED_ShowChar+0x4c>
 800a384:	797a      	ldrb	r2, [r7, #5]
 800a386:	7bb9      	ldrb	r1, [r7, #14]
 800a388:	4828      	ldr	r0, [pc, #160]	; (800a42c <OLED_ShowChar+0xdc>)
 800a38a:	4613      	mov	r3, r2
 800a38c:	005b      	lsls	r3, r3, #1
 800a38e:	4413      	add	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	4403      	add	r3, r0
 800a394:	440b      	add	r3, r1
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	73fb      	strb	r3, [r7, #15]
 800a39a:	e007      	b.n	800a3ac <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800a39c:	797a      	ldrb	r2, [r7, #5]
 800a39e:	7bbb      	ldrb	r3, [r7, #14]
 800a3a0:	4923      	ldr	r1, [pc, #140]	; (800a430 <OLED_ShowChar+0xe0>)
 800a3a2:	0112      	lsls	r2, r2, #4
 800a3a4:	440a      	add	r2, r1
 800a3a6:	4413      	add	r3, r2
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	737b      	strb	r3, [r7, #13]
 800a3b0:	e02d      	b.n	800a40e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800a3b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	da07      	bge.n	800a3ca <OLED_ShowChar+0x7a>
 800a3ba:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a3be:	79b9      	ldrb	r1, [r7, #6]
 800a3c0:	79fb      	ldrb	r3, [r7, #7]
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7ff ff6a 	bl	800a29c <OLED_DrawPoint>
 800a3c8:	e00c      	b.n	800a3e4 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800a3ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	bf0c      	ite	eq
 800a3d2:	2301      	moveq	r3, #1
 800a3d4:	2300      	movne	r3, #0
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	461a      	mov	r2, r3
 800a3da:	79b9      	ldrb	r1, [r7, #6]
 800a3dc:	79fb      	ldrb	r3, [r7, #7]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7ff ff5c 	bl	800a29c <OLED_DrawPoint>
			temp<<=1;
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
 800a3e6:	005b      	lsls	r3, r3, #1
 800a3e8:	73fb      	strb	r3, [r7, #15]
			y++;
 800a3ea:	79bb      	ldrb	r3, [r7, #6]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800a3f0:	79ba      	ldrb	r2, [r7, #6]
 800a3f2:	7b3b      	ldrb	r3, [r7, #12]
 800a3f4:	1ad2      	subs	r2, r2, r3
 800a3f6:	793b      	ldrb	r3, [r7, #4]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d105      	bne.n	800a408 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800a3fc:	7b3b      	ldrb	r3, [r7, #12]
 800a3fe:	71bb      	strb	r3, [r7, #6]
				x++;
 800a400:	79fb      	ldrb	r3, [r7, #7]
 800a402:	3301      	adds	r3, #1
 800a404:	71fb      	strb	r3, [r7, #7]
				break;
 800a406:	e005      	b.n	800a414 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800a408:	7b7b      	ldrb	r3, [r7, #13]
 800a40a:	3301      	adds	r3, #1
 800a40c:	737b      	strb	r3, [r7, #13]
 800a40e:	7b7b      	ldrb	r3, [r7, #13]
 800a410:	2b07      	cmp	r3, #7
 800a412:	d9ce      	bls.n	800a3b2 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800a414:	7bbb      	ldrb	r3, [r7, #14]
 800a416:	3301      	adds	r3, #1
 800a418:	73bb      	strb	r3, [r7, #14]
 800a41a:	7bba      	ldrb	r2, [r7, #14]
 800a41c:	793b      	ldrb	r3, [r7, #4]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d3ad      	bcc.n	800a37e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800a422:	bf00      	nop
 800a424:	bf00      	nop
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd90      	pop	{r4, r7, pc}
 800a42c:	0800bc5c 	.word	0x0800bc5c
 800a430:	0800c0d0 	.word	0x0800c0d0

0800a434 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af02      	add	r7, sp, #8
 800a43a:	4603      	mov	r3, r0
 800a43c:	603a      	str	r2, [r7, #0]
 800a43e:	71fb      	strb	r3, [r7, #7]
 800a440:	460b      	mov	r3, r1
 800a442:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800a444:	e01f      	b.n	800a486 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800a446:	79fb      	ldrb	r3, [r7, #7]
 800a448:	2b7a      	cmp	r3, #122	; 0x7a
 800a44a:	d904      	bls.n	800a456 <OLED_ShowString+0x22>
 800a44c:	2300      	movs	r3, #0
 800a44e:	71fb      	strb	r3, [r7, #7]
 800a450:	79bb      	ldrb	r3, [r7, #6]
 800a452:	3310      	adds	r3, #16
 800a454:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800a456:	79bb      	ldrb	r3, [r7, #6]
 800a458:	2b3a      	cmp	r3, #58	; 0x3a
 800a45a:	d905      	bls.n	800a468 <OLED_ShowString+0x34>
 800a45c:	2300      	movs	r3, #0
 800a45e:	71fb      	strb	r3, [r7, #7]
 800a460:	79fb      	ldrb	r3, [r7, #7]
 800a462:	71bb      	strb	r3, [r7, #6]
 800a464:	f7ff fef4 	bl	800a250 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	781a      	ldrb	r2, [r3, #0]
 800a46c:	79b9      	ldrb	r1, [r7, #6]
 800a46e:	79f8      	ldrb	r0, [r7, #7]
 800a470:	2301      	movs	r3, #1
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	230c      	movs	r3, #12
 800a476:	f7ff ff6b 	bl	800a350 <OLED_ShowChar>
        x+=8;
 800a47a:	79fb      	ldrb	r3, [r7, #7]
 800a47c:	3308      	adds	r3, #8
 800a47e:	71fb      	strb	r3, [r7, #7]
        p++;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	3301      	adds	r3, #1
 800a484:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1db      	bne.n	800a446 <OLED_ShowString+0x12>
    }  
}	 
 800a48e:	bf00      	nop
 800a490:	bf00      	nop
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <OLED_Init>:

void OLED_Init(void)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800a49c:	f7fa faf6 	bl	8004a8c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800a4a0:	4b41      	ldr	r3, [pc, #260]	; (800a5a8 <OLED_Init+0x110>)
 800a4a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a4:	4a40      	ldr	r2, [pc, #256]	; (800a5a8 <OLED_Init+0x110>)
 800a4a6:	f023 0301 	bic.w	r3, r3, #1
 800a4aa:	6713      	str	r3, [r2, #112]	; 0x70
 800a4ac:	4b3e      	ldr	r3, [pc, #248]	; (800a5a8 <OLED_Init+0x110>)
 800a4ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4b0:	4a3d      	ldr	r2, [pc, #244]	; (800a5a8 <OLED_Init+0x110>)
 800a4b2:	f023 0304 	bic.w	r3, r3, #4
 800a4b6:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800a4b8:	f7fa fafc 	bl	8004ab4 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2180      	movs	r1, #128	; 0x80
 800a4c0:	483a      	ldr	r0, [pc, #232]	; (800a5ac <OLED_Init+0x114>)
 800a4c2:	f7f9 fb19 	bl	8003af8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800a4c6:	2064      	movs	r0, #100	; 0x64
 800a4c8:	f7f8 ff9a 	bl	8003400 <HAL_Delay>
	OLED_RST_Set();
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	2180      	movs	r1, #128	; 0x80
 800a4d0:	4836      	ldr	r0, [pc, #216]	; (800a5ac <OLED_Init+0x114>)
 800a4d2:	f7f9 fb11 	bl	8003af8 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	20ae      	movs	r0, #174	; 0xae
 800a4da:	f7ff fe6f 	bl	800a1bc <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800a4de:	2100      	movs	r1, #0
 800a4e0:	20d5      	movs	r0, #213	; 0xd5
 800a4e2:	f7ff fe6b 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	2050      	movs	r0, #80	; 0x50
 800a4ea:	f7ff fe67 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800a4ee:	2100      	movs	r1, #0
 800a4f0:	20a8      	movs	r0, #168	; 0xa8
 800a4f2:	f7ff fe63 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	203f      	movs	r0, #63	; 0x3f
 800a4fa:	f7ff fe5f 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800a4fe:	2100      	movs	r1, #0
 800a500:	20d3      	movs	r0, #211	; 0xd3
 800a502:	f7ff fe5b 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800a506:	2100      	movs	r1, #0
 800a508:	2000      	movs	r0, #0
 800a50a:	f7ff fe57 	bl	800a1bc <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800a50e:	2100      	movs	r1, #0
 800a510:	2040      	movs	r0, #64	; 0x40
 800a512:	f7ff fe53 	bl	800a1bc <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800a516:	2100      	movs	r1, #0
 800a518:	208d      	movs	r0, #141	; 0x8d
 800a51a:	f7ff fe4f 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800a51e:	2100      	movs	r1, #0
 800a520:	2014      	movs	r0, #20
 800a522:	f7ff fe4b 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800a526:	2100      	movs	r1, #0
 800a528:	2020      	movs	r0, #32
 800a52a:	f7ff fe47 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800a52e:	2100      	movs	r1, #0
 800a530:	2002      	movs	r0, #2
 800a532:	f7ff fe43 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800a536:	2100      	movs	r1, #0
 800a538:	20a1      	movs	r0, #161	; 0xa1
 800a53a:	f7ff fe3f 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800a53e:	2100      	movs	r1, #0
 800a540:	20c0      	movs	r0, #192	; 0xc0
 800a542:	f7ff fe3b 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800a546:	2100      	movs	r1, #0
 800a548:	20da      	movs	r0, #218	; 0xda
 800a54a:	f7ff fe37 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800a54e:	2100      	movs	r1, #0
 800a550:	2012      	movs	r0, #18
 800a552:	f7ff fe33 	bl	800a1bc <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800a556:	2100      	movs	r1, #0
 800a558:	2081      	movs	r0, #129	; 0x81
 800a55a:	f7ff fe2f 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800a55e:	2100      	movs	r1, #0
 800a560:	20ef      	movs	r0, #239	; 0xef
 800a562:	f7ff fe2b 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800a566:	2100      	movs	r1, #0
 800a568:	20d9      	movs	r0, #217	; 0xd9
 800a56a:	f7ff fe27 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800a56e:	2100      	movs	r1, #0
 800a570:	20f1      	movs	r0, #241	; 0xf1
 800a572:	f7ff fe23 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800a576:	2100      	movs	r1, #0
 800a578:	20db      	movs	r0, #219	; 0xdb
 800a57a:	f7ff fe1f 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800a57e:	2100      	movs	r1, #0
 800a580:	2030      	movs	r0, #48	; 0x30
 800a582:	f7ff fe1b 	bl	800a1bc <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800a586:	2100      	movs	r1, #0
 800a588:	20a4      	movs	r0, #164	; 0xa4
 800a58a:	f7ff fe17 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800a58e:	2100      	movs	r1, #0
 800a590:	20a6      	movs	r0, #166	; 0xa6
 800a592:	f7ff fe13 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800a596:	2100      	movs	r1, #0
 800a598:	20af      	movs	r0, #175	; 0xaf
 800a59a:	f7ff fe0f 	bl	800a1bc <OLED_WR_Byte>
	OLED_Clear(); 
 800a59e:	f7ff fe57 	bl	800a250 <OLED_Clear>
}
 800a5a2:	bf00      	nop
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	40023800 	.word	0x40023800
 800a5ac:	40021000 	.word	0x40021000

0800a5b0 <__errno>:
 800a5b0:	4b01      	ldr	r3, [pc, #4]	; (800a5b8 <__errno+0x8>)
 800a5b2:	6818      	ldr	r0, [r3, #0]
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	2000001c 	.word	0x2000001c

0800a5bc <std>:
 800a5bc:	2300      	movs	r3, #0
 800a5be:	b510      	push	{r4, lr}
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	e9c0 3300 	strd	r3, r3, [r0]
 800a5c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5ca:	6083      	str	r3, [r0, #8]
 800a5cc:	8181      	strh	r1, [r0, #12]
 800a5ce:	6643      	str	r3, [r0, #100]	; 0x64
 800a5d0:	81c2      	strh	r2, [r0, #14]
 800a5d2:	6183      	str	r3, [r0, #24]
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	2208      	movs	r2, #8
 800a5d8:	305c      	adds	r0, #92	; 0x5c
 800a5da:	f000 f91a 	bl	800a812 <memset>
 800a5de:	4b05      	ldr	r3, [pc, #20]	; (800a5f4 <std+0x38>)
 800a5e0:	6263      	str	r3, [r4, #36]	; 0x24
 800a5e2:	4b05      	ldr	r3, [pc, #20]	; (800a5f8 <std+0x3c>)
 800a5e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5e6:	4b05      	ldr	r3, [pc, #20]	; (800a5fc <std+0x40>)
 800a5e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5ea:	4b05      	ldr	r3, [pc, #20]	; (800a600 <std+0x44>)
 800a5ec:	6224      	str	r4, [r4, #32]
 800a5ee:	6323      	str	r3, [r4, #48]	; 0x30
 800a5f0:	bd10      	pop	{r4, pc}
 800a5f2:	bf00      	nop
 800a5f4:	0800aab1 	.word	0x0800aab1
 800a5f8:	0800aad3 	.word	0x0800aad3
 800a5fc:	0800ab0b 	.word	0x0800ab0b
 800a600:	0800ab2f 	.word	0x0800ab2f

0800a604 <_cleanup_r>:
 800a604:	4901      	ldr	r1, [pc, #4]	; (800a60c <_cleanup_r+0x8>)
 800a606:	f000 b8af 	b.w	800a768 <_fwalk_reent>
 800a60a:	bf00      	nop
 800a60c:	0800acb1 	.word	0x0800acb1

0800a610 <__sfmoreglue>:
 800a610:	b570      	push	{r4, r5, r6, lr}
 800a612:	2268      	movs	r2, #104	; 0x68
 800a614:	1e4d      	subs	r5, r1, #1
 800a616:	4355      	muls	r5, r2
 800a618:	460e      	mov	r6, r1
 800a61a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a61e:	f000 f921 	bl	800a864 <_malloc_r>
 800a622:	4604      	mov	r4, r0
 800a624:	b140      	cbz	r0, 800a638 <__sfmoreglue+0x28>
 800a626:	2100      	movs	r1, #0
 800a628:	e9c0 1600 	strd	r1, r6, [r0]
 800a62c:	300c      	adds	r0, #12
 800a62e:	60a0      	str	r0, [r4, #8]
 800a630:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a634:	f000 f8ed 	bl	800a812 <memset>
 800a638:	4620      	mov	r0, r4
 800a63a:	bd70      	pop	{r4, r5, r6, pc}

0800a63c <__sfp_lock_acquire>:
 800a63c:	4801      	ldr	r0, [pc, #4]	; (800a644 <__sfp_lock_acquire+0x8>)
 800a63e:	f000 b8d8 	b.w	800a7f2 <__retarget_lock_acquire_recursive>
 800a642:	bf00      	nop
 800a644:	200050dd 	.word	0x200050dd

0800a648 <__sfp_lock_release>:
 800a648:	4801      	ldr	r0, [pc, #4]	; (800a650 <__sfp_lock_release+0x8>)
 800a64a:	f000 b8d3 	b.w	800a7f4 <__retarget_lock_release_recursive>
 800a64e:	bf00      	nop
 800a650:	200050dd 	.word	0x200050dd

0800a654 <__sinit_lock_acquire>:
 800a654:	4801      	ldr	r0, [pc, #4]	; (800a65c <__sinit_lock_acquire+0x8>)
 800a656:	f000 b8cc 	b.w	800a7f2 <__retarget_lock_acquire_recursive>
 800a65a:	bf00      	nop
 800a65c:	200050de 	.word	0x200050de

0800a660 <__sinit_lock_release>:
 800a660:	4801      	ldr	r0, [pc, #4]	; (800a668 <__sinit_lock_release+0x8>)
 800a662:	f000 b8c7 	b.w	800a7f4 <__retarget_lock_release_recursive>
 800a666:	bf00      	nop
 800a668:	200050de 	.word	0x200050de

0800a66c <__sinit>:
 800a66c:	b510      	push	{r4, lr}
 800a66e:	4604      	mov	r4, r0
 800a670:	f7ff fff0 	bl	800a654 <__sinit_lock_acquire>
 800a674:	69a3      	ldr	r3, [r4, #24]
 800a676:	b11b      	cbz	r3, 800a680 <__sinit+0x14>
 800a678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a67c:	f7ff bff0 	b.w	800a660 <__sinit_lock_release>
 800a680:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a684:	6523      	str	r3, [r4, #80]	; 0x50
 800a686:	4b13      	ldr	r3, [pc, #76]	; (800a6d4 <__sinit+0x68>)
 800a688:	4a13      	ldr	r2, [pc, #76]	; (800a6d8 <__sinit+0x6c>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a68e:	42a3      	cmp	r3, r4
 800a690:	bf04      	itt	eq
 800a692:	2301      	moveq	r3, #1
 800a694:	61a3      	streq	r3, [r4, #24]
 800a696:	4620      	mov	r0, r4
 800a698:	f000 f820 	bl	800a6dc <__sfp>
 800a69c:	6060      	str	r0, [r4, #4]
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f000 f81c 	bl	800a6dc <__sfp>
 800a6a4:	60a0      	str	r0, [r4, #8]
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f000 f818 	bl	800a6dc <__sfp>
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	60e0      	str	r0, [r4, #12]
 800a6b0:	2104      	movs	r1, #4
 800a6b2:	6860      	ldr	r0, [r4, #4]
 800a6b4:	f7ff ff82 	bl	800a5bc <std>
 800a6b8:	68a0      	ldr	r0, [r4, #8]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	2109      	movs	r1, #9
 800a6be:	f7ff ff7d 	bl	800a5bc <std>
 800a6c2:	68e0      	ldr	r0, [r4, #12]
 800a6c4:	2202      	movs	r2, #2
 800a6c6:	2112      	movs	r1, #18
 800a6c8:	f7ff ff78 	bl	800a5bc <std>
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	61a3      	str	r3, [r4, #24]
 800a6d0:	e7d2      	b.n	800a678 <__sinit+0xc>
 800a6d2:	bf00      	nop
 800a6d4:	0800c720 	.word	0x0800c720
 800a6d8:	0800a605 	.word	0x0800a605

0800a6dc <__sfp>:
 800a6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6de:	4607      	mov	r7, r0
 800a6e0:	f7ff ffac 	bl	800a63c <__sfp_lock_acquire>
 800a6e4:	4b1e      	ldr	r3, [pc, #120]	; (800a760 <__sfp+0x84>)
 800a6e6:	681e      	ldr	r6, [r3, #0]
 800a6e8:	69b3      	ldr	r3, [r6, #24]
 800a6ea:	b913      	cbnz	r3, 800a6f2 <__sfp+0x16>
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	f7ff ffbd 	bl	800a66c <__sinit>
 800a6f2:	3648      	adds	r6, #72	; 0x48
 800a6f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	d503      	bpl.n	800a704 <__sfp+0x28>
 800a6fc:	6833      	ldr	r3, [r6, #0]
 800a6fe:	b30b      	cbz	r3, 800a744 <__sfp+0x68>
 800a700:	6836      	ldr	r6, [r6, #0]
 800a702:	e7f7      	b.n	800a6f4 <__sfp+0x18>
 800a704:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a708:	b9d5      	cbnz	r5, 800a740 <__sfp+0x64>
 800a70a:	4b16      	ldr	r3, [pc, #88]	; (800a764 <__sfp+0x88>)
 800a70c:	60e3      	str	r3, [r4, #12]
 800a70e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a712:	6665      	str	r5, [r4, #100]	; 0x64
 800a714:	f000 f86c 	bl	800a7f0 <__retarget_lock_init_recursive>
 800a718:	f7ff ff96 	bl	800a648 <__sfp_lock_release>
 800a71c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a720:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a724:	6025      	str	r5, [r4, #0]
 800a726:	61a5      	str	r5, [r4, #24]
 800a728:	2208      	movs	r2, #8
 800a72a:	4629      	mov	r1, r5
 800a72c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a730:	f000 f86f 	bl	800a812 <memset>
 800a734:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a738:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a73c:	4620      	mov	r0, r4
 800a73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a740:	3468      	adds	r4, #104	; 0x68
 800a742:	e7d9      	b.n	800a6f8 <__sfp+0x1c>
 800a744:	2104      	movs	r1, #4
 800a746:	4638      	mov	r0, r7
 800a748:	f7ff ff62 	bl	800a610 <__sfmoreglue>
 800a74c:	4604      	mov	r4, r0
 800a74e:	6030      	str	r0, [r6, #0]
 800a750:	2800      	cmp	r0, #0
 800a752:	d1d5      	bne.n	800a700 <__sfp+0x24>
 800a754:	f7ff ff78 	bl	800a648 <__sfp_lock_release>
 800a758:	230c      	movs	r3, #12
 800a75a:	603b      	str	r3, [r7, #0]
 800a75c:	e7ee      	b.n	800a73c <__sfp+0x60>
 800a75e:	bf00      	nop
 800a760:	0800c720 	.word	0x0800c720
 800a764:	ffff0001 	.word	0xffff0001

0800a768 <_fwalk_reent>:
 800a768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a76c:	4606      	mov	r6, r0
 800a76e:	4688      	mov	r8, r1
 800a770:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a774:	2700      	movs	r7, #0
 800a776:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a77a:	f1b9 0901 	subs.w	r9, r9, #1
 800a77e:	d505      	bpl.n	800a78c <_fwalk_reent+0x24>
 800a780:	6824      	ldr	r4, [r4, #0]
 800a782:	2c00      	cmp	r4, #0
 800a784:	d1f7      	bne.n	800a776 <_fwalk_reent+0xe>
 800a786:	4638      	mov	r0, r7
 800a788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a78c:	89ab      	ldrh	r3, [r5, #12]
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d907      	bls.n	800a7a2 <_fwalk_reent+0x3a>
 800a792:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a796:	3301      	adds	r3, #1
 800a798:	d003      	beq.n	800a7a2 <_fwalk_reent+0x3a>
 800a79a:	4629      	mov	r1, r5
 800a79c:	4630      	mov	r0, r6
 800a79e:	47c0      	blx	r8
 800a7a0:	4307      	orrs	r7, r0
 800a7a2:	3568      	adds	r5, #104	; 0x68
 800a7a4:	e7e9      	b.n	800a77a <_fwalk_reent+0x12>
	...

0800a7a8 <__libc_init_array>:
 800a7a8:	b570      	push	{r4, r5, r6, lr}
 800a7aa:	4d0d      	ldr	r5, [pc, #52]	; (800a7e0 <__libc_init_array+0x38>)
 800a7ac:	4c0d      	ldr	r4, [pc, #52]	; (800a7e4 <__libc_init_array+0x3c>)
 800a7ae:	1b64      	subs	r4, r4, r5
 800a7b0:	10a4      	asrs	r4, r4, #2
 800a7b2:	2600      	movs	r6, #0
 800a7b4:	42a6      	cmp	r6, r4
 800a7b6:	d109      	bne.n	800a7cc <__libc_init_array+0x24>
 800a7b8:	4d0b      	ldr	r5, [pc, #44]	; (800a7e8 <__libc_init_array+0x40>)
 800a7ba:	4c0c      	ldr	r4, [pc, #48]	; (800a7ec <__libc_init_array+0x44>)
 800a7bc:	f001 f914 	bl	800b9e8 <_init>
 800a7c0:	1b64      	subs	r4, r4, r5
 800a7c2:	10a4      	asrs	r4, r4, #2
 800a7c4:	2600      	movs	r6, #0
 800a7c6:	42a6      	cmp	r6, r4
 800a7c8:	d105      	bne.n	800a7d6 <__libc_init_array+0x2e>
 800a7ca:	bd70      	pop	{r4, r5, r6, pc}
 800a7cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7d0:	4798      	blx	r3
 800a7d2:	3601      	adds	r6, #1
 800a7d4:	e7ee      	b.n	800a7b4 <__libc_init_array+0xc>
 800a7d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7da:	4798      	blx	r3
 800a7dc:	3601      	adds	r6, #1
 800a7de:	e7f2      	b.n	800a7c6 <__libc_init_array+0x1e>
 800a7e0:	0800c760 	.word	0x0800c760
 800a7e4:	0800c760 	.word	0x0800c760
 800a7e8:	0800c760 	.word	0x0800c760
 800a7ec:	0800c764 	.word	0x0800c764

0800a7f0 <__retarget_lock_init_recursive>:
 800a7f0:	4770      	bx	lr

0800a7f2 <__retarget_lock_acquire_recursive>:
 800a7f2:	4770      	bx	lr

0800a7f4 <__retarget_lock_release_recursive>:
 800a7f4:	4770      	bx	lr

0800a7f6 <memcpy>:
 800a7f6:	440a      	add	r2, r1
 800a7f8:	4291      	cmp	r1, r2
 800a7fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7fe:	d100      	bne.n	800a802 <memcpy+0xc>
 800a800:	4770      	bx	lr
 800a802:	b510      	push	{r4, lr}
 800a804:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a808:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a80c:	4291      	cmp	r1, r2
 800a80e:	d1f9      	bne.n	800a804 <memcpy+0xe>
 800a810:	bd10      	pop	{r4, pc}

0800a812 <memset>:
 800a812:	4402      	add	r2, r0
 800a814:	4603      	mov	r3, r0
 800a816:	4293      	cmp	r3, r2
 800a818:	d100      	bne.n	800a81c <memset+0xa>
 800a81a:	4770      	bx	lr
 800a81c:	f803 1b01 	strb.w	r1, [r3], #1
 800a820:	e7f9      	b.n	800a816 <memset+0x4>
	...

0800a824 <sbrk_aligned>:
 800a824:	b570      	push	{r4, r5, r6, lr}
 800a826:	4e0e      	ldr	r6, [pc, #56]	; (800a860 <sbrk_aligned+0x3c>)
 800a828:	460c      	mov	r4, r1
 800a82a:	6831      	ldr	r1, [r6, #0]
 800a82c:	4605      	mov	r5, r0
 800a82e:	b911      	cbnz	r1, 800a836 <sbrk_aligned+0x12>
 800a830:	f000 f90e 	bl	800aa50 <_sbrk_r>
 800a834:	6030      	str	r0, [r6, #0]
 800a836:	4621      	mov	r1, r4
 800a838:	4628      	mov	r0, r5
 800a83a:	f000 f909 	bl	800aa50 <_sbrk_r>
 800a83e:	1c43      	adds	r3, r0, #1
 800a840:	d00a      	beq.n	800a858 <sbrk_aligned+0x34>
 800a842:	1cc4      	adds	r4, r0, #3
 800a844:	f024 0403 	bic.w	r4, r4, #3
 800a848:	42a0      	cmp	r0, r4
 800a84a:	d007      	beq.n	800a85c <sbrk_aligned+0x38>
 800a84c:	1a21      	subs	r1, r4, r0
 800a84e:	4628      	mov	r0, r5
 800a850:	f000 f8fe 	bl	800aa50 <_sbrk_r>
 800a854:	3001      	adds	r0, #1
 800a856:	d101      	bne.n	800a85c <sbrk_aligned+0x38>
 800a858:	f04f 34ff 	mov.w	r4, #4294967295
 800a85c:	4620      	mov	r0, r4
 800a85e:	bd70      	pop	{r4, r5, r6, pc}
 800a860:	200050e4 	.word	0x200050e4

0800a864 <_malloc_r>:
 800a864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a868:	1ccd      	adds	r5, r1, #3
 800a86a:	f025 0503 	bic.w	r5, r5, #3
 800a86e:	3508      	adds	r5, #8
 800a870:	2d0c      	cmp	r5, #12
 800a872:	bf38      	it	cc
 800a874:	250c      	movcc	r5, #12
 800a876:	2d00      	cmp	r5, #0
 800a878:	4607      	mov	r7, r0
 800a87a:	db01      	blt.n	800a880 <_malloc_r+0x1c>
 800a87c:	42a9      	cmp	r1, r5
 800a87e:	d905      	bls.n	800a88c <_malloc_r+0x28>
 800a880:	230c      	movs	r3, #12
 800a882:	603b      	str	r3, [r7, #0]
 800a884:	2600      	movs	r6, #0
 800a886:	4630      	mov	r0, r6
 800a888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a88c:	4e2e      	ldr	r6, [pc, #184]	; (800a948 <_malloc_r+0xe4>)
 800a88e:	f000 fa5d 	bl	800ad4c <__malloc_lock>
 800a892:	6833      	ldr	r3, [r6, #0]
 800a894:	461c      	mov	r4, r3
 800a896:	bb34      	cbnz	r4, 800a8e6 <_malloc_r+0x82>
 800a898:	4629      	mov	r1, r5
 800a89a:	4638      	mov	r0, r7
 800a89c:	f7ff ffc2 	bl	800a824 <sbrk_aligned>
 800a8a0:	1c43      	adds	r3, r0, #1
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	d14d      	bne.n	800a942 <_malloc_r+0xde>
 800a8a6:	6834      	ldr	r4, [r6, #0]
 800a8a8:	4626      	mov	r6, r4
 800a8aa:	2e00      	cmp	r6, #0
 800a8ac:	d140      	bne.n	800a930 <_malloc_r+0xcc>
 800a8ae:	6823      	ldr	r3, [r4, #0]
 800a8b0:	4631      	mov	r1, r6
 800a8b2:	4638      	mov	r0, r7
 800a8b4:	eb04 0803 	add.w	r8, r4, r3
 800a8b8:	f000 f8ca 	bl	800aa50 <_sbrk_r>
 800a8bc:	4580      	cmp	r8, r0
 800a8be:	d13a      	bne.n	800a936 <_malloc_r+0xd2>
 800a8c0:	6821      	ldr	r1, [r4, #0]
 800a8c2:	3503      	adds	r5, #3
 800a8c4:	1a6d      	subs	r5, r5, r1
 800a8c6:	f025 0503 	bic.w	r5, r5, #3
 800a8ca:	3508      	adds	r5, #8
 800a8cc:	2d0c      	cmp	r5, #12
 800a8ce:	bf38      	it	cc
 800a8d0:	250c      	movcc	r5, #12
 800a8d2:	4629      	mov	r1, r5
 800a8d4:	4638      	mov	r0, r7
 800a8d6:	f7ff ffa5 	bl	800a824 <sbrk_aligned>
 800a8da:	3001      	adds	r0, #1
 800a8dc:	d02b      	beq.n	800a936 <_malloc_r+0xd2>
 800a8de:	6823      	ldr	r3, [r4, #0]
 800a8e0:	442b      	add	r3, r5
 800a8e2:	6023      	str	r3, [r4, #0]
 800a8e4:	e00e      	b.n	800a904 <_malloc_r+0xa0>
 800a8e6:	6822      	ldr	r2, [r4, #0]
 800a8e8:	1b52      	subs	r2, r2, r5
 800a8ea:	d41e      	bmi.n	800a92a <_malloc_r+0xc6>
 800a8ec:	2a0b      	cmp	r2, #11
 800a8ee:	d916      	bls.n	800a91e <_malloc_r+0xba>
 800a8f0:	1961      	adds	r1, r4, r5
 800a8f2:	42a3      	cmp	r3, r4
 800a8f4:	6025      	str	r5, [r4, #0]
 800a8f6:	bf18      	it	ne
 800a8f8:	6059      	strne	r1, [r3, #4]
 800a8fa:	6863      	ldr	r3, [r4, #4]
 800a8fc:	bf08      	it	eq
 800a8fe:	6031      	streq	r1, [r6, #0]
 800a900:	5162      	str	r2, [r4, r5]
 800a902:	604b      	str	r3, [r1, #4]
 800a904:	4638      	mov	r0, r7
 800a906:	f104 060b 	add.w	r6, r4, #11
 800a90a:	f000 fa25 	bl	800ad58 <__malloc_unlock>
 800a90e:	f026 0607 	bic.w	r6, r6, #7
 800a912:	1d23      	adds	r3, r4, #4
 800a914:	1af2      	subs	r2, r6, r3
 800a916:	d0b6      	beq.n	800a886 <_malloc_r+0x22>
 800a918:	1b9b      	subs	r3, r3, r6
 800a91a:	50a3      	str	r3, [r4, r2]
 800a91c:	e7b3      	b.n	800a886 <_malloc_r+0x22>
 800a91e:	6862      	ldr	r2, [r4, #4]
 800a920:	42a3      	cmp	r3, r4
 800a922:	bf0c      	ite	eq
 800a924:	6032      	streq	r2, [r6, #0]
 800a926:	605a      	strne	r2, [r3, #4]
 800a928:	e7ec      	b.n	800a904 <_malloc_r+0xa0>
 800a92a:	4623      	mov	r3, r4
 800a92c:	6864      	ldr	r4, [r4, #4]
 800a92e:	e7b2      	b.n	800a896 <_malloc_r+0x32>
 800a930:	4634      	mov	r4, r6
 800a932:	6876      	ldr	r6, [r6, #4]
 800a934:	e7b9      	b.n	800a8aa <_malloc_r+0x46>
 800a936:	230c      	movs	r3, #12
 800a938:	603b      	str	r3, [r7, #0]
 800a93a:	4638      	mov	r0, r7
 800a93c:	f000 fa0c 	bl	800ad58 <__malloc_unlock>
 800a940:	e7a1      	b.n	800a886 <_malloc_r+0x22>
 800a942:	6025      	str	r5, [r4, #0]
 800a944:	e7de      	b.n	800a904 <_malloc_r+0xa0>
 800a946:	bf00      	nop
 800a948:	200050e0 	.word	0x200050e0

0800a94c <iprintf>:
 800a94c:	b40f      	push	{r0, r1, r2, r3}
 800a94e:	4b0a      	ldr	r3, [pc, #40]	; (800a978 <iprintf+0x2c>)
 800a950:	b513      	push	{r0, r1, r4, lr}
 800a952:	681c      	ldr	r4, [r3, #0]
 800a954:	b124      	cbz	r4, 800a960 <iprintf+0x14>
 800a956:	69a3      	ldr	r3, [r4, #24]
 800a958:	b913      	cbnz	r3, 800a960 <iprintf+0x14>
 800a95a:	4620      	mov	r0, r4
 800a95c:	f7ff fe86 	bl	800a66c <__sinit>
 800a960:	ab05      	add	r3, sp, #20
 800a962:	9a04      	ldr	r2, [sp, #16]
 800a964:	68a1      	ldr	r1, [r4, #8]
 800a966:	9301      	str	r3, [sp, #4]
 800a968:	4620      	mov	r0, r4
 800a96a:	f000 fbcd 	bl	800b108 <_vfiprintf_r>
 800a96e:	b002      	add	sp, #8
 800a970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a974:	b004      	add	sp, #16
 800a976:	4770      	bx	lr
 800a978:	2000001c 	.word	0x2000001c

0800a97c <cleanup_glue>:
 800a97c:	b538      	push	{r3, r4, r5, lr}
 800a97e:	460c      	mov	r4, r1
 800a980:	6809      	ldr	r1, [r1, #0]
 800a982:	4605      	mov	r5, r0
 800a984:	b109      	cbz	r1, 800a98a <cleanup_glue+0xe>
 800a986:	f7ff fff9 	bl	800a97c <cleanup_glue>
 800a98a:	4621      	mov	r1, r4
 800a98c:	4628      	mov	r0, r5
 800a98e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a992:	f000 b9e7 	b.w	800ad64 <_free_r>
	...

0800a998 <_reclaim_reent>:
 800a998:	4b2c      	ldr	r3, [pc, #176]	; (800aa4c <_reclaim_reent+0xb4>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4283      	cmp	r3, r0
 800a99e:	b570      	push	{r4, r5, r6, lr}
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	d051      	beq.n	800aa48 <_reclaim_reent+0xb0>
 800a9a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a9a6:	b143      	cbz	r3, 800a9ba <_reclaim_reent+0x22>
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d14a      	bne.n	800aa44 <_reclaim_reent+0xac>
 800a9ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9b0:	6819      	ldr	r1, [r3, #0]
 800a9b2:	b111      	cbz	r1, 800a9ba <_reclaim_reent+0x22>
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f000 f9d5 	bl	800ad64 <_free_r>
 800a9ba:	6961      	ldr	r1, [r4, #20]
 800a9bc:	b111      	cbz	r1, 800a9c4 <_reclaim_reent+0x2c>
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f000 f9d0 	bl	800ad64 <_free_r>
 800a9c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a9c6:	b111      	cbz	r1, 800a9ce <_reclaim_reent+0x36>
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f000 f9cb 	bl	800ad64 <_free_r>
 800a9ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a9d0:	b111      	cbz	r1, 800a9d8 <_reclaim_reent+0x40>
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f000 f9c6 	bl	800ad64 <_free_r>
 800a9d8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a9da:	b111      	cbz	r1, 800a9e2 <_reclaim_reent+0x4a>
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f000 f9c1 	bl	800ad64 <_free_r>
 800a9e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a9e4:	b111      	cbz	r1, 800a9ec <_reclaim_reent+0x54>
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f000 f9bc 	bl	800ad64 <_free_r>
 800a9ec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a9ee:	b111      	cbz	r1, 800a9f6 <_reclaim_reent+0x5e>
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f000 f9b7 	bl	800ad64 <_free_r>
 800a9f6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a9f8:	b111      	cbz	r1, 800aa00 <_reclaim_reent+0x68>
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f000 f9b2 	bl	800ad64 <_free_r>
 800aa00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa02:	b111      	cbz	r1, 800aa0a <_reclaim_reent+0x72>
 800aa04:	4620      	mov	r0, r4
 800aa06:	f000 f9ad 	bl	800ad64 <_free_r>
 800aa0a:	69a3      	ldr	r3, [r4, #24]
 800aa0c:	b1e3      	cbz	r3, 800aa48 <_reclaim_reent+0xb0>
 800aa0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aa10:	4620      	mov	r0, r4
 800aa12:	4798      	blx	r3
 800aa14:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aa16:	b1b9      	cbz	r1, 800aa48 <_reclaim_reent+0xb0>
 800aa18:	4620      	mov	r0, r4
 800aa1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa1e:	f7ff bfad 	b.w	800a97c <cleanup_glue>
 800aa22:	5949      	ldr	r1, [r1, r5]
 800aa24:	b941      	cbnz	r1, 800aa38 <_reclaim_reent+0xa0>
 800aa26:	3504      	adds	r5, #4
 800aa28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa2a:	2d80      	cmp	r5, #128	; 0x80
 800aa2c:	68d9      	ldr	r1, [r3, #12]
 800aa2e:	d1f8      	bne.n	800aa22 <_reclaim_reent+0x8a>
 800aa30:	4620      	mov	r0, r4
 800aa32:	f000 f997 	bl	800ad64 <_free_r>
 800aa36:	e7ba      	b.n	800a9ae <_reclaim_reent+0x16>
 800aa38:	680e      	ldr	r6, [r1, #0]
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	f000 f992 	bl	800ad64 <_free_r>
 800aa40:	4631      	mov	r1, r6
 800aa42:	e7ef      	b.n	800aa24 <_reclaim_reent+0x8c>
 800aa44:	2500      	movs	r5, #0
 800aa46:	e7ef      	b.n	800aa28 <_reclaim_reent+0x90>
 800aa48:	bd70      	pop	{r4, r5, r6, pc}
 800aa4a:	bf00      	nop
 800aa4c:	2000001c 	.word	0x2000001c

0800aa50 <_sbrk_r>:
 800aa50:	b538      	push	{r3, r4, r5, lr}
 800aa52:	4d06      	ldr	r5, [pc, #24]	; (800aa6c <_sbrk_r+0x1c>)
 800aa54:	2300      	movs	r3, #0
 800aa56:	4604      	mov	r4, r0
 800aa58:	4608      	mov	r0, r1
 800aa5a:	602b      	str	r3, [r5, #0]
 800aa5c:	f7f8 fbec 	bl	8003238 <_sbrk>
 800aa60:	1c43      	adds	r3, r0, #1
 800aa62:	d102      	bne.n	800aa6a <_sbrk_r+0x1a>
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	b103      	cbz	r3, 800aa6a <_sbrk_r+0x1a>
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	bd38      	pop	{r3, r4, r5, pc}
 800aa6c:	200050e8 	.word	0x200050e8

0800aa70 <siprintf>:
 800aa70:	b40e      	push	{r1, r2, r3}
 800aa72:	b500      	push	{lr}
 800aa74:	b09c      	sub	sp, #112	; 0x70
 800aa76:	ab1d      	add	r3, sp, #116	; 0x74
 800aa78:	9002      	str	r0, [sp, #8]
 800aa7a:	9006      	str	r0, [sp, #24]
 800aa7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa80:	4809      	ldr	r0, [pc, #36]	; (800aaa8 <siprintf+0x38>)
 800aa82:	9107      	str	r1, [sp, #28]
 800aa84:	9104      	str	r1, [sp, #16]
 800aa86:	4909      	ldr	r1, [pc, #36]	; (800aaac <siprintf+0x3c>)
 800aa88:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa8c:	9105      	str	r1, [sp, #20]
 800aa8e:	6800      	ldr	r0, [r0, #0]
 800aa90:	9301      	str	r3, [sp, #4]
 800aa92:	a902      	add	r1, sp, #8
 800aa94:	f000 fa0e 	bl	800aeb4 <_svfiprintf_r>
 800aa98:	9b02      	ldr	r3, [sp, #8]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	701a      	strb	r2, [r3, #0]
 800aa9e:	b01c      	add	sp, #112	; 0x70
 800aaa0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aaa4:	b003      	add	sp, #12
 800aaa6:	4770      	bx	lr
 800aaa8:	2000001c 	.word	0x2000001c
 800aaac:	ffff0208 	.word	0xffff0208

0800aab0 <__sread>:
 800aab0:	b510      	push	{r4, lr}
 800aab2:	460c      	mov	r4, r1
 800aab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aab8:	f000 fdea 	bl	800b690 <_read_r>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	bfab      	itete	ge
 800aac0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aac2:	89a3      	ldrhlt	r3, [r4, #12]
 800aac4:	181b      	addge	r3, r3, r0
 800aac6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aaca:	bfac      	ite	ge
 800aacc:	6563      	strge	r3, [r4, #84]	; 0x54
 800aace:	81a3      	strhlt	r3, [r4, #12]
 800aad0:	bd10      	pop	{r4, pc}

0800aad2 <__swrite>:
 800aad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aad6:	461f      	mov	r7, r3
 800aad8:	898b      	ldrh	r3, [r1, #12]
 800aada:	05db      	lsls	r3, r3, #23
 800aadc:	4605      	mov	r5, r0
 800aade:	460c      	mov	r4, r1
 800aae0:	4616      	mov	r6, r2
 800aae2:	d505      	bpl.n	800aaf0 <__swrite+0x1e>
 800aae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aae8:	2302      	movs	r3, #2
 800aaea:	2200      	movs	r2, #0
 800aaec:	f000 f91c 	bl	800ad28 <_lseek_r>
 800aaf0:	89a3      	ldrh	r3, [r4, #12]
 800aaf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aaf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aafa:	81a3      	strh	r3, [r4, #12]
 800aafc:	4632      	mov	r2, r6
 800aafe:	463b      	mov	r3, r7
 800ab00:	4628      	mov	r0, r5
 800ab02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab06:	f000 b82b 	b.w	800ab60 <_write_r>

0800ab0a <__sseek>:
 800ab0a:	b510      	push	{r4, lr}
 800ab0c:	460c      	mov	r4, r1
 800ab0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab12:	f000 f909 	bl	800ad28 <_lseek_r>
 800ab16:	1c43      	adds	r3, r0, #1
 800ab18:	89a3      	ldrh	r3, [r4, #12]
 800ab1a:	bf15      	itete	ne
 800ab1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab26:	81a3      	strheq	r3, [r4, #12]
 800ab28:	bf18      	it	ne
 800ab2a:	81a3      	strhne	r3, [r4, #12]
 800ab2c:	bd10      	pop	{r4, pc}

0800ab2e <__sclose>:
 800ab2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab32:	f000 b827 	b.w	800ab84 <_close_r>

0800ab36 <strncmp>:
 800ab36:	b510      	push	{r4, lr}
 800ab38:	b17a      	cbz	r2, 800ab5a <strncmp+0x24>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	3901      	subs	r1, #1
 800ab3e:	1884      	adds	r4, r0, r2
 800ab40:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab44:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ab48:	4290      	cmp	r0, r2
 800ab4a:	d101      	bne.n	800ab50 <strncmp+0x1a>
 800ab4c:	42a3      	cmp	r3, r4
 800ab4e:	d101      	bne.n	800ab54 <strncmp+0x1e>
 800ab50:	1a80      	subs	r0, r0, r2
 800ab52:	bd10      	pop	{r4, pc}
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d1f3      	bne.n	800ab40 <strncmp+0xa>
 800ab58:	e7fa      	b.n	800ab50 <strncmp+0x1a>
 800ab5a:	4610      	mov	r0, r2
 800ab5c:	e7f9      	b.n	800ab52 <strncmp+0x1c>
	...

0800ab60 <_write_r>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	4d07      	ldr	r5, [pc, #28]	; (800ab80 <_write_r+0x20>)
 800ab64:	4604      	mov	r4, r0
 800ab66:	4608      	mov	r0, r1
 800ab68:	4611      	mov	r1, r2
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	602a      	str	r2, [r5, #0]
 800ab6e:	461a      	mov	r2, r3
 800ab70:	f7f8 fb11 	bl	8003196 <_write>
 800ab74:	1c43      	adds	r3, r0, #1
 800ab76:	d102      	bne.n	800ab7e <_write_r+0x1e>
 800ab78:	682b      	ldr	r3, [r5, #0]
 800ab7a:	b103      	cbz	r3, 800ab7e <_write_r+0x1e>
 800ab7c:	6023      	str	r3, [r4, #0]
 800ab7e:	bd38      	pop	{r3, r4, r5, pc}
 800ab80:	200050e8 	.word	0x200050e8

0800ab84 <_close_r>:
 800ab84:	b538      	push	{r3, r4, r5, lr}
 800ab86:	4d06      	ldr	r5, [pc, #24]	; (800aba0 <_close_r+0x1c>)
 800ab88:	2300      	movs	r3, #0
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	4608      	mov	r0, r1
 800ab8e:	602b      	str	r3, [r5, #0]
 800ab90:	f7f8 fb1d 	bl	80031ce <_close>
 800ab94:	1c43      	adds	r3, r0, #1
 800ab96:	d102      	bne.n	800ab9e <_close_r+0x1a>
 800ab98:	682b      	ldr	r3, [r5, #0]
 800ab9a:	b103      	cbz	r3, 800ab9e <_close_r+0x1a>
 800ab9c:	6023      	str	r3, [r4, #0]
 800ab9e:	bd38      	pop	{r3, r4, r5, pc}
 800aba0:	200050e8 	.word	0x200050e8

0800aba4 <__sflush_r>:
 800aba4:	898a      	ldrh	r2, [r1, #12]
 800aba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abaa:	4605      	mov	r5, r0
 800abac:	0710      	lsls	r0, r2, #28
 800abae:	460c      	mov	r4, r1
 800abb0:	d458      	bmi.n	800ac64 <__sflush_r+0xc0>
 800abb2:	684b      	ldr	r3, [r1, #4]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	dc05      	bgt.n	800abc4 <__sflush_r+0x20>
 800abb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abba:	2b00      	cmp	r3, #0
 800abbc:	dc02      	bgt.n	800abc4 <__sflush_r+0x20>
 800abbe:	2000      	movs	r0, #0
 800abc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abc6:	2e00      	cmp	r6, #0
 800abc8:	d0f9      	beq.n	800abbe <__sflush_r+0x1a>
 800abca:	2300      	movs	r3, #0
 800abcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abd0:	682f      	ldr	r7, [r5, #0]
 800abd2:	602b      	str	r3, [r5, #0]
 800abd4:	d032      	beq.n	800ac3c <__sflush_r+0x98>
 800abd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abd8:	89a3      	ldrh	r3, [r4, #12]
 800abda:	075a      	lsls	r2, r3, #29
 800abdc:	d505      	bpl.n	800abea <__sflush_r+0x46>
 800abde:	6863      	ldr	r3, [r4, #4]
 800abe0:	1ac0      	subs	r0, r0, r3
 800abe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abe4:	b10b      	cbz	r3, 800abea <__sflush_r+0x46>
 800abe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abe8:	1ac0      	subs	r0, r0, r3
 800abea:	2300      	movs	r3, #0
 800abec:	4602      	mov	r2, r0
 800abee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abf0:	6a21      	ldr	r1, [r4, #32]
 800abf2:	4628      	mov	r0, r5
 800abf4:	47b0      	blx	r6
 800abf6:	1c43      	adds	r3, r0, #1
 800abf8:	89a3      	ldrh	r3, [r4, #12]
 800abfa:	d106      	bne.n	800ac0a <__sflush_r+0x66>
 800abfc:	6829      	ldr	r1, [r5, #0]
 800abfe:	291d      	cmp	r1, #29
 800ac00:	d82c      	bhi.n	800ac5c <__sflush_r+0xb8>
 800ac02:	4a2a      	ldr	r2, [pc, #168]	; (800acac <__sflush_r+0x108>)
 800ac04:	40ca      	lsrs	r2, r1
 800ac06:	07d6      	lsls	r6, r2, #31
 800ac08:	d528      	bpl.n	800ac5c <__sflush_r+0xb8>
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	6062      	str	r2, [r4, #4]
 800ac0e:	04d9      	lsls	r1, r3, #19
 800ac10:	6922      	ldr	r2, [r4, #16]
 800ac12:	6022      	str	r2, [r4, #0]
 800ac14:	d504      	bpl.n	800ac20 <__sflush_r+0x7c>
 800ac16:	1c42      	adds	r2, r0, #1
 800ac18:	d101      	bne.n	800ac1e <__sflush_r+0x7a>
 800ac1a:	682b      	ldr	r3, [r5, #0]
 800ac1c:	b903      	cbnz	r3, 800ac20 <__sflush_r+0x7c>
 800ac1e:	6560      	str	r0, [r4, #84]	; 0x54
 800ac20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac22:	602f      	str	r7, [r5, #0]
 800ac24:	2900      	cmp	r1, #0
 800ac26:	d0ca      	beq.n	800abbe <__sflush_r+0x1a>
 800ac28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac2c:	4299      	cmp	r1, r3
 800ac2e:	d002      	beq.n	800ac36 <__sflush_r+0x92>
 800ac30:	4628      	mov	r0, r5
 800ac32:	f000 f897 	bl	800ad64 <_free_r>
 800ac36:	2000      	movs	r0, #0
 800ac38:	6360      	str	r0, [r4, #52]	; 0x34
 800ac3a:	e7c1      	b.n	800abc0 <__sflush_r+0x1c>
 800ac3c:	6a21      	ldr	r1, [r4, #32]
 800ac3e:	2301      	movs	r3, #1
 800ac40:	4628      	mov	r0, r5
 800ac42:	47b0      	blx	r6
 800ac44:	1c41      	adds	r1, r0, #1
 800ac46:	d1c7      	bne.n	800abd8 <__sflush_r+0x34>
 800ac48:	682b      	ldr	r3, [r5, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d0c4      	beq.n	800abd8 <__sflush_r+0x34>
 800ac4e:	2b1d      	cmp	r3, #29
 800ac50:	d001      	beq.n	800ac56 <__sflush_r+0xb2>
 800ac52:	2b16      	cmp	r3, #22
 800ac54:	d101      	bne.n	800ac5a <__sflush_r+0xb6>
 800ac56:	602f      	str	r7, [r5, #0]
 800ac58:	e7b1      	b.n	800abbe <__sflush_r+0x1a>
 800ac5a:	89a3      	ldrh	r3, [r4, #12]
 800ac5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac60:	81a3      	strh	r3, [r4, #12]
 800ac62:	e7ad      	b.n	800abc0 <__sflush_r+0x1c>
 800ac64:	690f      	ldr	r7, [r1, #16]
 800ac66:	2f00      	cmp	r7, #0
 800ac68:	d0a9      	beq.n	800abbe <__sflush_r+0x1a>
 800ac6a:	0793      	lsls	r3, r2, #30
 800ac6c:	680e      	ldr	r6, [r1, #0]
 800ac6e:	bf08      	it	eq
 800ac70:	694b      	ldreq	r3, [r1, #20]
 800ac72:	600f      	str	r7, [r1, #0]
 800ac74:	bf18      	it	ne
 800ac76:	2300      	movne	r3, #0
 800ac78:	eba6 0807 	sub.w	r8, r6, r7
 800ac7c:	608b      	str	r3, [r1, #8]
 800ac7e:	f1b8 0f00 	cmp.w	r8, #0
 800ac82:	dd9c      	ble.n	800abbe <__sflush_r+0x1a>
 800ac84:	6a21      	ldr	r1, [r4, #32]
 800ac86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac88:	4643      	mov	r3, r8
 800ac8a:	463a      	mov	r2, r7
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	47b0      	blx	r6
 800ac90:	2800      	cmp	r0, #0
 800ac92:	dc06      	bgt.n	800aca2 <__sflush_r+0xfe>
 800ac94:	89a3      	ldrh	r3, [r4, #12]
 800ac96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac9a:	81a3      	strh	r3, [r4, #12]
 800ac9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aca0:	e78e      	b.n	800abc0 <__sflush_r+0x1c>
 800aca2:	4407      	add	r7, r0
 800aca4:	eba8 0800 	sub.w	r8, r8, r0
 800aca8:	e7e9      	b.n	800ac7e <__sflush_r+0xda>
 800acaa:	bf00      	nop
 800acac:	20400001 	.word	0x20400001

0800acb0 <_fflush_r>:
 800acb0:	b538      	push	{r3, r4, r5, lr}
 800acb2:	690b      	ldr	r3, [r1, #16]
 800acb4:	4605      	mov	r5, r0
 800acb6:	460c      	mov	r4, r1
 800acb8:	b913      	cbnz	r3, 800acc0 <_fflush_r+0x10>
 800acba:	2500      	movs	r5, #0
 800acbc:	4628      	mov	r0, r5
 800acbe:	bd38      	pop	{r3, r4, r5, pc}
 800acc0:	b118      	cbz	r0, 800acca <_fflush_r+0x1a>
 800acc2:	6983      	ldr	r3, [r0, #24]
 800acc4:	b90b      	cbnz	r3, 800acca <_fflush_r+0x1a>
 800acc6:	f7ff fcd1 	bl	800a66c <__sinit>
 800acca:	4b14      	ldr	r3, [pc, #80]	; (800ad1c <_fflush_r+0x6c>)
 800accc:	429c      	cmp	r4, r3
 800acce:	d11b      	bne.n	800ad08 <_fflush_r+0x58>
 800acd0:	686c      	ldr	r4, [r5, #4]
 800acd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d0ef      	beq.n	800acba <_fflush_r+0xa>
 800acda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acdc:	07d0      	lsls	r0, r2, #31
 800acde:	d404      	bmi.n	800acea <_fflush_r+0x3a>
 800ace0:	0599      	lsls	r1, r3, #22
 800ace2:	d402      	bmi.n	800acea <_fflush_r+0x3a>
 800ace4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ace6:	f7ff fd84 	bl	800a7f2 <__retarget_lock_acquire_recursive>
 800acea:	4628      	mov	r0, r5
 800acec:	4621      	mov	r1, r4
 800acee:	f7ff ff59 	bl	800aba4 <__sflush_r>
 800acf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acf4:	07da      	lsls	r2, r3, #31
 800acf6:	4605      	mov	r5, r0
 800acf8:	d4e0      	bmi.n	800acbc <_fflush_r+0xc>
 800acfa:	89a3      	ldrh	r3, [r4, #12]
 800acfc:	059b      	lsls	r3, r3, #22
 800acfe:	d4dd      	bmi.n	800acbc <_fflush_r+0xc>
 800ad00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad02:	f7ff fd77 	bl	800a7f4 <__retarget_lock_release_recursive>
 800ad06:	e7d9      	b.n	800acbc <_fflush_r+0xc>
 800ad08:	4b05      	ldr	r3, [pc, #20]	; (800ad20 <_fflush_r+0x70>)
 800ad0a:	429c      	cmp	r4, r3
 800ad0c:	d101      	bne.n	800ad12 <_fflush_r+0x62>
 800ad0e:	68ac      	ldr	r4, [r5, #8]
 800ad10:	e7df      	b.n	800acd2 <_fflush_r+0x22>
 800ad12:	4b04      	ldr	r3, [pc, #16]	; (800ad24 <_fflush_r+0x74>)
 800ad14:	429c      	cmp	r4, r3
 800ad16:	bf08      	it	eq
 800ad18:	68ec      	ldreq	r4, [r5, #12]
 800ad1a:	e7da      	b.n	800acd2 <_fflush_r+0x22>
 800ad1c:	0800c6e0 	.word	0x0800c6e0
 800ad20:	0800c700 	.word	0x0800c700
 800ad24:	0800c6c0 	.word	0x0800c6c0

0800ad28 <_lseek_r>:
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	4d07      	ldr	r5, [pc, #28]	; (800ad48 <_lseek_r+0x20>)
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	4608      	mov	r0, r1
 800ad30:	4611      	mov	r1, r2
 800ad32:	2200      	movs	r2, #0
 800ad34:	602a      	str	r2, [r5, #0]
 800ad36:	461a      	mov	r2, r3
 800ad38:	f7f8 fa70 	bl	800321c <_lseek>
 800ad3c:	1c43      	adds	r3, r0, #1
 800ad3e:	d102      	bne.n	800ad46 <_lseek_r+0x1e>
 800ad40:	682b      	ldr	r3, [r5, #0]
 800ad42:	b103      	cbz	r3, 800ad46 <_lseek_r+0x1e>
 800ad44:	6023      	str	r3, [r4, #0]
 800ad46:	bd38      	pop	{r3, r4, r5, pc}
 800ad48:	200050e8 	.word	0x200050e8

0800ad4c <__malloc_lock>:
 800ad4c:	4801      	ldr	r0, [pc, #4]	; (800ad54 <__malloc_lock+0x8>)
 800ad4e:	f7ff bd50 	b.w	800a7f2 <__retarget_lock_acquire_recursive>
 800ad52:	bf00      	nop
 800ad54:	200050dc 	.word	0x200050dc

0800ad58 <__malloc_unlock>:
 800ad58:	4801      	ldr	r0, [pc, #4]	; (800ad60 <__malloc_unlock+0x8>)
 800ad5a:	f7ff bd4b 	b.w	800a7f4 <__retarget_lock_release_recursive>
 800ad5e:	bf00      	nop
 800ad60:	200050dc 	.word	0x200050dc

0800ad64 <_free_r>:
 800ad64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad66:	2900      	cmp	r1, #0
 800ad68:	d044      	beq.n	800adf4 <_free_r+0x90>
 800ad6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad6e:	9001      	str	r0, [sp, #4]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f1a1 0404 	sub.w	r4, r1, #4
 800ad76:	bfb8      	it	lt
 800ad78:	18e4      	addlt	r4, r4, r3
 800ad7a:	f7ff ffe7 	bl	800ad4c <__malloc_lock>
 800ad7e:	4a1e      	ldr	r2, [pc, #120]	; (800adf8 <_free_r+0x94>)
 800ad80:	9801      	ldr	r0, [sp, #4]
 800ad82:	6813      	ldr	r3, [r2, #0]
 800ad84:	b933      	cbnz	r3, 800ad94 <_free_r+0x30>
 800ad86:	6063      	str	r3, [r4, #4]
 800ad88:	6014      	str	r4, [r2, #0]
 800ad8a:	b003      	add	sp, #12
 800ad8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad90:	f7ff bfe2 	b.w	800ad58 <__malloc_unlock>
 800ad94:	42a3      	cmp	r3, r4
 800ad96:	d908      	bls.n	800adaa <_free_r+0x46>
 800ad98:	6825      	ldr	r5, [r4, #0]
 800ad9a:	1961      	adds	r1, r4, r5
 800ad9c:	428b      	cmp	r3, r1
 800ad9e:	bf01      	itttt	eq
 800ada0:	6819      	ldreq	r1, [r3, #0]
 800ada2:	685b      	ldreq	r3, [r3, #4]
 800ada4:	1949      	addeq	r1, r1, r5
 800ada6:	6021      	streq	r1, [r4, #0]
 800ada8:	e7ed      	b.n	800ad86 <_free_r+0x22>
 800adaa:	461a      	mov	r2, r3
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	b10b      	cbz	r3, 800adb4 <_free_r+0x50>
 800adb0:	42a3      	cmp	r3, r4
 800adb2:	d9fa      	bls.n	800adaa <_free_r+0x46>
 800adb4:	6811      	ldr	r1, [r2, #0]
 800adb6:	1855      	adds	r5, r2, r1
 800adb8:	42a5      	cmp	r5, r4
 800adba:	d10b      	bne.n	800add4 <_free_r+0x70>
 800adbc:	6824      	ldr	r4, [r4, #0]
 800adbe:	4421      	add	r1, r4
 800adc0:	1854      	adds	r4, r2, r1
 800adc2:	42a3      	cmp	r3, r4
 800adc4:	6011      	str	r1, [r2, #0]
 800adc6:	d1e0      	bne.n	800ad8a <_free_r+0x26>
 800adc8:	681c      	ldr	r4, [r3, #0]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	6053      	str	r3, [r2, #4]
 800adce:	4421      	add	r1, r4
 800add0:	6011      	str	r1, [r2, #0]
 800add2:	e7da      	b.n	800ad8a <_free_r+0x26>
 800add4:	d902      	bls.n	800addc <_free_r+0x78>
 800add6:	230c      	movs	r3, #12
 800add8:	6003      	str	r3, [r0, #0]
 800adda:	e7d6      	b.n	800ad8a <_free_r+0x26>
 800addc:	6825      	ldr	r5, [r4, #0]
 800adde:	1961      	adds	r1, r4, r5
 800ade0:	428b      	cmp	r3, r1
 800ade2:	bf04      	itt	eq
 800ade4:	6819      	ldreq	r1, [r3, #0]
 800ade6:	685b      	ldreq	r3, [r3, #4]
 800ade8:	6063      	str	r3, [r4, #4]
 800adea:	bf04      	itt	eq
 800adec:	1949      	addeq	r1, r1, r5
 800adee:	6021      	streq	r1, [r4, #0]
 800adf0:	6054      	str	r4, [r2, #4]
 800adf2:	e7ca      	b.n	800ad8a <_free_r+0x26>
 800adf4:	b003      	add	sp, #12
 800adf6:	bd30      	pop	{r4, r5, pc}
 800adf8:	200050e0 	.word	0x200050e0

0800adfc <__ssputs_r>:
 800adfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae00:	688e      	ldr	r6, [r1, #8]
 800ae02:	429e      	cmp	r6, r3
 800ae04:	4682      	mov	sl, r0
 800ae06:	460c      	mov	r4, r1
 800ae08:	4690      	mov	r8, r2
 800ae0a:	461f      	mov	r7, r3
 800ae0c:	d838      	bhi.n	800ae80 <__ssputs_r+0x84>
 800ae0e:	898a      	ldrh	r2, [r1, #12]
 800ae10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae14:	d032      	beq.n	800ae7c <__ssputs_r+0x80>
 800ae16:	6825      	ldr	r5, [r4, #0]
 800ae18:	6909      	ldr	r1, [r1, #16]
 800ae1a:	eba5 0901 	sub.w	r9, r5, r1
 800ae1e:	6965      	ldr	r5, [r4, #20]
 800ae20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae28:	3301      	adds	r3, #1
 800ae2a:	444b      	add	r3, r9
 800ae2c:	106d      	asrs	r5, r5, #1
 800ae2e:	429d      	cmp	r5, r3
 800ae30:	bf38      	it	cc
 800ae32:	461d      	movcc	r5, r3
 800ae34:	0553      	lsls	r3, r2, #21
 800ae36:	d531      	bpl.n	800ae9c <__ssputs_r+0xa0>
 800ae38:	4629      	mov	r1, r5
 800ae3a:	f7ff fd13 	bl	800a864 <_malloc_r>
 800ae3e:	4606      	mov	r6, r0
 800ae40:	b950      	cbnz	r0, 800ae58 <__ssputs_r+0x5c>
 800ae42:	230c      	movs	r3, #12
 800ae44:	f8ca 3000 	str.w	r3, [sl]
 800ae48:	89a3      	ldrh	r3, [r4, #12]
 800ae4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae4e:	81a3      	strh	r3, [r4, #12]
 800ae50:	f04f 30ff 	mov.w	r0, #4294967295
 800ae54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae58:	6921      	ldr	r1, [r4, #16]
 800ae5a:	464a      	mov	r2, r9
 800ae5c:	f7ff fccb 	bl	800a7f6 <memcpy>
 800ae60:	89a3      	ldrh	r3, [r4, #12]
 800ae62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae6a:	81a3      	strh	r3, [r4, #12]
 800ae6c:	6126      	str	r6, [r4, #16]
 800ae6e:	6165      	str	r5, [r4, #20]
 800ae70:	444e      	add	r6, r9
 800ae72:	eba5 0509 	sub.w	r5, r5, r9
 800ae76:	6026      	str	r6, [r4, #0]
 800ae78:	60a5      	str	r5, [r4, #8]
 800ae7a:	463e      	mov	r6, r7
 800ae7c:	42be      	cmp	r6, r7
 800ae7e:	d900      	bls.n	800ae82 <__ssputs_r+0x86>
 800ae80:	463e      	mov	r6, r7
 800ae82:	6820      	ldr	r0, [r4, #0]
 800ae84:	4632      	mov	r2, r6
 800ae86:	4641      	mov	r1, r8
 800ae88:	f000 fd3a 	bl	800b900 <memmove>
 800ae8c:	68a3      	ldr	r3, [r4, #8]
 800ae8e:	1b9b      	subs	r3, r3, r6
 800ae90:	60a3      	str	r3, [r4, #8]
 800ae92:	6823      	ldr	r3, [r4, #0]
 800ae94:	4433      	add	r3, r6
 800ae96:	6023      	str	r3, [r4, #0]
 800ae98:	2000      	movs	r0, #0
 800ae9a:	e7db      	b.n	800ae54 <__ssputs_r+0x58>
 800ae9c:	462a      	mov	r2, r5
 800ae9e:	f000 fd49 	bl	800b934 <_realloc_r>
 800aea2:	4606      	mov	r6, r0
 800aea4:	2800      	cmp	r0, #0
 800aea6:	d1e1      	bne.n	800ae6c <__ssputs_r+0x70>
 800aea8:	6921      	ldr	r1, [r4, #16]
 800aeaa:	4650      	mov	r0, sl
 800aeac:	f7ff ff5a 	bl	800ad64 <_free_r>
 800aeb0:	e7c7      	b.n	800ae42 <__ssputs_r+0x46>
	...

0800aeb4 <_svfiprintf_r>:
 800aeb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb8:	4698      	mov	r8, r3
 800aeba:	898b      	ldrh	r3, [r1, #12]
 800aebc:	061b      	lsls	r3, r3, #24
 800aebe:	b09d      	sub	sp, #116	; 0x74
 800aec0:	4607      	mov	r7, r0
 800aec2:	460d      	mov	r5, r1
 800aec4:	4614      	mov	r4, r2
 800aec6:	d50e      	bpl.n	800aee6 <_svfiprintf_r+0x32>
 800aec8:	690b      	ldr	r3, [r1, #16]
 800aeca:	b963      	cbnz	r3, 800aee6 <_svfiprintf_r+0x32>
 800aecc:	2140      	movs	r1, #64	; 0x40
 800aece:	f7ff fcc9 	bl	800a864 <_malloc_r>
 800aed2:	6028      	str	r0, [r5, #0]
 800aed4:	6128      	str	r0, [r5, #16]
 800aed6:	b920      	cbnz	r0, 800aee2 <_svfiprintf_r+0x2e>
 800aed8:	230c      	movs	r3, #12
 800aeda:	603b      	str	r3, [r7, #0]
 800aedc:	f04f 30ff 	mov.w	r0, #4294967295
 800aee0:	e0d1      	b.n	800b086 <_svfiprintf_r+0x1d2>
 800aee2:	2340      	movs	r3, #64	; 0x40
 800aee4:	616b      	str	r3, [r5, #20]
 800aee6:	2300      	movs	r3, #0
 800aee8:	9309      	str	r3, [sp, #36]	; 0x24
 800aeea:	2320      	movs	r3, #32
 800aeec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aef0:	f8cd 800c 	str.w	r8, [sp, #12]
 800aef4:	2330      	movs	r3, #48	; 0x30
 800aef6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b0a0 <_svfiprintf_r+0x1ec>
 800aefa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aefe:	f04f 0901 	mov.w	r9, #1
 800af02:	4623      	mov	r3, r4
 800af04:	469a      	mov	sl, r3
 800af06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af0a:	b10a      	cbz	r2, 800af10 <_svfiprintf_r+0x5c>
 800af0c:	2a25      	cmp	r2, #37	; 0x25
 800af0e:	d1f9      	bne.n	800af04 <_svfiprintf_r+0x50>
 800af10:	ebba 0b04 	subs.w	fp, sl, r4
 800af14:	d00b      	beq.n	800af2e <_svfiprintf_r+0x7a>
 800af16:	465b      	mov	r3, fp
 800af18:	4622      	mov	r2, r4
 800af1a:	4629      	mov	r1, r5
 800af1c:	4638      	mov	r0, r7
 800af1e:	f7ff ff6d 	bl	800adfc <__ssputs_r>
 800af22:	3001      	adds	r0, #1
 800af24:	f000 80aa 	beq.w	800b07c <_svfiprintf_r+0x1c8>
 800af28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af2a:	445a      	add	r2, fp
 800af2c:	9209      	str	r2, [sp, #36]	; 0x24
 800af2e:	f89a 3000 	ldrb.w	r3, [sl]
 800af32:	2b00      	cmp	r3, #0
 800af34:	f000 80a2 	beq.w	800b07c <_svfiprintf_r+0x1c8>
 800af38:	2300      	movs	r3, #0
 800af3a:	f04f 32ff 	mov.w	r2, #4294967295
 800af3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af42:	f10a 0a01 	add.w	sl, sl, #1
 800af46:	9304      	str	r3, [sp, #16]
 800af48:	9307      	str	r3, [sp, #28]
 800af4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af4e:	931a      	str	r3, [sp, #104]	; 0x68
 800af50:	4654      	mov	r4, sl
 800af52:	2205      	movs	r2, #5
 800af54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af58:	4851      	ldr	r0, [pc, #324]	; (800b0a0 <_svfiprintf_r+0x1ec>)
 800af5a:	f7f5 f949 	bl	80001f0 <memchr>
 800af5e:	9a04      	ldr	r2, [sp, #16]
 800af60:	b9d8      	cbnz	r0, 800af9a <_svfiprintf_r+0xe6>
 800af62:	06d0      	lsls	r0, r2, #27
 800af64:	bf44      	itt	mi
 800af66:	2320      	movmi	r3, #32
 800af68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af6c:	0711      	lsls	r1, r2, #28
 800af6e:	bf44      	itt	mi
 800af70:	232b      	movmi	r3, #43	; 0x2b
 800af72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af76:	f89a 3000 	ldrb.w	r3, [sl]
 800af7a:	2b2a      	cmp	r3, #42	; 0x2a
 800af7c:	d015      	beq.n	800afaa <_svfiprintf_r+0xf6>
 800af7e:	9a07      	ldr	r2, [sp, #28]
 800af80:	4654      	mov	r4, sl
 800af82:	2000      	movs	r0, #0
 800af84:	f04f 0c0a 	mov.w	ip, #10
 800af88:	4621      	mov	r1, r4
 800af8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af8e:	3b30      	subs	r3, #48	; 0x30
 800af90:	2b09      	cmp	r3, #9
 800af92:	d94e      	bls.n	800b032 <_svfiprintf_r+0x17e>
 800af94:	b1b0      	cbz	r0, 800afc4 <_svfiprintf_r+0x110>
 800af96:	9207      	str	r2, [sp, #28]
 800af98:	e014      	b.n	800afc4 <_svfiprintf_r+0x110>
 800af9a:	eba0 0308 	sub.w	r3, r0, r8
 800af9e:	fa09 f303 	lsl.w	r3, r9, r3
 800afa2:	4313      	orrs	r3, r2
 800afa4:	9304      	str	r3, [sp, #16]
 800afa6:	46a2      	mov	sl, r4
 800afa8:	e7d2      	b.n	800af50 <_svfiprintf_r+0x9c>
 800afaa:	9b03      	ldr	r3, [sp, #12]
 800afac:	1d19      	adds	r1, r3, #4
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	9103      	str	r1, [sp, #12]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	bfbb      	ittet	lt
 800afb6:	425b      	neglt	r3, r3
 800afb8:	f042 0202 	orrlt.w	r2, r2, #2
 800afbc:	9307      	strge	r3, [sp, #28]
 800afbe:	9307      	strlt	r3, [sp, #28]
 800afc0:	bfb8      	it	lt
 800afc2:	9204      	strlt	r2, [sp, #16]
 800afc4:	7823      	ldrb	r3, [r4, #0]
 800afc6:	2b2e      	cmp	r3, #46	; 0x2e
 800afc8:	d10c      	bne.n	800afe4 <_svfiprintf_r+0x130>
 800afca:	7863      	ldrb	r3, [r4, #1]
 800afcc:	2b2a      	cmp	r3, #42	; 0x2a
 800afce:	d135      	bne.n	800b03c <_svfiprintf_r+0x188>
 800afd0:	9b03      	ldr	r3, [sp, #12]
 800afd2:	1d1a      	adds	r2, r3, #4
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	9203      	str	r2, [sp, #12]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	bfb8      	it	lt
 800afdc:	f04f 33ff 	movlt.w	r3, #4294967295
 800afe0:	3402      	adds	r4, #2
 800afe2:	9305      	str	r3, [sp, #20]
 800afe4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b0b0 <_svfiprintf_r+0x1fc>
 800afe8:	7821      	ldrb	r1, [r4, #0]
 800afea:	2203      	movs	r2, #3
 800afec:	4650      	mov	r0, sl
 800afee:	f7f5 f8ff 	bl	80001f0 <memchr>
 800aff2:	b140      	cbz	r0, 800b006 <_svfiprintf_r+0x152>
 800aff4:	2340      	movs	r3, #64	; 0x40
 800aff6:	eba0 000a 	sub.w	r0, r0, sl
 800affa:	fa03 f000 	lsl.w	r0, r3, r0
 800affe:	9b04      	ldr	r3, [sp, #16]
 800b000:	4303      	orrs	r3, r0
 800b002:	3401      	adds	r4, #1
 800b004:	9304      	str	r3, [sp, #16]
 800b006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b00a:	4826      	ldr	r0, [pc, #152]	; (800b0a4 <_svfiprintf_r+0x1f0>)
 800b00c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b010:	2206      	movs	r2, #6
 800b012:	f7f5 f8ed 	bl	80001f0 <memchr>
 800b016:	2800      	cmp	r0, #0
 800b018:	d038      	beq.n	800b08c <_svfiprintf_r+0x1d8>
 800b01a:	4b23      	ldr	r3, [pc, #140]	; (800b0a8 <_svfiprintf_r+0x1f4>)
 800b01c:	bb1b      	cbnz	r3, 800b066 <_svfiprintf_r+0x1b2>
 800b01e:	9b03      	ldr	r3, [sp, #12]
 800b020:	3307      	adds	r3, #7
 800b022:	f023 0307 	bic.w	r3, r3, #7
 800b026:	3308      	adds	r3, #8
 800b028:	9303      	str	r3, [sp, #12]
 800b02a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b02c:	4433      	add	r3, r6
 800b02e:	9309      	str	r3, [sp, #36]	; 0x24
 800b030:	e767      	b.n	800af02 <_svfiprintf_r+0x4e>
 800b032:	fb0c 3202 	mla	r2, ip, r2, r3
 800b036:	460c      	mov	r4, r1
 800b038:	2001      	movs	r0, #1
 800b03a:	e7a5      	b.n	800af88 <_svfiprintf_r+0xd4>
 800b03c:	2300      	movs	r3, #0
 800b03e:	3401      	adds	r4, #1
 800b040:	9305      	str	r3, [sp, #20]
 800b042:	4619      	mov	r1, r3
 800b044:	f04f 0c0a 	mov.w	ip, #10
 800b048:	4620      	mov	r0, r4
 800b04a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b04e:	3a30      	subs	r2, #48	; 0x30
 800b050:	2a09      	cmp	r2, #9
 800b052:	d903      	bls.n	800b05c <_svfiprintf_r+0x1a8>
 800b054:	2b00      	cmp	r3, #0
 800b056:	d0c5      	beq.n	800afe4 <_svfiprintf_r+0x130>
 800b058:	9105      	str	r1, [sp, #20]
 800b05a:	e7c3      	b.n	800afe4 <_svfiprintf_r+0x130>
 800b05c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b060:	4604      	mov	r4, r0
 800b062:	2301      	movs	r3, #1
 800b064:	e7f0      	b.n	800b048 <_svfiprintf_r+0x194>
 800b066:	ab03      	add	r3, sp, #12
 800b068:	9300      	str	r3, [sp, #0]
 800b06a:	462a      	mov	r2, r5
 800b06c:	4b0f      	ldr	r3, [pc, #60]	; (800b0ac <_svfiprintf_r+0x1f8>)
 800b06e:	a904      	add	r1, sp, #16
 800b070:	4638      	mov	r0, r7
 800b072:	f3af 8000 	nop.w
 800b076:	1c42      	adds	r2, r0, #1
 800b078:	4606      	mov	r6, r0
 800b07a:	d1d6      	bne.n	800b02a <_svfiprintf_r+0x176>
 800b07c:	89ab      	ldrh	r3, [r5, #12]
 800b07e:	065b      	lsls	r3, r3, #25
 800b080:	f53f af2c 	bmi.w	800aedc <_svfiprintf_r+0x28>
 800b084:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b086:	b01d      	add	sp, #116	; 0x74
 800b088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b08c:	ab03      	add	r3, sp, #12
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	462a      	mov	r2, r5
 800b092:	4b06      	ldr	r3, [pc, #24]	; (800b0ac <_svfiprintf_r+0x1f8>)
 800b094:	a904      	add	r1, sp, #16
 800b096:	4638      	mov	r0, r7
 800b098:	f000 f9d4 	bl	800b444 <_printf_i>
 800b09c:	e7eb      	b.n	800b076 <_svfiprintf_r+0x1c2>
 800b09e:	bf00      	nop
 800b0a0:	0800c724 	.word	0x0800c724
 800b0a4:	0800c72e 	.word	0x0800c72e
 800b0a8:	00000000 	.word	0x00000000
 800b0ac:	0800adfd 	.word	0x0800adfd
 800b0b0:	0800c72a 	.word	0x0800c72a

0800b0b4 <__sfputc_r>:
 800b0b4:	6893      	ldr	r3, [r2, #8]
 800b0b6:	3b01      	subs	r3, #1
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	b410      	push	{r4}
 800b0bc:	6093      	str	r3, [r2, #8]
 800b0be:	da08      	bge.n	800b0d2 <__sfputc_r+0x1e>
 800b0c0:	6994      	ldr	r4, [r2, #24]
 800b0c2:	42a3      	cmp	r3, r4
 800b0c4:	db01      	blt.n	800b0ca <__sfputc_r+0x16>
 800b0c6:	290a      	cmp	r1, #10
 800b0c8:	d103      	bne.n	800b0d2 <__sfputc_r+0x1e>
 800b0ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0ce:	f000 baf1 	b.w	800b6b4 <__swbuf_r>
 800b0d2:	6813      	ldr	r3, [r2, #0]
 800b0d4:	1c58      	adds	r0, r3, #1
 800b0d6:	6010      	str	r0, [r2, #0]
 800b0d8:	7019      	strb	r1, [r3, #0]
 800b0da:	4608      	mov	r0, r1
 800b0dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0e0:	4770      	bx	lr

0800b0e2 <__sfputs_r>:
 800b0e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e4:	4606      	mov	r6, r0
 800b0e6:	460f      	mov	r7, r1
 800b0e8:	4614      	mov	r4, r2
 800b0ea:	18d5      	adds	r5, r2, r3
 800b0ec:	42ac      	cmp	r4, r5
 800b0ee:	d101      	bne.n	800b0f4 <__sfputs_r+0x12>
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	e007      	b.n	800b104 <__sfputs_r+0x22>
 800b0f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0f8:	463a      	mov	r2, r7
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f7ff ffda 	bl	800b0b4 <__sfputc_r>
 800b100:	1c43      	adds	r3, r0, #1
 800b102:	d1f3      	bne.n	800b0ec <__sfputs_r+0xa>
 800b104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b108 <_vfiprintf_r>:
 800b108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b10c:	460d      	mov	r5, r1
 800b10e:	b09d      	sub	sp, #116	; 0x74
 800b110:	4614      	mov	r4, r2
 800b112:	4698      	mov	r8, r3
 800b114:	4606      	mov	r6, r0
 800b116:	b118      	cbz	r0, 800b120 <_vfiprintf_r+0x18>
 800b118:	6983      	ldr	r3, [r0, #24]
 800b11a:	b90b      	cbnz	r3, 800b120 <_vfiprintf_r+0x18>
 800b11c:	f7ff faa6 	bl	800a66c <__sinit>
 800b120:	4b89      	ldr	r3, [pc, #548]	; (800b348 <_vfiprintf_r+0x240>)
 800b122:	429d      	cmp	r5, r3
 800b124:	d11b      	bne.n	800b15e <_vfiprintf_r+0x56>
 800b126:	6875      	ldr	r5, [r6, #4]
 800b128:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b12a:	07d9      	lsls	r1, r3, #31
 800b12c:	d405      	bmi.n	800b13a <_vfiprintf_r+0x32>
 800b12e:	89ab      	ldrh	r3, [r5, #12]
 800b130:	059a      	lsls	r2, r3, #22
 800b132:	d402      	bmi.n	800b13a <_vfiprintf_r+0x32>
 800b134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b136:	f7ff fb5c 	bl	800a7f2 <__retarget_lock_acquire_recursive>
 800b13a:	89ab      	ldrh	r3, [r5, #12]
 800b13c:	071b      	lsls	r3, r3, #28
 800b13e:	d501      	bpl.n	800b144 <_vfiprintf_r+0x3c>
 800b140:	692b      	ldr	r3, [r5, #16]
 800b142:	b9eb      	cbnz	r3, 800b180 <_vfiprintf_r+0x78>
 800b144:	4629      	mov	r1, r5
 800b146:	4630      	mov	r0, r6
 800b148:	f000 fb06 	bl	800b758 <__swsetup_r>
 800b14c:	b1c0      	cbz	r0, 800b180 <_vfiprintf_r+0x78>
 800b14e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b150:	07dc      	lsls	r4, r3, #31
 800b152:	d50e      	bpl.n	800b172 <_vfiprintf_r+0x6a>
 800b154:	f04f 30ff 	mov.w	r0, #4294967295
 800b158:	b01d      	add	sp, #116	; 0x74
 800b15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b15e:	4b7b      	ldr	r3, [pc, #492]	; (800b34c <_vfiprintf_r+0x244>)
 800b160:	429d      	cmp	r5, r3
 800b162:	d101      	bne.n	800b168 <_vfiprintf_r+0x60>
 800b164:	68b5      	ldr	r5, [r6, #8]
 800b166:	e7df      	b.n	800b128 <_vfiprintf_r+0x20>
 800b168:	4b79      	ldr	r3, [pc, #484]	; (800b350 <_vfiprintf_r+0x248>)
 800b16a:	429d      	cmp	r5, r3
 800b16c:	bf08      	it	eq
 800b16e:	68f5      	ldreq	r5, [r6, #12]
 800b170:	e7da      	b.n	800b128 <_vfiprintf_r+0x20>
 800b172:	89ab      	ldrh	r3, [r5, #12]
 800b174:	0598      	lsls	r0, r3, #22
 800b176:	d4ed      	bmi.n	800b154 <_vfiprintf_r+0x4c>
 800b178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b17a:	f7ff fb3b 	bl	800a7f4 <__retarget_lock_release_recursive>
 800b17e:	e7e9      	b.n	800b154 <_vfiprintf_r+0x4c>
 800b180:	2300      	movs	r3, #0
 800b182:	9309      	str	r3, [sp, #36]	; 0x24
 800b184:	2320      	movs	r3, #32
 800b186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b18a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b18e:	2330      	movs	r3, #48	; 0x30
 800b190:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b354 <_vfiprintf_r+0x24c>
 800b194:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b198:	f04f 0901 	mov.w	r9, #1
 800b19c:	4623      	mov	r3, r4
 800b19e:	469a      	mov	sl, r3
 800b1a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1a4:	b10a      	cbz	r2, 800b1aa <_vfiprintf_r+0xa2>
 800b1a6:	2a25      	cmp	r2, #37	; 0x25
 800b1a8:	d1f9      	bne.n	800b19e <_vfiprintf_r+0x96>
 800b1aa:	ebba 0b04 	subs.w	fp, sl, r4
 800b1ae:	d00b      	beq.n	800b1c8 <_vfiprintf_r+0xc0>
 800b1b0:	465b      	mov	r3, fp
 800b1b2:	4622      	mov	r2, r4
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	f7ff ff93 	bl	800b0e2 <__sfputs_r>
 800b1bc:	3001      	adds	r0, #1
 800b1be:	f000 80aa 	beq.w	800b316 <_vfiprintf_r+0x20e>
 800b1c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1c4:	445a      	add	r2, fp
 800b1c6:	9209      	str	r2, [sp, #36]	; 0x24
 800b1c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f000 80a2 	beq.w	800b316 <_vfiprintf_r+0x20e>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1dc:	f10a 0a01 	add.w	sl, sl, #1
 800b1e0:	9304      	str	r3, [sp, #16]
 800b1e2:	9307      	str	r3, [sp, #28]
 800b1e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1e8:	931a      	str	r3, [sp, #104]	; 0x68
 800b1ea:	4654      	mov	r4, sl
 800b1ec:	2205      	movs	r2, #5
 800b1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1f2:	4858      	ldr	r0, [pc, #352]	; (800b354 <_vfiprintf_r+0x24c>)
 800b1f4:	f7f4 fffc 	bl	80001f0 <memchr>
 800b1f8:	9a04      	ldr	r2, [sp, #16]
 800b1fa:	b9d8      	cbnz	r0, 800b234 <_vfiprintf_r+0x12c>
 800b1fc:	06d1      	lsls	r1, r2, #27
 800b1fe:	bf44      	itt	mi
 800b200:	2320      	movmi	r3, #32
 800b202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b206:	0713      	lsls	r3, r2, #28
 800b208:	bf44      	itt	mi
 800b20a:	232b      	movmi	r3, #43	; 0x2b
 800b20c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b210:	f89a 3000 	ldrb.w	r3, [sl]
 800b214:	2b2a      	cmp	r3, #42	; 0x2a
 800b216:	d015      	beq.n	800b244 <_vfiprintf_r+0x13c>
 800b218:	9a07      	ldr	r2, [sp, #28]
 800b21a:	4654      	mov	r4, sl
 800b21c:	2000      	movs	r0, #0
 800b21e:	f04f 0c0a 	mov.w	ip, #10
 800b222:	4621      	mov	r1, r4
 800b224:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b228:	3b30      	subs	r3, #48	; 0x30
 800b22a:	2b09      	cmp	r3, #9
 800b22c:	d94e      	bls.n	800b2cc <_vfiprintf_r+0x1c4>
 800b22e:	b1b0      	cbz	r0, 800b25e <_vfiprintf_r+0x156>
 800b230:	9207      	str	r2, [sp, #28]
 800b232:	e014      	b.n	800b25e <_vfiprintf_r+0x156>
 800b234:	eba0 0308 	sub.w	r3, r0, r8
 800b238:	fa09 f303 	lsl.w	r3, r9, r3
 800b23c:	4313      	orrs	r3, r2
 800b23e:	9304      	str	r3, [sp, #16]
 800b240:	46a2      	mov	sl, r4
 800b242:	e7d2      	b.n	800b1ea <_vfiprintf_r+0xe2>
 800b244:	9b03      	ldr	r3, [sp, #12]
 800b246:	1d19      	adds	r1, r3, #4
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	9103      	str	r1, [sp, #12]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	bfbb      	ittet	lt
 800b250:	425b      	neglt	r3, r3
 800b252:	f042 0202 	orrlt.w	r2, r2, #2
 800b256:	9307      	strge	r3, [sp, #28]
 800b258:	9307      	strlt	r3, [sp, #28]
 800b25a:	bfb8      	it	lt
 800b25c:	9204      	strlt	r2, [sp, #16]
 800b25e:	7823      	ldrb	r3, [r4, #0]
 800b260:	2b2e      	cmp	r3, #46	; 0x2e
 800b262:	d10c      	bne.n	800b27e <_vfiprintf_r+0x176>
 800b264:	7863      	ldrb	r3, [r4, #1]
 800b266:	2b2a      	cmp	r3, #42	; 0x2a
 800b268:	d135      	bne.n	800b2d6 <_vfiprintf_r+0x1ce>
 800b26a:	9b03      	ldr	r3, [sp, #12]
 800b26c:	1d1a      	adds	r2, r3, #4
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	9203      	str	r2, [sp, #12]
 800b272:	2b00      	cmp	r3, #0
 800b274:	bfb8      	it	lt
 800b276:	f04f 33ff 	movlt.w	r3, #4294967295
 800b27a:	3402      	adds	r4, #2
 800b27c:	9305      	str	r3, [sp, #20]
 800b27e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b364 <_vfiprintf_r+0x25c>
 800b282:	7821      	ldrb	r1, [r4, #0]
 800b284:	2203      	movs	r2, #3
 800b286:	4650      	mov	r0, sl
 800b288:	f7f4 ffb2 	bl	80001f0 <memchr>
 800b28c:	b140      	cbz	r0, 800b2a0 <_vfiprintf_r+0x198>
 800b28e:	2340      	movs	r3, #64	; 0x40
 800b290:	eba0 000a 	sub.w	r0, r0, sl
 800b294:	fa03 f000 	lsl.w	r0, r3, r0
 800b298:	9b04      	ldr	r3, [sp, #16]
 800b29a:	4303      	orrs	r3, r0
 800b29c:	3401      	adds	r4, #1
 800b29e:	9304      	str	r3, [sp, #16]
 800b2a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2a4:	482c      	ldr	r0, [pc, #176]	; (800b358 <_vfiprintf_r+0x250>)
 800b2a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2aa:	2206      	movs	r2, #6
 800b2ac:	f7f4 ffa0 	bl	80001f0 <memchr>
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	d03f      	beq.n	800b334 <_vfiprintf_r+0x22c>
 800b2b4:	4b29      	ldr	r3, [pc, #164]	; (800b35c <_vfiprintf_r+0x254>)
 800b2b6:	bb1b      	cbnz	r3, 800b300 <_vfiprintf_r+0x1f8>
 800b2b8:	9b03      	ldr	r3, [sp, #12]
 800b2ba:	3307      	adds	r3, #7
 800b2bc:	f023 0307 	bic.w	r3, r3, #7
 800b2c0:	3308      	adds	r3, #8
 800b2c2:	9303      	str	r3, [sp, #12]
 800b2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c6:	443b      	add	r3, r7
 800b2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ca:	e767      	b.n	800b19c <_vfiprintf_r+0x94>
 800b2cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2d0:	460c      	mov	r4, r1
 800b2d2:	2001      	movs	r0, #1
 800b2d4:	e7a5      	b.n	800b222 <_vfiprintf_r+0x11a>
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	3401      	adds	r4, #1
 800b2da:	9305      	str	r3, [sp, #20]
 800b2dc:	4619      	mov	r1, r3
 800b2de:	f04f 0c0a 	mov.w	ip, #10
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2e8:	3a30      	subs	r2, #48	; 0x30
 800b2ea:	2a09      	cmp	r2, #9
 800b2ec:	d903      	bls.n	800b2f6 <_vfiprintf_r+0x1ee>
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d0c5      	beq.n	800b27e <_vfiprintf_r+0x176>
 800b2f2:	9105      	str	r1, [sp, #20]
 800b2f4:	e7c3      	b.n	800b27e <_vfiprintf_r+0x176>
 800b2f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e7f0      	b.n	800b2e2 <_vfiprintf_r+0x1da>
 800b300:	ab03      	add	r3, sp, #12
 800b302:	9300      	str	r3, [sp, #0]
 800b304:	462a      	mov	r2, r5
 800b306:	4b16      	ldr	r3, [pc, #88]	; (800b360 <_vfiprintf_r+0x258>)
 800b308:	a904      	add	r1, sp, #16
 800b30a:	4630      	mov	r0, r6
 800b30c:	f3af 8000 	nop.w
 800b310:	4607      	mov	r7, r0
 800b312:	1c78      	adds	r0, r7, #1
 800b314:	d1d6      	bne.n	800b2c4 <_vfiprintf_r+0x1bc>
 800b316:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b318:	07d9      	lsls	r1, r3, #31
 800b31a:	d405      	bmi.n	800b328 <_vfiprintf_r+0x220>
 800b31c:	89ab      	ldrh	r3, [r5, #12]
 800b31e:	059a      	lsls	r2, r3, #22
 800b320:	d402      	bmi.n	800b328 <_vfiprintf_r+0x220>
 800b322:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b324:	f7ff fa66 	bl	800a7f4 <__retarget_lock_release_recursive>
 800b328:	89ab      	ldrh	r3, [r5, #12]
 800b32a:	065b      	lsls	r3, r3, #25
 800b32c:	f53f af12 	bmi.w	800b154 <_vfiprintf_r+0x4c>
 800b330:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b332:	e711      	b.n	800b158 <_vfiprintf_r+0x50>
 800b334:	ab03      	add	r3, sp, #12
 800b336:	9300      	str	r3, [sp, #0]
 800b338:	462a      	mov	r2, r5
 800b33a:	4b09      	ldr	r3, [pc, #36]	; (800b360 <_vfiprintf_r+0x258>)
 800b33c:	a904      	add	r1, sp, #16
 800b33e:	4630      	mov	r0, r6
 800b340:	f000 f880 	bl	800b444 <_printf_i>
 800b344:	e7e4      	b.n	800b310 <_vfiprintf_r+0x208>
 800b346:	bf00      	nop
 800b348:	0800c6e0 	.word	0x0800c6e0
 800b34c:	0800c700 	.word	0x0800c700
 800b350:	0800c6c0 	.word	0x0800c6c0
 800b354:	0800c724 	.word	0x0800c724
 800b358:	0800c72e 	.word	0x0800c72e
 800b35c:	00000000 	.word	0x00000000
 800b360:	0800b0e3 	.word	0x0800b0e3
 800b364:	0800c72a 	.word	0x0800c72a

0800b368 <_printf_common>:
 800b368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b36c:	4616      	mov	r6, r2
 800b36e:	4699      	mov	r9, r3
 800b370:	688a      	ldr	r2, [r1, #8]
 800b372:	690b      	ldr	r3, [r1, #16]
 800b374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b378:	4293      	cmp	r3, r2
 800b37a:	bfb8      	it	lt
 800b37c:	4613      	movlt	r3, r2
 800b37e:	6033      	str	r3, [r6, #0]
 800b380:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b384:	4607      	mov	r7, r0
 800b386:	460c      	mov	r4, r1
 800b388:	b10a      	cbz	r2, 800b38e <_printf_common+0x26>
 800b38a:	3301      	adds	r3, #1
 800b38c:	6033      	str	r3, [r6, #0]
 800b38e:	6823      	ldr	r3, [r4, #0]
 800b390:	0699      	lsls	r1, r3, #26
 800b392:	bf42      	ittt	mi
 800b394:	6833      	ldrmi	r3, [r6, #0]
 800b396:	3302      	addmi	r3, #2
 800b398:	6033      	strmi	r3, [r6, #0]
 800b39a:	6825      	ldr	r5, [r4, #0]
 800b39c:	f015 0506 	ands.w	r5, r5, #6
 800b3a0:	d106      	bne.n	800b3b0 <_printf_common+0x48>
 800b3a2:	f104 0a19 	add.w	sl, r4, #25
 800b3a6:	68e3      	ldr	r3, [r4, #12]
 800b3a8:	6832      	ldr	r2, [r6, #0]
 800b3aa:	1a9b      	subs	r3, r3, r2
 800b3ac:	42ab      	cmp	r3, r5
 800b3ae:	dc26      	bgt.n	800b3fe <_printf_common+0x96>
 800b3b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3b4:	1e13      	subs	r3, r2, #0
 800b3b6:	6822      	ldr	r2, [r4, #0]
 800b3b8:	bf18      	it	ne
 800b3ba:	2301      	movne	r3, #1
 800b3bc:	0692      	lsls	r2, r2, #26
 800b3be:	d42b      	bmi.n	800b418 <_printf_common+0xb0>
 800b3c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3c4:	4649      	mov	r1, r9
 800b3c6:	4638      	mov	r0, r7
 800b3c8:	47c0      	blx	r8
 800b3ca:	3001      	adds	r0, #1
 800b3cc:	d01e      	beq.n	800b40c <_printf_common+0xa4>
 800b3ce:	6823      	ldr	r3, [r4, #0]
 800b3d0:	68e5      	ldr	r5, [r4, #12]
 800b3d2:	6832      	ldr	r2, [r6, #0]
 800b3d4:	f003 0306 	and.w	r3, r3, #6
 800b3d8:	2b04      	cmp	r3, #4
 800b3da:	bf08      	it	eq
 800b3dc:	1aad      	subeq	r5, r5, r2
 800b3de:	68a3      	ldr	r3, [r4, #8]
 800b3e0:	6922      	ldr	r2, [r4, #16]
 800b3e2:	bf0c      	ite	eq
 800b3e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3e8:	2500      	movne	r5, #0
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	bfc4      	itt	gt
 800b3ee:	1a9b      	subgt	r3, r3, r2
 800b3f0:	18ed      	addgt	r5, r5, r3
 800b3f2:	2600      	movs	r6, #0
 800b3f4:	341a      	adds	r4, #26
 800b3f6:	42b5      	cmp	r5, r6
 800b3f8:	d11a      	bne.n	800b430 <_printf_common+0xc8>
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	e008      	b.n	800b410 <_printf_common+0xa8>
 800b3fe:	2301      	movs	r3, #1
 800b400:	4652      	mov	r2, sl
 800b402:	4649      	mov	r1, r9
 800b404:	4638      	mov	r0, r7
 800b406:	47c0      	blx	r8
 800b408:	3001      	adds	r0, #1
 800b40a:	d103      	bne.n	800b414 <_printf_common+0xac>
 800b40c:	f04f 30ff 	mov.w	r0, #4294967295
 800b410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b414:	3501      	adds	r5, #1
 800b416:	e7c6      	b.n	800b3a6 <_printf_common+0x3e>
 800b418:	18e1      	adds	r1, r4, r3
 800b41a:	1c5a      	adds	r2, r3, #1
 800b41c:	2030      	movs	r0, #48	; 0x30
 800b41e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b422:	4422      	add	r2, r4
 800b424:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b428:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b42c:	3302      	adds	r3, #2
 800b42e:	e7c7      	b.n	800b3c0 <_printf_common+0x58>
 800b430:	2301      	movs	r3, #1
 800b432:	4622      	mov	r2, r4
 800b434:	4649      	mov	r1, r9
 800b436:	4638      	mov	r0, r7
 800b438:	47c0      	blx	r8
 800b43a:	3001      	adds	r0, #1
 800b43c:	d0e6      	beq.n	800b40c <_printf_common+0xa4>
 800b43e:	3601      	adds	r6, #1
 800b440:	e7d9      	b.n	800b3f6 <_printf_common+0x8e>
	...

0800b444 <_printf_i>:
 800b444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b448:	7e0f      	ldrb	r7, [r1, #24]
 800b44a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b44c:	2f78      	cmp	r7, #120	; 0x78
 800b44e:	4691      	mov	r9, r2
 800b450:	4680      	mov	r8, r0
 800b452:	460c      	mov	r4, r1
 800b454:	469a      	mov	sl, r3
 800b456:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b45a:	d807      	bhi.n	800b46c <_printf_i+0x28>
 800b45c:	2f62      	cmp	r7, #98	; 0x62
 800b45e:	d80a      	bhi.n	800b476 <_printf_i+0x32>
 800b460:	2f00      	cmp	r7, #0
 800b462:	f000 80d8 	beq.w	800b616 <_printf_i+0x1d2>
 800b466:	2f58      	cmp	r7, #88	; 0x58
 800b468:	f000 80a3 	beq.w	800b5b2 <_printf_i+0x16e>
 800b46c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b474:	e03a      	b.n	800b4ec <_printf_i+0xa8>
 800b476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b47a:	2b15      	cmp	r3, #21
 800b47c:	d8f6      	bhi.n	800b46c <_printf_i+0x28>
 800b47e:	a101      	add	r1, pc, #4	; (adr r1, 800b484 <_printf_i+0x40>)
 800b480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b484:	0800b4dd 	.word	0x0800b4dd
 800b488:	0800b4f1 	.word	0x0800b4f1
 800b48c:	0800b46d 	.word	0x0800b46d
 800b490:	0800b46d 	.word	0x0800b46d
 800b494:	0800b46d 	.word	0x0800b46d
 800b498:	0800b46d 	.word	0x0800b46d
 800b49c:	0800b4f1 	.word	0x0800b4f1
 800b4a0:	0800b46d 	.word	0x0800b46d
 800b4a4:	0800b46d 	.word	0x0800b46d
 800b4a8:	0800b46d 	.word	0x0800b46d
 800b4ac:	0800b46d 	.word	0x0800b46d
 800b4b0:	0800b5fd 	.word	0x0800b5fd
 800b4b4:	0800b521 	.word	0x0800b521
 800b4b8:	0800b5df 	.word	0x0800b5df
 800b4bc:	0800b46d 	.word	0x0800b46d
 800b4c0:	0800b46d 	.word	0x0800b46d
 800b4c4:	0800b61f 	.word	0x0800b61f
 800b4c8:	0800b46d 	.word	0x0800b46d
 800b4cc:	0800b521 	.word	0x0800b521
 800b4d0:	0800b46d 	.word	0x0800b46d
 800b4d4:	0800b46d 	.word	0x0800b46d
 800b4d8:	0800b5e7 	.word	0x0800b5e7
 800b4dc:	682b      	ldr	r3, [r5, #0]
 800b4de:	1d1a      	adds	r2, r3, #4
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	602a      	str	r2, [r5, #0]
 800b4e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e0a3      	b.n	800b638 <_printf_i+0x1f4>
 800b4f0:	6820      	ldr	r0, [r4, #0]
 800b4f2:	6829      	ldr	r1, [r5, #0]
 800b4f4:	0606      	lsls	r6, r0, #24
 800b4f6:	f101 0304 	add.w	r3, r1, #4
 800b4fa:	d50a      	bpl.n	800b512 <_printf_i+0xce>
 800b4fc:	680e      	ldr	r6, [r1, #0]
 800b4fe:	602b      	str	r3, [r5, #0]
 800b500:	2e00      	cmp	r6, #0
 800b502:	da03      	bge.n	800b50c <_printf_i+0xc8>
 800b504:	232d      	movs	r3, #45	; 0x2d
 800b506:	4276      	negs	r6, r6
 800b508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b50c:	485e      	ldr	r0, [pc, #376]	; (800b688 <_printf_i+0x244>)
 800b50e:	230a      	movs	r3, #10
 800b510:	e019      	b.n	800b546 <_printf_i+0x102>
 800b512:	680e      	ldr	r6, [r1, #0]
 800b514:	602b      	str	r3, [r5, #0]
 800b516:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b51a:	bf18      	it	ne
 800b51c:	b236      	sxthne	r6, r6
 800b51e:	e7ef      	b.n	800b500 <_printf_i+0xbc>
 800b520:	682b      	ldr	r3, [r5, #0]
 800b522:	6820      	ldr	r0, [r4, #0]
 800b524:	1d19      	adds	r1, r3, #4
 800b526:	6029      	str	r1, [r5, #0]
 800b528:	0601      	lsls	r1, r0, #24
 800b52a:	d501      	bpl.n	800b530 <_printf_i+0xec>
 800b52c:	681e      	ldr	r6, [r3, #0]
 800b52e:	e002      	b.n	800b536 <_printf_i+0xf2>
 800b530:	0646      	lsls	r6, r0, #25
 800b532:	d5fb      	bpl.n	800b52c <_printf_i+0xe8>
 800b534:	881e      	ldrh	r6, [r3, #0]
 800b536:	4854      	ldr	r0, [pc, #336]	; (800b688 <_printf_i+0x244>)
 800b538:	2f6f      	cmp	r7, #111	; 0x6f
 800b53a:	bf0c      	ite	eq
 800b53c:	2308      	moveq	r3, #8
 800b53e:	230a      	movne	r3, #10
 800b540:	2100      	movs	r1, #0
 800b542:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b546:	6865      	ldr	r5, [r4, #4]
 800b548:	60a5      	str	r5, [r4, #8]
 800b54a:	2d00      	cmp	r5, #0
 800b54c:	bfa2      	ittt	ge
 800b54e:	6821      	ldrge	r1, [r4, #0]
 800b550:	f021 0104 	bicge.w	r1, r1, #4
 800b554:	6021      	strge	r1, [r4, #0]
 800b556:	b90e      	cbnz	r6, 800b55c <_printf_i+0x118>
 800b558:	2d00      	cmp	r5, #0
 800b55a:	d04d      	beq.n	800b5f8 <_printf_i+0x1b4>
 800b55c:	4615      	mov	r5, r2
 800b55e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b562:	fb03 6711 	mls	r7, r3, r1, r6
 800b566:	5dc7      	ldrb	r7, [r0, r7]
 800b568:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b56c:	4637      	mov	r7, r6
 800b56e:	42bb      	cmp	r3, r7
 800b570:	460e      	mov	r6, r1
 800b572:	d9f4      	bls.n	800b55e <_printf_i+0x11a>
 800b574:	2b08      	cmp	r3, #8
 800b576:	d10b      	bne.n	800b590 <_printf_i+0x14c>
 800b578:	6823      	ldr	r3, [r4, #0]
 800b57a:	07de      	lsls	r6, r3, #31
 800b57c:	d508      	bpl.n	800b590 <_printf_i+0x14c>
 800b57e:	6923      	ldr	r3, [r4, #16]
 800b580:	6861      	ldr	r1, [r4, #4]
 800b582:	4299      	cmp	r1, r3
 800b584:	bfde      	ittt	le
 800b586:	2330      	movle	r3, #48	; 0x30
 800b588:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b58c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b590:	1b52      	subs	r2, r2, r5
 800b592:	6122      	str	r2, [r4, #16]
 800b594:	f8cd a000 	str.w	sl, [sp]
 800b598:	464b      	mov	r3, r9
 800b59a:	aa03      	add	r2, sp, #12
 800b59c:	4621      	mov	r1, r4
 800b59e:	4640      	mov	r0, r8
 800b5a0:	f7ff fee2 	bl	800b368 <_printf_common>
 800b5a4:	3001      	adds	r0, #1
 800b5a6:	d14c      	bne.n	800b642 <_printf_i+0x1fe>
 800b5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ac:	b004      	add	sp, #16
 800b5ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5b2:	4835      	ldr	r0, [pc, #212]	; (800b688 <_printf_i+0x244>)
 800b5b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b5b8:	6829      	ldr	r1, [r5, #0]
 800b5ba:	6823      	ldr	r3, [r4, #0]
 800b5bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b5c0:	6029      	str	r1, [r5, #0]
 800b5c2:	061d      	lsls	r5, r3, #24
 800b5c4:	d514      	bpl.n	800b5f0 <_printf_i+0x1ac>
 800b5c6:	07df      	lsls	r7, r3, #31
 800b5c8:	bf44      	itt	mi
 800b5ca:	f043 0320 	orrmi.w	r3, r3, #32
 800b5ce:	6023      	strmi	r3, [r4, #0]
 800b5d0:	b91e      	cbnz	r6, 800b5da <_printf_i+0x196>
 800b5d2:	6823      	ldr	r3, [r4, #0]
 800b5d4:	f023 0320 	bic.w	r3, r3, #32
 800b5d8:	6023      	str	r3, [r4, #0]
 800b5da:	2310      	movs	r3, #16
 800b5dc:	e7b0      	b.n	800b540 <_printf_i+0xfc>
 800b5de:	6823      	ldr	r3, [r4, #0]
 800b5e0:	f043 0320 	orr.w	r3, r3, #32
 800b5e4:	6023      	str	r3, [r4, #0]
 800b5e6:	2378      	movs	r3, #120	; 0x78
 800b5e8:	4828      	ldr	r0, [pc, #160]	; (800b68c <_printf_i+0x248>)
 800b5ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b5ee:	e7e3      	b.n	800b5b8 <_printf_i+0x174>
 800b5f0:	0659      	lsls	r1, r3, #25
 800b5f2:	bf48      	it	mi
 800b5f4:	b2b6      	uxthmi	r6, r6
 800b5f6:	e7e6      	b.n	800b5c6 <_printf_i+0x182>
 800b5f8:	4615      	mov	r5, r2
 800b5fa:	e7bb      	b.n	800b574 <_printf_i+0x130>
 800b5fc:	682b      	ldr	r3, [r5, #0]
 800b5fe:	6826      	ldr	r6, [r4, #0]
 800b600:	6961      	ldr	r1, [r4, #20]
 800b602:	1d18      	adds	r0, r3, #4
 800b604:	6028      	str	r0, [r5, #0]
 800b606:	0635      	lsls	r5, r6, #24
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	d501      	bpl.n	800b610 <_printf_i+0x1cc>
 800b60c:	6019      	str	r1, [r3, #0]
 800b60e:	e002      	b.n	800b616 <_printf_i+0x1d2>
 800b610:	0670      	lsls	r0, r6, #25
 800b612:	d5fb      	bpl.n	800b60c <_printf_i+0x1c8>
 800b614:	8019      	strh	r1, [r3, #0]
 800b616:	2300      	movs	r3, #0
 800b618:	6123      	str	r3, [r4, #16]
 800b61a:	4615      	mov	r5, r2
 800b61c:	e7ba      	b.n	800b594 <_printf_i+0x150>
 800b61e:	682b      	ldr	r3, [r5, #0]
 800b620:	1d1a      	adds	r2, r3, #4
 800b622:	602a      	str	r2, [r5, #0]
 800b624:	681d      	ldr	r5, [r3, #0]
 800b626:	6862      	ldr	r2, [r4, #4]
 800b628:	2100      	movs	r1, #0
 800b62a:	4628      	mov	r0, r5
 800b62c:	f7f4 fde0 	bl	80001f0 <memchr>
 800b630:	b108      	cbz	r0, 800b636 <_printf_i+0x1f2>
 800b632:	1b40      	subs	r0, r0, r5
 800b634:	6060      	str	r0, [r4, #4]
 800b636:	6863      	ldr	r3, [r4, #4]
 800b638:	6123      	str	r3, [r4, #16]
 800b63a:	2300      	movs	r3, #0
 800b63c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b640:	e7a8      	b.n	800b594 <_printf_i+0x150>
 800b642:	6923      	ldr	r3, [r4, #16]
 800b644:	462a      	mov	r2, r5
 800b646:	4649      	mov	r1, r9
 800b648:	4640      	mov	r0, r8
 800b64a:	47d0      	blx	sl
 800b64c:	3001      	adds	r0, #1
 800b64e:	d0ab      	beq.n	800b5a8 <_printf_i+0x164>
 800b650:	6823      	ldr	r3, [r4, #0]
 800b652:	079b      	lsls	r3, r3, #30
 800b654:	d413      	bmi.n	800b67e <_printf_i+0x23a>
 800b656:	68e0      	ldr	r0, [r4, #12]
 800b658:	9b03      	ldr	r3, [sp, #12]
 800b65a:	4298      	cmp	r0, r3
 800b65c:	bfb8      	it	lt
 800b65e:	4618      	movlt	r0, r3
 800b660:	e7a4      	b.n	800b5ac <_printf_i+0x168>
 800b662:	2301      	movs	r3, #1
 800b664:	4632      	mov	r2, r6
 800b666:	4649      	mov	r1, r9
 800b668:	4640      	mov	r0, r8
 800b66a:	47d0      	blx	sl
 800b66c:	3001      	adds	r0, #1
 800b66e:	d09b      	beq.n	800b5a8 <_printf_i+0x164>
 800b670:	3501      	adds	r5, #1
 800b672:	68e3      	ldr	r3, [r4, #12]
 800b674:	9903      	ldr	r1, [sp, #12]
 800b676:	1a5b      	subs	r3, r3, r1
 800b678:	42ab      	cmp	r3, r5
 800b67a:	dcf2      	bgt.n	800b662 <_printf_i+0x21e>
 800b67c:	e7eb      	b.n	800b656 <_printf_i+0x212>
 800b67e:	2500      	movs	r5, #0
 800b680:	f104 0619 	add.w	r6, r4, #25
 800b684:	e7f5      	b.n	800b672 <_printf_i+0x22e>
 800b686:	bf00      	nop
 800b688:	0800c735 	.word	0x0800c735
 800b68c:	0800c746 	.word	0x0800c746

0800b690 <_read_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	4d07      	ldr	r5, [pc, #28]	; (800b6b0 <_read_r+0x20>)
 800b694:	4604      	mov	r4, r0
 800b696:	4608      	mov	r0, r1
 800b698:	4611      	mov	r1, r2
 800b69a:	2200      	movs	r2, #0
 800b69c:	602a      	str	r2, [r5, #0]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	f7f7 fd5c 	bl	800315c <_read>
 800b6a4:	1c43      	adds	r3, r0, #1
 800b6a6:	d102      	bne.n	800b6ae <_read_r+0x1e>
 800b6a8:	682b      	ldr	r3, [r5, #0]
 800b6aa:	b103      	cbz	r3, 800b6ae <_read_r+0x1e>
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	bd38      	pop	{r3, r4, r5, pc}
 800b6b0:	200050e8 	.word	0x200050e8

0800b6b4 <__swbuf_r>:
 800b6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6b6:	460e      	mov	r6, r1
 800b6b8:	4614      	mov	r4, r2
 800b6ba:	4605      	mov	r5, r0
 800b6bc:	b118      	cbz	r0, 800b6c6 <__swbuf_r+0x12>
 800b6be:	6983      	ldr	r3, [r0, #24]
 800b6c0:	b90b      	cbnz	r3, 800b6c6 <__swbuf_r+0x12>
 800b6c2:	f7fe ffd3 	bl	800a66c <__sinit>
 800b6c6:	4b21      	ldr	r3, [pc, #132]	; (800b74c <__swbuf_r+0x98>)
 800b6c8:	429c      	cmp	r4, r3
 800b6ca:	d12b      	bne.n	800b724 <__swbuf_r+0x70>
 800b6cc:	686c      	ldr	r4, [r5, #4]
 800b6ce:	69a3      	ldr	r3, [r4, #24]
 800b6d0:	60a3      	str	r3, [r4, #8]
 800b6d2:	89a3      	ldrh	r3, [r4, #12]
 800b6d4:	071a      	lsls	r2, r3, #28
 800b6d6:	d52f      	bpl.n	800b738 <__swbuf_r+0x84>
 800b6d8:	6923      	ldr	r3, [r4, #16]
 800b6da:	b36b      	cbz	r3, 800b738 <__swbuf_r+0x84>
 800b6dc:	6923      	ldr	r3, [r4, #16]
 800b6de:	6820      	ldr	r0, [r4, #0]
 800b6e0:	1ac0      	subs	r0, r0, r3
 800b6e2:	6963      	ldr	r3, [r4, #20]
 800b6e4:	b2f6      	uxtb	r6, r6
 800b6e6:	4283      	cmp	r3, r0
 800b6e8:	4637      	mov	r7, r6
 800b6ea:	dc04      	bgt.n	800b6f6 <__swbuf_r+0x42>
 800b6ec:	4621      	mov	r1, r4
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	f7ff fade 	bl	800acb0 <_fflush_r>
 800b6f4:	bb30      	cbnz	r0, 800b744 <__swbuf_r+0x90>
 800b6f6:	68a3      	ldr	r3, [r4, #8]
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	60a3      	str	r3, [r4, #8]
 800b6fc:	6823      	ldr	r3, [r4, #0]
 800b6fe:	1c5a      	adds	r2, r3, #1
 800b700:	6022      	str	r2, [r4, #0]
 800b702:	701e      	strb	r6, [r3, #0]
 800b704:	6963      	ldr	r3, [r4, #20]
 800b706:	3001      	adds	r0, #1
 800b708:	4283      	cmp	r3, r0
 800b70a:	d004      	beq.n	800b716 <__swbuf_r+0x62>
 800b70c:	89a3      	ldrh	r3, [r4, #12]
 800b70e:	07db      	lsls	r3, r3, #31
 800b710:	d506      	bpl.n	800b720 <__swbuf_r+0x6c>
 800b712:	2e0a      	cmp	r6, #10
 800b714:	d104      	bne.n	800b720 <__swbuf_r+0x6c>
 800b716:	4621      	mov	r1, r4
 800b718:	4628      	mov	r0, r5
 800b71a:	f7ff fac9 	bl	800acb0 <_fflush_r>
 800b71e:	b988      	cbnz	r0, 800b744 <__swbuf_r+0x90>
 800b720:	4638      	mov	r0, r7
 800b722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b724:	4b0a      	ldr	r3, [pc, #40]	; (800b750 <__swbuf_r+0x9c>)
 800b726:	429c      	cmp	r4, r3
 800b728:	d101      	bne.n	800b72e <__swbuf_r+0x7a>
 800b72a:	68ac      	ldr	r4, [r5, #8]
 800b72c:	e7cf      	b.n	800b6ce <__swbuf_r+0x1a>
 800b72e:	4b09      	ldr	r3, [pc, #36]	; (800b754 <__swbuf_r+0xa0>)
 800b730:	429c      	cmp	r4, r3
 800b732:	bf08      	it	eq
 800b734:	68ec      	ldreq	r4, [r5, #12]
 800b736:	e7ca      	b.n	800b6ce <__swbuf_r+0x1a>
 800b738:	4621      	mov	r1, r4
 800b73a:	4628      	mov	r0, r5
 800b73c:	f000 f80c 	bl	800b758 <__swsetup_r>
 800b740:	2800      	cmp	r0, #0
 800b742:	d0cb      	beq.n	800b6dc <__swbuf_r+0x28>
 800b744:	f04f 37ff 	mov.w	r7, #4294967295
 800b748:	e7ea      	b.n	800b720 <__swbuf_r+0x6c>
 800b74a:	bf00      	nop
 800b74c:	0800c6e0 	.word	0x0800c6e0
 800b750:	0800c700 	.word	0x0800c700
 800b754:	0800c6c0 	.word	0x0800c6c0

0800b758 <__swsetup_r>:
 800b758:	4b32      	ldr	r3, [pc, #200]	; (800b824 <__swsetup_r+0xcc>)
 800b75a:	b570      	push	{r4, r5, r6, lr}
 800b75c:	681d      	ldr	r5, [r3, #0]
 800b75e:	4606      	mov	r6, r0
 800b760:	460c      	mov	r4, r1
 800b762:	b125      	cbz	r5, 800b76e <__swsetup_r+0x16>
 800b764:	69ab      	ldr	r3, [r5, #24]
 800b766:	b913      	cbnz	r3, 800b76e <__swsetup_r+0x16>
 800b768:	4628      	mov	r0, r5
 800b76a:	f7fe ff7f 	bl	800a66c <__sinit>
 800b76e:	4b2e      	ldr	r3, [pc, #184]	; (800b828 <__swsetup_r+0xd0>)
 800b770:	429c      	cmp	r4, r3
 800b772:	d10f      	bne.n	800b794 <__swsetup_r+0x3c>
 800b774:	686c      	ldr	r4, [r5, #4]
 800b776:	89a3      	ldrh	r3, [r4, #12]
 800b778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b77c:	0719      	lsls	r1, r3, #28
 800b77e:	d42c      	bmi.n	800b7da <__swsetup_r+0x82>
 800b780:	06dd      	lsls	r5, r3, #27
 800b782:	d411      	bmi.n	800b7a8 <__swsetup_r+0x50>
 800b784:	2309      	movs	r3, #9
 800b786:	6033      	str	r3, [r6, #0]
 800b788:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b78c:	81a3      	strh	r3, [r4, #12]
 800b78e:	f04f 30ff 	mov.w	r0, #4294967295
 800b792:	e03e      	b.n	800b812 <__swsetup_r+0xba>
 800b794:	4b25      	ldr	r3, [pc, #148]	; (800b82c <__swsetup_r+0xd4>)
 800b796:	429c      	cmp	r4, r3
 800b798:	d101      	bne.n	800b79e <__swsetup_r+0x46>
 800b79a:	68ac      	ldr	r4, [r5, #8]
 800b79c:	e7eb      	b.n	800b776 <__swsetup_r+0x1e>
 800b79e:	4b24      	ldr	r3, [pc, #144]	; (800b830 <__swsetup_r+0xd8>)
 800b7a0:	429c      	cmp	r4, r3
 800b7a2:	bf08      	it	eq
 800b7a4:	68ec      	ldreq	r4, [r5, #12]
 800b7a6:	e7e6      	b.n	800b776 <__swsetup_r+0x1e>
 800b7a8:	0758      	lsls	r0, r3, #29
 800b7aa:	d512      	bpl.n	800b7d2 <__swsetup_r+0x7a>
 800b7ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7ae:	b141      	cbz	r1, 800b7c2 <__swsetup_r+0x6a>
 800b7b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7b4:	4299      	cmp	r1, r3
 800b7b6:	d002      	beq.n	800b7be <__swsetup_r+0x66>
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	f7ff fad3 	bl	800ad64 <_free_r>
 800b7be:	2300      	movs	r3, #0
 800b7c0:	6363      	str	r3, [r4, #52]	; 0x34
 800b7c2:	89a3      	ldrh	r3, [r4, #12]
 800b7c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7c8:	81a3      	strh	r3, [r4, #12]
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	6063      	str	r3, [r4, #4]
 800b7ce:	6923      	ldr	r3, [r4, #16]
 800b7d0:	6023      	str	r3, [r4, #0]
 800b7d2:	89a3      	ldrh	r3, [r4, #12]
 800b7d4:	f043 0308 	orr.w	r3, r3, #8
 800b7d8:	81a3      	strh	r3, [r4, #12]
 800b7da:	6923      	ldr	r3, [r4, #16]
 800b7dc:	b94b      	cbnz	r3, 800b7f2 <__swsetup_r+0x9a>
 800b7de:	89a3      	ldrh	r3, [r4, #12]
 800b7e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7e8:	d003      	beq.n	800b7f2 <__swsetup_r+0x9a>
 800b7ea:	4621      	mov	r1, r4
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	f000 f847 	bl	800b880 <__smakebuf_r>
 800b7f2:	89a0      	ldrh	r0, [r4, #12]
 800b7f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7f8:	f010 0301 	ands.w	r3, r0, #1
 800b7fc:	d00a      	beq.n	800b814 <__swsetup_r+0xbc>
 800b7fe:	2300      	movs	r3, #0
 800b800:	60a3      	str	r3, [r4, #8]
 800b802:	6963      	ldr	r3, [r4, #20]
 800b804:	425b      	negs	r3, r3
 800b806:	61a3      	str	r3, [r4, #24]
 800b808:	6923      	ldr	r3, [r4, #16]
 800b80a:	b943      	cbnz	r3, 800b81e <__swsetup_r+0xc6>
 800b80c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b810:	d1ba      	bne.n	800b788 <__swsetup_r+0x30>
 800b812:	bd70      	pop	{r4, r5, r6, pc}
 800b814:	0781      	lsls	r1, r0, #30
 800b816:	bf58      	it	pl
 800b818:	6963      	ldrpl	r3, [r4, #20]
 800b81a:	60a3      	str	r3, [r4, #8]
 800b81c:	e7f4      	b.n	800b808 <__swsetup_r+0xb0>
 800b81e:	2000      	movs	r0, #0
 800b820:	e7f7      	b.n	800b812 <__swsetup_r+0xba>
 800b822:	bf00      	nop
 800b824:	2000001c 	.word	0x2000001c
 800b828:	0800c6e0 	.word	0x0800c6e0
 800b82c:	0800c700 	.word	0x0800c700
 800b830:	0800c6c0 	.word	0x0800c6c0

0800b834 <__swhatbuf_r>:
 800b834:	b570      	push	{r4, r5, r6, lr}
 800b836:	460e      	mov	r6, r1
 800b838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b83c:	2900      	cmp	r1, #0
 800b83e:	b096      	sub	sp, #88	; 0x58
 800b840:	4614      	mov	r4, r2
 800b842:	461d      	mov	r5, r3
 800b844:	da08      	bge.n	800b858 <__swhatbuf_r+0x24>
 800b846:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b84a:	2200      	movs	r2, #0
 800b84c:	602a      	str	r2, [r5, #0]
 800b84e:	061a      	lsls	r2, r3, #24
 800b850:	d410      	bmi.n	800b874 <__swhatbuf_r+0x40>
 800b852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b856:	e00e      	b.n	800b876 <__swhatbuf_r+0x42>
 800b858:	466a      	mov	r2, sp
 800b85a:	f000 f89b 	bl	800b994 <_fstat_r>
 800b85e:	2800      	cmp	r0, #0
 800b860:	dbf1      	blt.n	800b846 <__swhatbuf_r+0x12>
 800b862:	9a01      	ldr	r2, [sp, #4]
 800b864:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b868:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b86c:	425a      	negs	r2, r3
 800b86e:	415a      	adcs	r2, r3
 800b870:	602a      	str	r2, [r5, #0]
 800b872:	e7ee      	b.n	800b852 <__swhatbuf_r+0x1e>
 800b874:	2340      	movs	r3, #64	; 0x40
 800b876:	2000      	movs	r0, #0
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	b016      	add	sp, #88	; 0x58
 800b87c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b880 <__smakebuf_r>:
 800b880:	898b      	ldrh	r3, [r1, #12]
 800b882:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b884:	079d      	lsls	r5, r3, #30
 800b886:	4606      	mov	r6, r0
 800b888:	460c      	mov	r4, r1
 800b88a:	d507      	bpl.n	800b89c <__smakebuf_r+0x1c>
 800b88c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b890:	6023      	str	r3, [r4, #0]
 800b892:	6123      	str	r3, [r4, #16]
 800b894:	2301      	movs	r3, #1
 800b896:	6163      	str	r3, [r4, #20]
 800b898:	b002      	add	sp, #8
 800b89a:	bd70      	pop	{r4, r5, r6, pc}
 800b89c:	ab01      	add	r3, sp, #4
 800b89e:	466a      	mov	r2, sp
 800b8a0:	f7ff ffc8 	bl	800b834 <__swhatbuf_r>
 800b8a4:	9900      	ldr	r1, [sp, #0]
 800b8a6:	4605      	mov	r5, r0
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	f7fe ffdb 	bl	800a864 <_malloc_r>
 800b8ae:	b948      	cbnz	r0, 800b8c4 <__smakebuf_r+0x44>
 800b8b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8b4:	059a      	lsls	r2, r3, #22
 800b8b6:	d4ef      	bmi.n	800b898 <__smakebuf_r+0x18>
 800b8b8:	f023 0303 	bic.w	r3, r3, #3
 800b8bc:	f043 0302 	orr.w	r3, r3, #2
 800b8c0:	81a3      	strh	r3, [r4, #12]
 800b8c2:	e7e3      	b.n	800b88c <__smakebuf_r+0xc>
 800b8c4:	4b0d      	ldr	r3, [pc, #52]	; (800b8fc <__smakebuf_r+0x7c>)
 800b8c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b8c8:	89a3      	ldrh	r3, [r4, #12]
 800b8ca:	6020      	str	r0, [r4, #0]
 800b8cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8d0:	81a3      	strh	r3, [r4, #12]
 800b8d2:	9b00      	ldr	r3, [sp, #0]
 800b8d4:	6163      	str	r3, [r4, #20]
 800b8d6:	9b01      	ldr	r3, [sp, #4]
 800b8d8:	6120      	str	r0, [r4, #16]
 800b8da:	b15b      	cbz	r3, 800b8f4 <__smakebuf_r+0x74>
 800b8dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	f000 f869 	bl	800b9b8 <_isatty_r>
 800b8e6:	b128      	cbz	r0, 800b8f4 <__smakebuf_r+0x74>
 800b8e8:	89a3      	ldrh	r3, [r4, #12]
 800b8ea:	f023 0303 	bic.w	r3, r3, #3
 800b8ee:	f043 0301 	orr.w	r3, r3, #1
 800b8f2:	81a3      	strh	r3, [r4, #12]
 800b8f4:	89a0      	ldrh	r0, [r4, #12]
 800b8f6:	4305      	orrs	r5, r0
 800b8f8:	81a5      	strh	r5, [r4, #12]
 800b8fa:	e7cd      	b.n	800b898 <__smakebuf_r+0x18>
 800b8fc:	0800a605 	.word	0x0800a605

0800b900 <memmove>:
 800b900:	4288      	cmp	r0, r1
 800b902:	b510      	push	{r4, lr}
 800b904:	eb01 0402 	add.w	r4, r1, r2
 800b908:	d902      	bls.n	800b910 <memmove+0x10>
 800b90a:	4284      	cmp	r4, r0
 800b90c:	4623      	mov	r3, r4
 800b90e:	d807      	bhi.n	800b920 <memmove+0x20>
 800b910:	1e43      	subs	r3, r0, #1
 800b912:	42a1      	cmp	r1, r4
 800b914:	d008      	beq.n	800b928 <memmove+0x28>
 800b916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b91a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b91e:	e7f8      	b.n	800b912 <memmove+0x12>
 800b920:	4402      	add	r2, r0
 800b922:	4601      	mov	r1, r0
 800b924:	428a      	cmp	r2, r1
 800b926:	d100      	bne.n	800b92a <memmove+0x2a>
 800b928:	bd10      	pop	{r4, pc}
 800b92a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b92e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b932:	e7f7      	b.n	800b924 <memmove+0x24>

0800b934 <_realloc_r>:
 800b934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b938:	4680      	mov	r8, r0
 800b93a:	4614      	mov	r4, r2
 800b93c:	460e      	mov	r6, r1
 800b93e:	b921      	cbnz	r1, 800b94a <_realloc_r+0x16>
 800b940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b944:	4611      	mov	r1, r2
 800b946:	f7fe bf8d 	b.w	800a864 <_malloc_r>
 800b94a:	b92a      	cbnz	r2, 800b958 <_realloc_r+0x24>
 800b94c:	f7ff fa0a 	bl	800ad64 <_free_r>
 800b950:	4625      	mov	r5, r4
 800b952:	4628      	mov	r0, r5
 800b954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b958:	f000 f83e 	bl	800b9d8 <_malloc_usable_size_r>
 800b95c:	4284      	cmp	r4, r0
 800b95e:	4607      	mov	r7, r0
 800b960:	d802      	bhi.n	800b968 <_realloc_r+0x34>
 800b962:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b966:	d812      	bhi.n	800b98e <_realloc_r+0x5a>
 800b968:	4621      	mov	r1, r4
 800b96a:	4640      	mov	r0, r8
 800b96c:	f7fe ff7a 	bl	800a864 <_malloc_r>
 800b970:	4605      	mov	r5, r0
 800b972:	2800      	cmp	r0, #0
 800b974:	d0ed      	beq.n	800b952 <_realloc_r+0x1e>
 800b976:	42bc      	cmp	r4, r7
 800b978:	4622      	mov	r2, r4
 800b97a:	4631      	mov	r1, r6
 800b97c:	bf28      	it	cs
 800b97e:	463a      	movcs	r2, r7
 800b980:	f7fe ff39 	bl	800a7f6 <memcpy>
 800b984:	4631      	mov	r1, r6
 800b986:	4640      	mov	r0, r8
 800b988:	f7ff f9ec 	bl	800ad64 <_free_r>
 800b98c:	e7e1      	b.n	800b952 <_realloc_r+0x1e>
 800b98e:	4635      	mov	r5, r6
 800b990:	e7df      	b.n	800b952 <_realloc_r+0x1e>
	...

0800b994 <_fstat_r>:
 800b994:	b538      	push	{r3, r4, r5, lr}
 800b996:	4d07      	ldr	r5, [pc, #28]	; (800b9b4 <_fstat_r+0x20>)
 800b998:	2300      	movs	r3, #0
 800b99a:	4604      	mov	r4, r0
 800b99c:	4608      	mov	r0, r1
 800b99e:	4611      	mov	r1, r2
 800b9a0:	602b      	str	r3, [r5, #0]
 800b9a2:	f7f7 fc20 	bl	80031e6 <_fstat>
 800b9a6:	1c43      	adds	r3, r0, #1
 800b9a8:	d102      	bne.n	800b9b0 <_fstat_r+0x1c>
 800b9aa:	682b      	ldr	r3, [r5, #0]
 800b9ac:	b103      	cbz	r3, 800b9b0 <_fstat_r+0x1c>
 800b9ae:	6023      	str	r3, [r4, #0]
 800b9b0:	bd38      	pop	{r3, r4, r5, pc}
 800b9b2:	bf00      	nop
 800b9b4:	200050e8 	.word	0x200050e8

0800b9b8 <_isatty_r>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	4d06      	ldr	r5, [pc, #24]	; (800b9d4 <_isatty_r+0x1c>)
 800b9bc:	2300      	movs	r3, #0
 800b9be:	4604      	mov	r4, r0
 800b9c0:	4608      	mov	r0, r1
 800b9c2:	602b      	str	r3, [r5, #0]
 800b9c4:	f7f7 fc1f 	bl	8003206 <_isatty>
 800b9c8:	1c43      	adds	r3, r0, #1
 800b9ca:	d102      	bne.n	800b9d2 <_isatty_r+0x1a>
 800b9cc:	682b      	ldr	r3, [r5, #0]
 800b9ce:	b103      	cbz	r3, 800b9d2 <_isatty_r+0x1a>
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	bd38      	pop	{r3, r4, r5, pc}
 800b9d4:	200050e8 	.word	0x200050e8

0800b9d8 <_malloc_usable_size_r>:
 800b9d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9dc:	1f18      	subs	r0, r3, #4
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	bfbc      	itt	lt
 800b9e2:	580b      	ldrlt	r3, [r1, r0]
 800b9e4:	18c0      	addlt	r0, r0, r3
 800b9e6:	4770      	bx	lr

0800b9e8 <_init>:
 800b9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ea:	bf00      	nop
 800b9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ee:	bc08      	pop	{r3}
 800b9f0:	469e      	mov	lr, r3
 800b9f2:	4770      	bx	lr

0800b9f4 <_fini>:
 800b9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f6:	bf00      	nop
 800b9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9fa:	bc08      	pop	{r3}
 800b9fc:	469e      	mov	lr, r3
 800b9fe:	4770      	bx	lr
