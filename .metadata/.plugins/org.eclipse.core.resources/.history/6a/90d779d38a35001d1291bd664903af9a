/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "oled.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

UART_HandleTypeDef huart3;

/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = {
  .name = "defaultTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for MotorTask */
osThreadId_t MotorTaskHandle;
const osThreadAttr_t MotorTask_attributes = {
  .name = "MotorTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for EncoderTask */
osThreadId_t EncoderTaskHandle;
const osThreadAttr_t EncoderTask_attributes = {
  .name = "EncoderTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for show_OLED */
osThreadId_t show_OLEDHandle;
const osThreadAttr_t show_OLED_attributes = {
  .name = "show_OLED",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for Gyrotask */
osThreadId_t GyrotaskHandle;
const osThreadAttr_t Gyrotask_attributes = {
  .name = "Gyrotask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM8_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM1_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_TIM3_Init(void);
static void MX_I2C1_Init(void);
void StartDefaultTask(void *argument);
void motor(void *argument);
void encoder_task(void *argument);
void show(void *argument);
void GyroTask(void *argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t aRxBuffer[2] = "000";
uint8_t aTxBuffer[5];
int defaultPower = 2000;
int motorcmd = 0;
uint8_t buff[20];
uint8_t ICMAddr = 0x68;
double total_angle = 0;
double total_distanceA ,total_distanceB = 0;
uint8_t disA[20];
uint8_t disB[20];
uint8_t speed[20];
int wheelDist;

void readByte(uint8_t addr, uint8_t* data){
	buff[0] = addr;
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr<<1, buff, 1, 10);
	HAL_I2C_Master_Receive(&hi2c1, ICMAddr<<1, data, 2, 20);

}

void writeByte(uint8_t addr, uint8_t data){
	buff[0] = addr;
	buff[1] = data;
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, buff, 2, 20);
}

void gyroStart(){
	writeByte(0x07, 0x07);
	osDelayUntil(10);
	writeByte(0x07, 0x00);
	osDelayUntil(10);

}
void gyroInit(){

	writeByte(0x06, 0x00);
	osDelayUntil(10);
	writeByte(0x03, 0x80);
	osDelayUntil(10);
	writeByte(0x07, 0x07);
	osDelayUntil(10);
	writeByte(0x06, 0x01);
	osDelayUntil(10);
	writeByte(0x7F, 0x20);
	osDelayUntil(10);
	writeByte(0x01, 0x2F);
	osDelayUntil(10);
	writeByte(0x0, 0x00);
	osDelayUntil(10);
	writeByte(0x7F, 0x00);
	osDelayUntil(10);
	writeByte(0x07, 0x00);
	osDelayUntil(10);

}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM8_Init();
  MX_TIM2_Init();
  MX_TIM1_Init();
  MX_USART3_UART_Init();
  MX_TIM3_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  OLED_Init();
  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer,2);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder_task, NULL, &EncoderTask_attributes);

  /* creation of show_OLED */
  show_OLEDHandle = osThreadNew(show, NULL, &show_OLED_attributes);

  /* creation of Gyrotask */
  GyrotaskHandle = osThreadNew(GyroTask, NULL, &Gyrotask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 160;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 1000;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 10;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 10;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
  htim8.Init.Prescaler = 0;
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim8.Init.Period = 7199;
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim8.Init.RepetitionCounter = 0;
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|LED_DC_Pin
                          |LED3_Pin|CIN1_Pin|Gyro_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CIN2_GPIO_Port, CIN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin LED_DC_Pin
                           LED3_Pin Gyro_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|LED_DC_Pin
                          |LED3_Pin|Gyro_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : CIN2_Pin */
  GPIO_InitStruct.Pin = CIN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(CIN2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : CIN1_Pin */
  GPIO_InitStruct.Pin = CIN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(CIN1_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);
	HAL_UART_Transmit(&huart3,(uint8_t *) aTxBuffer,5,0xFFFFF);
	HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer,2);

}

/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  //uint8_t ch = 'A';
  for(;;)
  {
//	HAL_UART_Transmit(&huart3,(uint8_t *) &ch,1,0xFFFF);
//	if(ch < 'Z'){
//		ch++;
//	}else{
//		ch = 'A';
//	}
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

	osDelay(1000);
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_motor */
/**
* @brief Function implementing the MotorTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
  /* USER CODE BEGIN motor */
	uint16_t pwnVal = 0;
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
	/* Infinite loop */
  for(;;)
  {
	//clockwise
//	while(pwnVal < 4000)
//	{
//		HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
//		pwnVal++;
//		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwnVal); //Modify comparison value for the duty cycle
//		osDelay(10);
//	}
//	//anticlockwise
//	while(pwnVal > 0)
//	{
//		HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
//		pwnVal--;
//		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwnVal); //Modify comparison value for the duty cycle
//		osDelay(10);
//	}
//    osDelay(1000);

	  // if(strlen(aRxBuffer) != 0)
		//  strcpy(motorcmd, &aRxBuffer[0]);
	  if(strcmp(aRxBuffer,"  ") == 0){
		  forward(defaultPower);
		  osDelay(5000);
		  stop();
	  }

	  if(strcmp(aRxBuffer,"F1")== 0){ //Forward
		  forward(1000,defaultPower);
		  osDelay(10);
	  }else if (strcmp(aRxBuffer, "F2") == 0){ //Stop
		  stop();
		  osDelay(10);
	  }else if(strcmp(aRxBuffer, "F3") == 0){ //Reverse
		  reverse(defaultPower);
		  osDelay(10);
	  }else if(strcmp(aRxBuffer, "C1") == 0){ //Center Servo
		  center();
		  osDelay(10);
	  }
	  else if(strcmp(aRxBuffer, "L1") == 0){ //Full Left
		  //fullLeft();
		  Left(90,defaultPower);
		  osDelay(10);
	  }else if(strcmp(aRxBuffer, "L2") == 0){ //Half Left
		  halfLeft();
		  osDelay(10);
	  }else if(strcmp(aRxBuffer, "R1") == 0){ //Full Right
		  Right(-90,defaultPower);
		  osDelay(10);
	  }else if(strcmp(aRxBuffer, "R2") == 0){ //Half Right
		  halfRight();
		  osDelay(10);
	  }else if(strcmp(aRxBuffer, "TT") == 0){
		  osDelay(100);
		  forward(2000);
		  while(wheelDist < 4000){
			  printf("Hello");
		  }
		  stop();
		  osDelay(5000);
		  reverse(defaultPower);
		  while(wheelDist > 0){
			  printf("Hello");
		  }
		  stop();
	  }else if(strcmp(aRxBuffer, "EE") == 0){
		  osDelay(100);
		  stop();
		  osDelay(100);
		  HAL_UART_Transmit(&huart3,"EE\0",2,0xFF);

	  }
	  else{
		  OLED_ShowString(10,10,motorcmd);
	  }
	  OLED_ShowString(10,40,aRxBuffer);
	  memset(aRxBuffer, 0, sizeof(aRxBuffer));
	  memset(aTxBuffer, 0, sizeof(aTxBuffer));
	  osDelay(1000);
  }

  /* USER CODE END motor */
}

/* USER CODE BEGIN Header_encoder_task */
/**
* @brief Function implementing the EncoderTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_task */
void encoder_task(void *argument)
{
  /* USER CODE BEGIN encoder_task */
  /* Infinite loop */
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);

	int cnt1,cnt2,diff1,diff2;
	uint32_t tick = 0;

	cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
	tick = HAL_GetTick();
	uint8_t strWheelDist[20];
	uint8_t hello2[20];
	uint16_t dir;
  for(;;)
  {
//	cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
//	cnt2 = _HAL_TIM_GET_COUNTER(&htim3);
//	total_distA = cnt1;
//	total_distB = cnt2;
//
//	sprintf(strWheelDist,"Dir:%5d\0",cnt1);
//	//OLED_ShowString(10,30,strWheelDist); //Have to send this to algo?
//
//	if(HAL_GetTick()-tick > 1000L)
//	{
//		cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
//		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
//			if(cnt2<cnt1){
//				diff = cnt1 - cnt2;
//			}
//			else{
//				diff = (65535 - cnt2)+cnt1;
//			}
//		}
//		else{
//			if (cnt2 > cnt1){
//				diff = cnt2 - cnt1;
//				}
//			else{
//				diff = (65535 - cnt1) + cnt2;
//				}
//			}
//
//		if(diff == 65535) diff = 0;
//		sprintf(speed,"Speed:%5d\0",diff);
//		OLED_ShowString(10,20,speed);
//		dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
////		sprintf(hello2,"Dir:%5d\0",cnt2);
////		OLED_ShowString(10,10,hello2);
//		OLED_Refresh_Gram();

		//tick = HAL_GetTick();
		 if(HAL_GetTick() - tick >= 10){
				  cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
				  cnt2 =  __HAL_TIM_GET_COUNTER(&htim3);
					if(cnt1 > 32000){


						  diff1 = (65536 - cnt1);


						  }
					 else {





							 diff1 = cnt1;

					  }


					  if(cnt2 > 32000){
						  diff2 = (65536 - cnt2);
					  }
					  else {
						 diff2 = cnt2;
					  }


					total_distanceB += diff2;
					total_distanceA += diff1;
		  			//__HAL_TIM_SET_COUNTER(&htim2, 0);
		  			//__HAL_TIM_SET_COUNTER(&htim3, 0);
		  			tick = HAL_GetTick();
		  			sprintf(disA,"DisA:%5d",cnt1);
		  			sprintf(disB,"DisB:%5d",total_distanceB);
		  			OLED_ShowString(10,20,disA);
		  			OLED_ShowString(10,50,disB);
		  			OLED_Refresh_Gram();




		}
	}


    osDelay(1);
  /* USER CODE END encoder_task */
}

/* USER CODE BEGIN Header_show */
/**
* @brief Function implementing the show_OLED thread.
* @param argument: Not used
* @retval None
*/

/* Movement Functions BEGIN Header_show */
void forward(double target_distance,int pwnVal){
	HAL_UART_Transmit(&huart3,"F1\n",2,0xFF);
	//OLED_ShowString(10,10,"           ");
	  osDelay(1000);
	  htim1.Instance -> CCR4 = 170;
	  osDelay(1000);
	  htim1.Instance -> CCR4 = 130;
	  osDelay(1000);
	  htim1.Instance -> CCR4 = 150;
	  osDelay(1000);
	  //int pidVal;
	  int encoder_count = 1320;

	  //total_angle = 0;
	  //double Aint = 0;
	  OLED_ShowString(10,10,"Start\0");
	  uint8_t targetdistance[20];

	  sprintf(disA,"DisA:%5d%5d\0",total_distanceA+total_distanceB);

//	  sprintf(targetdistance,"1-%5d_ \0",2*(target_distance));
//	  HAL_UART_Transmit(&huart3,targetdistance,10,0xFF);
//	  sprintf(targetdistance,"2-%d_ \0",2*(20));
//	  HAL_UART_Transmit(&huart3,targetdistance,10,0xFF);
//	  sprintf(targetdistance,"3-%5d_ \0",encoder_count);
//	  HAL_UART_Transmit(&huart3,targetdistance,10,0xFF);
//	  sprintf(targetdistance,"4-%5d_ \0",2*((target_distance)/20)*encoder_count);
//	  HAL_UART_Transmit(&huart3,targetdistance,10,0xFF);

	  OLED_ShowString(10,20,disA);


	  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwnVal);
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwnVal);
	  while (strcmp(aRxBuffer,"F1")==0){
		  osDelayUntil(10);
		  //pidVal = (int)(total_angle);

		  if(total_angle>= 1){
			  htim1.Instance -> CCR4 = 159;
			  osDelay(200);

		  }
		  else if (total_angle <= -1){
			  htim1.Instance -> CCR4 = 139;
			  osDelay(200);

		  }
		  else{
			  htim1.Instance -> CCR4 = 151;

		  }
		  if(((total_distanceA+total_distanceB)) >= 2*((target_distance)/204)*encoder_count){


				stop();
				break;
			}

	  }
	  stop();

}

void stop(){
	HAL_UART_Transmit(&huart3,"F2\n",2,0xFF);
	//OLED_ShowString(10,10,"           ");
	  OLED_ShowString(10,10,"Stop\0");
	  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
	  int pwnVal = 0;
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwnVal);
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwnVal);
}

void reverse(int pwnVal){
	HAL_UART_Transmit(&huart3,"F3\n",2,0xFF);
	//OLED_ShowString(10,10,"           ");
	  OLED_ShowString(10,10,"Reverse\0");
	  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwnVal);
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwnVal);
}

void center(){
	HAL_UART_Transmit(&huart3,"C1\n",2,0xFF);
	//OLED_ShowString(10,10,"           ");
	  OLED_ShowString(10,10,"Center\0");
	  htim1.Instance->CCR4 = 151;
}

void Left(int target_angle,int pwnVal){
	HAL_UART_Transmit(&huart3,"L1\n",2,0xFF);
	//OLED_ShowString(10,10,"           ");
	 HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
	 HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
	 HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
	 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwnVal);
	 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwnVal);
	  OLED_ShowString(10,10,"Full Left\0");

	  while(strcmp(aRxBuffer,"L1") == 0){
		  osDelay(10);
		  if (total_angle <= target_angle){
			  htim1.Instance->CCR4 = 95;
		  }else{
			  osDelay(500);
			  break;
		  }
	  }
	  total_angle = 0;
	  htim1.Instance->CCR4 = 151;
	  //osDelay(10);
	  stop();
}

void fullLeft(){
	HAL_UART_Transmit(&huart3,"L1\n",2,0xFF);
	//OLED_ShowString(10,10,"           ");
	  OLED_ShowString(10,10,"Full Left\0");
	  htim1.Instance->CCR4 = 100;
}

void halfLeft(){
	HAL_UART_Transmit(&huart3,"L2\n",2,0xFF);
	//OLED_ShowString(10,10,"           ");
	  OLED_ShowString(10,10,"Half Left\0");
	  htim1.Instance->CCR4 = 125;
}

void Right(int target_angle,int pwnVal){
	HAL_UART_Transmit(&huart3,"R1\n",2,0xFF);
	HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
		 HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwnVal);
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwnVal);
		  OLED_ShowString(10,10,"Right\0");

		  while(strcmp(aRxBuffer,"R1")==0){
			  osDelay(10);
			  if (total_angle >= target_angle){
				  htim1.Instance->CCR4 = 205;
			  }else{
				  osDelay(500);
				  break;
			  }
		  }
		  total_angle = 0;
		  htim1.Instance->CCR4 = 151;
		  //osDelay(10);
		  stop();
}

void fullRight(){
	HAL_UART_Transmit(&huart3,"R1\n",2,0xFF);
	//OLED_ShowString(10,10,"           ");
	  OLED_ShowString(10,10,"Full Right\0");
	  htim1.Instance->CCR4 = 200;
}

void halfRight(){
	HAL_UART_Transmit(&huart3,"R2\0",2,0xFF);
	//OLED_ShowString(10,10,"           ");
	  OLED_ShowString(10,10,"Half Right\0");
	  htim1.Instance->CCR4 = 175;
}



/* Movement Functions END show */



/* USER CODE END Header_show */
void show(void *argument)
{
  /* USER CODE BEGIN show */
	uint8_t hello2[20] = "Hello World!\0";
	uint8_t testing[20];
  /* Infinite loop */
  for(;;)
  {
//	  sprintf(hello2,"%s\0",aRxBuffer);
//	  OLED_ShowString(10,10,hello2);
//	  OLED_Refresh_Gram();
//	  sprintf(testing, "%s\0", aRxBuffer);
//	  if (strcmp(testing, "hello") == 0){
//		  OLED_ShowString(10,10,"HELLO\0");
//		  //OLED_Refresh_Gram();
//	  }else if (strcmp(testing, "hell") == 0){
//		  OLED_ShowString(10,10, "HELL");
//	  }else{
//		  OLED_ShowString(10,10,testing);
//	  }
//	  osDelay(5000);


  }
  /* USER CODE END show */
}

/* USER CODE BEGIN Header_GyroTask */
/**
* @brief Function implementing the Gyrotask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GyroTask */
void GyroTask(void *argument)
{
  /* USER CODE BEGIN GyroTask */
	uint8_t val[2] = {0,0};

	 char hellox[20];
	 int16_t angular_speed = 0;



	 uint32_t tick = 0;
	 gyroInit();
	 int dir;
	 int16_t offset = 0;
	 tick = HAL_GetTick();
	 osDelayUntil(10);

  /* Infinite loop */
  for(;;)
  {
      osDelayUntil(10);

      if(HAL_GetTick() - tick >= 100){
   readByte(0x37, val);
   osDelayUntil(1);
   angular_speed = ((int16_t)((int8_t)val[0]))*256 +  (uint16_t)val[1];
   angular_speed = (val[0] << 8) | val[1];






   total_angle +=(double)(angular_speed + 5)*((HAL_GetTick() - tick)/16400.0)*1.42;

   //global_angle += (double)(angular_speed + 0.5)*((HAL_GetTick() - tick)/16400.0)*1.42;


   //prevSpeed = angular_speed;
   if(total_angle >= 720){
    total_angle = 0;
   }
   if(total_angle <= -720){
    total_angle = 0;
   }
   sprintf(hellox, "angle %5d \0", (int)(total_angle));
   OLED_ShowString(10,30, hellox);
   //OLED_Refresh_Gram();
   tick = HAL_GetTick();
      }

  }
  /* USER CODE END GyroTask */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
